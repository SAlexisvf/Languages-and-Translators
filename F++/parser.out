Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    not

Grammar

Rule 0     S' -> program
Rule 1     program -> var func mainProgram
Rule 2     var -> type varSequence semicolon var
Rule 3     var -> <empty>
Rule 4     varSequence -> id equal arithmeticExpression
Rule 5     varSequence -> id
Rule 6     varSequence -> matrix
Rule 7     varSequence -> id equal arithmeticExpression comma varSequence
Rule 8     varSequence -> id comma varSequence
Rule 9     varSequence -> matrix comma varSequence
Rule 10    type -> int
Rule 11    type -> double
Rule 12    arithmeticExpression -> value
Rule 13    arithmeticExpression -> value plus arithmeticExpression
Rule 14    arithmeticExpression -> value minus arithmeticExpression
Rule 15    arithmeticExpression -> value multiply arithmeticExpression
Rule 16    arithmeticExpression -> value divide arithmeticExpression
Rule 17    arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis
Rule 18    arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
Rule 19    arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
Rule 20    arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
Rule 21    arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
Rule 22    arithmeticExpression -> unaryExpression
Rule 23    unaryExpression -> id plusPlus
Rule 24    unaryExpression -> id minusMinus
Rule 25    unaryExpression -> plusPlus id
Rule 26    unaryExpression -> minusMinus id
Rule 27    value -> intValue
Rule 28    value -> doubleValue
Rule 29    value -> id
Rule 30    matrix -> id openBracket value closeBracket
Rule 31    matrix -> id openBracket value closeBracket openBracket value closeBracket
Rule 32    func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace func
Rule 33    func -> <empty>
Rule 34    mainProgram -> main openParenthesis closeParenthesis openBrace subroutine closeBrace
Rule 35    subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
Rule 36    subroutine -> consoleRead openParenthesis id closeParenthesis semicolon subroutine
Rule 37    subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
Rule 38    subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
Rule 39    subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
Rule 40    subroutine -> matrix equal arithmeticExpression semicolon subroutine
Rule 41    subroutine -> id equal arithmeticExpression semicolon subroutine
Rule 42    subroutine -> unaryExpression semicolon subroutine
Rule 43    subroutine -> call id openParenthesis closeParenthesis semicolon subroutine
Rule 44    subroutine -> <empty>
Rule 45    elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement
Rule 46    elseStatement -> else openBrace subroutine closeBrace
Rule 47    elseStatement -> <empty>
Rule 48    statement -> arithmeticExpression
Rule 49    statement -> arithmeticExpression logicExpression arithmeticExpression
Rule 50    statement -> statement logicExpression statement
Rule 51    logicExpression -> greaterThan
Rule 52    logicExpression -> lessThan
Rule 53    logicExpression -> isEqual
Rule 54    logicExpression -> notEqual
Rule 55    logicExpression -> greaterOrEqual
Rule 56    logicExpression -> lessOrEqual
Rule 57    logicExpression -> and
Rule 58    logicExpression -> or
Rule 59    cout -> arithmeticExpression
Rule 60    cout -> string

Terminals, with rules where they appear

and                  : 57
call                 : 43
closeBrace           : 32 34 37 38 39 45 46
closeBracket         : 30 31 31
closeParenthesis     : 17 18 19 20 21 32 34 35 36 37 38 39 43 45
comma                : 7 8 9
consoleRead          : 36
consoleWrite         : 35
divide               : 16 20
double               : 11
doubleValue          : 28
elif                 : 45
else                 : 46
equal                : 4 7 40 41
error                : 
for                  : 39
function             : 32
greaterOrEqual       : 55
greaterThan          : 51
id                   : 4 5 7 8 23 24 25 26 29 30 31 32 36 41 43
if                   : 37
int                  : 10
intValue             : 27
isEqual              : 53
lessOrEqual          : 56
lessThan             : 52
main                 : 34
minus                : 14 19
minusMinus           : 24 26
multiply             : 15 21
not                  : 
notEqual             : 54
openBrace            : 32 34 37 38 39 45 46
openBracket          : 30 31 31
openParenthesis      : 17 18 19 20 21 32 34 35 36 37 38 39 43 45
or                   : 58
plus                 : 13 18
plusPlus             : 23 25
semicolon            : 2 35 36 39 39 40 41 42 43
string               : 60
while                : 38

Nonterminals, with rules where they appear

arithmeticExpression : 4 7 13 14 15 16 17 18 18 19 19 20 20 21 21 39 40 41 48 49 49 59
cout                 : 35
elseStatement        : 37 45
func                 : 1 32
logicExpression      : 49 50
mainProgram          : 1
matrix               : 6 9 40
program              : 0
statement            : 37 38 39 45 50 50
subroutine           : 32 34 35 36 37 37 38 38 39 39 40 41 42 43 45 46
type                 : 2
unaryExpression      : 22 42
value                : 12 13 14 15 16 30 31 31
var                  : 1 2
varSequence          : 2 7 8 9 39

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . var func mainProgram
    (2) var -> . type varSequence semicolon var
    (3) var -> .
    (10) type -> . int
    (11) type -> . double

    function        reduce using rule 3 (var -> .)
    main            reduce using rule 3 (var -> .)
    int             shift and go to state 4
    double          shift and go to state 5

    program                        shift and go to state 1
    var                            shift and go to state 2
    type                           shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> var . func mainProgram
    (32) func -> . function id openParenthesis closeParenthesis openBrace subroutine closeBrace func
    (33) func -> .

    function        shift and go to state 7
    main            reduce using rule 33 (func -> .)

    func                           shift and go to state 6

state 3

    (2) var -> type . varSequence semicolon var
    (4) varSequence -> . id equal arithmeticExpression
    (5) varSequence -> . id
    (6) varSequence -> . matrix
    (7) varSequence -> . id equal arithmeticExpression comma varSequence
    (8) varSequence -> . id comma varSequence
    (9) varSequence -> . matrix comma varSequence
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket

    id              shift and go to state 9

    varSequence                    shift and go to state 8
    matrix                         shift and go to state 10

state 4

    (10) type -> int .

    id              reduce using rule 10 (type -> int .)


state 5

    (11) type -> double .

    id              reduce using rule 11 (type -> double .)


state 6

    (1) program -> var func . mainProgram
    (34) mainProgram -> . main openParenthesis closeParenthesis openBrace subroutine closeBrace

    main            shift and go to state 12

    mainProgram                    shift and go to state 11

state 7

    (32) func -> function . id openParenthesis closeParenthesis openBrace subroutine closeBrace func

    id              shift and go to state 13


state 8

    (2) var -> type varSequence . semicolon var

    semicolon       shift and go to state 14


state 9

    (4) varSequence -> id . equal arithmeticExpression
    (5) varSequence -> id .
    (7) varSequence -> id . equal arithmeticExpression comma varSequence
    (8) varSequence -> id . comma varSequence
    (30) matrix -> id . openBracket value closeBracket
    (31) matrix -> id . openBracket value closeBracket openBracket value closeBracket

    equal           shift and go to state 15
    semicolon       reduce using rule 5 (varSequence -> id .)
    comma           shift and go to state 16
    openBracket     shift and go to state 17


state 10

    (6) varSequence -> matrix .
    (9) varSequence -> matrix . comma varSequence

    semicolon       reduce using rule 6 (varSequence -> matrix .)
    comma           shift and go to state 18


state 11

    (1) program -> var func mainProgram .

    $end            reduce using rule 1 (program -> var func mainProgram .)


state 12

    (34) mainProgram -> main . openParenthesis closeParenthesis openBrace subroutine closeBrace

    openParenthesis shift and go to state 19


state 13

    (32) func -> function id . openParenthesis closeParenthesis openBrace subroutine closeBrace func

    openParenthesis shift and go to state 20


state 14

    (2) var -> type varSequence semicolon . var
    (2) var -> . type varSequence semicolon var
    (3) var -> .
    (10) type -> . int
    (11) type -> . double

    function        reduce using rule 3 (var -> .)
    main            reduce using rule 3 (var -> .)
    int             shift and go to state 4
    double          shift and go to state 5

    type                           shift and go to state 3
    var                            shift and go to state 21

state 15

    (4) varSequence -> id equal . arithmeticExpression
    (7) varSequence -> id equal . arithmeticExpression comma varSequence
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 23
    value                          shift and go to state 24
    unaryExpression                shift and go to state 26

state 16

    (8) varSequence -> id comma . varSequence
    (4) varSequence -> . id equal arithmeticExpression
    (5) varSequence -> . id
    (6) varSequence -> . matrix
    (7) varSequence -> . id equal arithmeticExpression comma varSequence
    (8) varSequence -> . id comma varSequence
    (9) varSequence -> . matrix comma varSequence
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket

    id              shift and go to state 9

    varSequence                    shift and go to state 31
    matrix                         shift and go to state 10

state 17

    (30) matrix -> id openBracket . value closeBracket
    (31) matrix -> id openBracket . value closeBracket openBracket value closeBracket
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id

    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 32

    value                          shift and go to state 33

state 18

    (9) varSequence -> matrix comma . varSequence
    (4) varSequence -> . id equal arithmeticExpression
    (5) varSequence -> . id
    (6) varSequence -> . matrix
    (7) varSequence -> . id equal arithmeticExpression comma varSequence
    (8) varSequence -> . id comma varSequence
    (9) varSequence -> . matrix comma varSequence
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket

    id              shift and go to state 9

    matrix                         shift and go to state 10
    varSequence                    shift and go to state 34

state 19

    (34) mainProgram -> main openParenthesis . closeParenthesis openBrace subroutine closeBrace

    closeParenthesis shift and go to state 35


state 20

    (32) func -> function id openParenthesis . closeParenthesis openBrace subroutine closeBrace func

    closeParenthesis shift and go to state 36


state 21

    (2) var -> type varSequence semicolon var .

    function        reduce using rule 2 (var -> type varSequence semicolon var .)
    main            reduce using rule 2 (var -> type varSequence semicolon var .)


state 22

    (29) value -> id .
    (23) unaryExpression -> id . plusPlus
    (24) unaryExpression -> id . minusMinus

    plus            reduce using rule 29 (value -> id .)
    minus           reduce using rule 29 (value -> id .)
    multiply        reduce using rule 29 (value -> id .)
    divide          reduce using rule 29 (value -> id .)
    comma           reduce using rule 29 (value -> id .)
    semicolon       reduce using rule 29 (value -> id .)
    closeParenthesis reduce using rule 29 (value -> id .)
    greaterThan     reduce using rule 29 (value -> id .)
    lessThan        reduce using rule 29 (value -> id .)
    isEqual         reduce using rule 29 (value -> id .)
    notEqual        reduce using rule 29 (value -> id .)
    greaterOrEqual  reduce using rule 29 (value -> id .)
    lessOrEqual     reduce using rule 29 (value -> id .)
    and             reduce using rule 29 (value -> id .)
    or              reduce using rule 29 (value -> id .)
    plusPlus        shift and go to state 37
    minusMinus      shift and go to state 38


state 23

    (4) varSequence -> id equal arithmeticExpression .
    (7) varSequence -> id equal arithmeticExpression . comma varSequence

    semicolon       reduce using rule 4 (varSequence -> id equal arithmeticExpression .)
    comma           shift and go to state 39


state 24

    (12) arithmeticExpression -> value .
    (13) arithmeticExpression -> value . plus arithmeticExpression
    (14) arithmeticExpression -> value . minus arithmeticExpression
    (15) arithmeticExpression -> value . multiply arithmeticExpression
    (16) arithmeticExpression -> value . divide arithmeticExpression

    comma           reduce using rule 12 (arithmeticExpression -> value .)
    semicolon       reduce using rule 12 (arithmeticExpression -> value .)
    closeParenthesis reduce using rule 12 (arithmeticExpression -> value .)
    greaterThan     reduce using rule 12 (arithmeticExpression -> value .)
    lessThan        reduce using rule 12 (arithmeticExpression -> value .)
    isEqual         reduce using rule 12 (arithmeticExpression -> value .)
    notEqual        reduce using rule 12 (arithmeticExpression -> value .)
    greaterOrEqual  reduce using rule 12 (arithmeticExpression -> value .)
    lessOrEqual     reduce using rule 12 (arithmeticExpression -> value .)
    and             reduce using rule 12 (arithmeticExpression -> value .)
    or              reduce using rule 12 (arithmeticExpression -> value .)
    plus            shift and go to state 40
    minus           shift and go to state 41
    multiply        shift and go to state 42
    divide          shift and go to state 43


state 25

    (17) arithmeticExpression -> openParenthesis . arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> openParenthesis . arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> openParenthesis . arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> openParenthesis . arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> openParenthesis . arithmeticExpression closeParenthesis multiply arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 44
    value                          shift and go to state 24
    unaryExpression                shift and go to state 26

state 26

    (22) arithmeticExpression -> unaryExpression .

    comma           reduce using rule 22 (arithmeticExpression -> unaryExpression .)
    semicolon       reduce using rule 22 (arithmeticExpression -> unaryExpression .)
    closeParenthesis reduce using rule 22 (arithmeticExpression -> unaryExpression .)
    greaterThan     reduce using rule 22 (arithmeticExpression -> unaryExpression .)
    lessThan        reduce using rule 22 (arithmeticExpression -> unaryExpression .)
    isEqual         reduce using rule 22 (arithmeticExpression -> unaryExpression .)
    notEqual        reduce using rule 22 (arithmeticExpression -> unaryExpression .)
    greaterOrEqual  reduce using rule 22 (arithmeticExpression -> unaryExpression .)
    lessOrEqual     reduce using rule 22 (arithmeticExpression -> unaryExpression .)
    and             reduce using rule 22 (arithmeticExpression -> unaryExpression .)
    or              reduce using rule 22 (arithmeticExpression -> unaryExpression .)


state 27

    (27) value -> intValue .

    plus            reduce using rule 27 (value -> intValue .)
    minus           reduce using rule 27 (value -> intValue .)
    multiply        reduce using rule 27 (value -> intValue .)
    divide          reduce using rule 27 (value -> intValue .)
    comma           reduce using rule 27 (value -> intValue .)
    semicolon       reduce using rule 27 (value -> intValue .)
    closeBracket    reduce using rule 27 (value -> intValue .)
    closeParenthesis reduce using rule 27 (value -> intValue .)
    greaterThan     reduce using rule 27 (value -> intValue .)
    lessThan        reduce using rule 27 (value -> intValue .)
    isEqual         reduce using rule 27 (value -> intValue .)
    notEqual        reduce using rule 27 (value -> intValue .)
    greaterOrEqual  reduce using rule 27 (value -> intValue .)
    lessOrEqual     reduce using rule 27 (value -> intValue .)
    and             reduce using rule 27 (value -> intValue .)
    or              reduce using rule 27 (value -> intValue .)


state 28

    (28) value -> doubleValue .

    plus            reduce using rule 28 (value -> doubleValue .)
    minus           reduce using rule 28 (value -> doubleValue .)
    multiply        reduce using rule 28 (value -> doubleValue .)
    divide          reduce using rule 28 (value -> doubleValue .)
    comma           reduce using rule 28 (value -> doubleValue .)
    semicolon       reduce using rule 28 (value -> doubleValue .)
    closeBracket    reduce using rule 28 (value -> doubleValue .)
    closeParenthesis reduce using rule 28 (value -> doubleValue .)
    greaterThan     reduce using rule 28 (value -> doubleValue .)
    lessThan        reduce using rule 28 (value -> doubleValue .)
    isEqual         reduce using rule 28 (value -> doubleValue .)
    notEqual        reduce using rule 28 (value -> doubleValue .)
    greaterOrEqual  reduce using rule 28 (value -> doubleValue .)
    lessOrEqual     reduce using rule 28 (value -> doubleValue .)
    and             reduce using rule 28 (value -> doubleValue .)
    or              reduce using rule 28 (value -> doubleValue .)


state 29

    (25) unaryExpression -> plusPlus . id

    id              shift and go to state 45


state 30

    (26) unaryExpression -> minusMinus . id

    id              shift and go to state 46


state 31

    (8) varSequence -> id comma varSequence .

    semicolon       reduce using rule 8 (varSequence -> id comma varSequence .)


state 32

    (29) value -> id .

    closeBracket    reduce using rule 29 (value -> id .)


state 33

    (30) matrix -> id openBracket value . closeBracket
    (31) matrix -> id openBracket value . closeBracket openBracket value closeBracket

    closeBracket    shift and go to state 47


state 34

    (9) varSequence -> matrix comma varSequence .

    semicolon       reduce using rule 9 (varSequence -> matrix comma varSequence .)


state 35

    (34) mainProgram -> main openParenthesis closeParenthesis . openBrace subroutine closeBrace

    openBrace       shift and go to state 48


state 36

    (32) func -> function id openParenthesis closeParenthesis . openBrace subroutine closeBrace func

    openBrace       shift and go to state 49


state 37

    (23) unaryExpression -> id plusPlus .

    comma           reduce using rule 23 (unaryExpression -> id plusPlus .)
    semicolon       reduce using rule 23 (unaryExpression -> id plusPlus .)
    closeParenthesis reduce using rule 23 (unaryExpression -> id plusPlus .)
    greaterThan     reduce using rule 23 (unaryExpression -> id plusPlus .)
    lessThan        reduce using rule 23 (unaryExpression -> id plusPlus .)
    isEqual         reduce using rule 23 (unaryExpression -> id plusPlus .)
    notEqual        reduce using rule 23 (unaryExpression -> id plusPlus .)
    greaterOrEqual  reduce using rule 23 (unaryExpression -> id plusPlus .)
    lessOrEqual     reduce using rule 23 (unaryExpression -> id plusPlus .)
    and             reduce using rule 23 (unaryExpression -> id plusPlus .)
    or              reduce using rule 23 (unaryExpression -> id plusPlus .)


state 38

    (24) unaryExpression -> id minusMinus .

    comma           reduce using rule 24 (unaryExpression -> id minusMinus .)
    semicolon       reduce using rule 24 (unaryExpression -> id minusMinus .)
    closeParenthesis reduce using rule 24 (unaryExpression -> id minusMinus .)
    greaterThan     reduce using rule 24 (unaryExpression -> id minusMinus .)
    lessThan        reduce using rule 24 (unaryExpression -> id minusMinus .)
    isEqual         reduce using rule 24 (unaryExpression -> id minusMinus .)
    notEqual        reduce using rule 24 (unaryExpression -> id minusMinus .)
    greaterOrEqual  reduce using rule 24 (unaryExpression -> id minusMinus .)
    lessOrEqual     reduce using rule 24 (unaryExpression -> id minusMinus .)
    and             reduce using rule 24 (unaryExpression -> id minusMinus .)
    or              reduce using rule 24 (unaryExpression -> id minusMinus .)


state 39

    (7) varSequence -> id equal arithmeticExpression comma . varSequence
    (4) varSequence -> . id equal arithmeticExpression
    (5) varSequence -> . id
    (6) varSequence -> . matrix
    (7) varSequence -> . id equal arithmeticExpression comma varSequence
    (8) varSequence -> . id comma varSequence
    (9) varSequence -> . matrix comma varSequence
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket

    id              shift and go to state 9

    varSequence                    shift and go to state 50
    matrix                         shift and go to state 10

state 40

    (13) arithmeticExpression -> value plus . arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    value                          shift and go to state 24
    arithmeticExpression           shift and go to state 51
    unaryExpression                shift and go to state 26

state 41

    (14) arithmeticExpression -> value minus . arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    value                          shift and go to state 24
    arithmeticExpression           shift and go to state 52
    unaryExpression                shift and go to state 26

state 42

    (15) arithmeticExpression -> value multiply . arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    value                          shift and go to state 24
    arithmeticExpression           shift and go to state 53
    unaryExpression                shift and go to state 26

state 43

    (16) arithmeticExpression -> value divide . arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    value                          shift and go to state 24
    arithmeticExpression           shift and go to state 54
    unaryExpression                shift and go to state 26

state 44

    (17) arithmeticExpression -> openParenthesis arithmeticExpression . closeParenthesis
    (18) arithmeticExpression -> openParenthesis arithmeticExpression . closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> openParenthesis arithmeticExpression . closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> openParenthesis arithmeticExpression . closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> openParenthesis arithmeticExpression . closeParenthesis multiply arithmeticExpression

    closeParenthesis shift and go to state 55


state 45

    (25) unaryExpression -> plusPlus id .

    comma           reduce using rule 25 (unaryExpression -> plusPlus id .)
    semicolon       reduce using rule 25 (unaryExpression -> plusPlus id .)
    closeParenthesis reduce using rule 25 (unaryExpression -> plusPlus id .)
    greaterThan     reduce using rule 25 (unaryExpression -> plusPlus id .)
    lessThan        reduce using rule 25 (unaryExpression -> plusPlus id .)
    isEqual         reduce using rule 25 (unaryExpression -> plusPlus id .)
    notEqual        reduce using rule 25 (unaryExpression -> plusPlus id .)
    greaterOrEqual  reduce using rule 25 (unaryExpression -> plusPlus id .)
    lessOrEqual     reduce using rule 25 (unaryExpression -> plusPlus id .)
    and             reduce using rule 25 (unaryExpression -> plusPlus id .)
    or              reduce using rule 25 (unaryExpression -> plusPlus id .)


state 46

    (26) unaryExpression -> minusMinus id .

    comma           reduce using rule 26 (unaryExpression -> minusMinus id .)
    semicolon       reduce using rule 26 (unaryExpression -> minusMinus id .)
    closeParenthesis reduce using rule 26 (unaryExpression -> minusMinus id .)
    greaterThan     reduce using rule 26 (unaryExpression -> minusMinus id .)
    lessThan        reduce using rule 26 (unaryExpression -> minusMinus id .)
    isEqual         reduce using rule 26 (unaryExpression -> minusMinus id .)
    notEqual        reduce using rule 26 (unaryExpression -> minusMinus id .)
    greaterOrEqual  reduce using rule 26 (unaryExpression -> minusMinus id .)
    lessOrEqual     reduce using rule 26 (unaryExpression -> minusMinus id .)
    and             reduce using rule 26 (unaryExpression -> minusMinus id .)
    or              reduce using rule 26 (unaryExpression -> minusMinus id .)


state 47

    (30) matrix -> id openBracket value closeBracket .
    (31) matrix -> id openBracket value closeBracket . openBracket value closeBracket

    comma           reduce using rule 30 (matrix -> id openBracket value closeBracket .)
    semicolon       reduce using rule 30 (matrix -> id openBracket value closeBracket .)
    equal           reduce using rule 30 (matrix -> id openBracket value closeBracket .)
    openBracket     shift and go to state 56


state 48

    (34) mainProgram -> main openParenthesis closeParenthesis openBrace . subroutine closeBrace
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . matrix equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (42) subroutine -> . unaryExpression semicolon subroutine
    (43) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (44) subroutine -> .
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 58
    consoleRead     shift and go to state 59
    if              shift and go to state 61
    while           shift and go to state 62
    for             shift and go to state 63
    id              shift and go to state 60
    call            shift and go to state 66
    closeBrace      reduce using rule 44 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 57
    matrix                         shift and go to state 64
    unaryExpression                shift and go to state 65

state 49

    (32) func -> function id openParenthesis closeParenthesis openBrace . subroutine closeBrace func
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . matrix equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (42) subroutine -> . unaryExpression semicolon subroutine
    (43) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (44) subroutine -> .
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 58
    consoleRead     shift and go to state 59
    if              shift and go to state 61
    while           shift and go to state 62
    for             shift and go to state 63
    id              shift and go to state 60
    call            shift and go to state 66
    closeBrace      reduce using rule 44 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 67
    matrix                         shift and go to state 64
    unaryExpression                shift and go to state 65

state 50

    (7) varSequence -> id equal arithmeticExpression comma varSequence .

    semicolon       reduce using rule 7 (varSequence -> id equal arithmeticExpression comma varSequence .)


state 51

    (13) arithmeticExpression -> value plus arithmeticExpression .

    comma           reduce using rule 13 (arithmeticExpression -> value plus arithmeticExpression .)
    semicolon       reduce using rule 13 (arithmeticExpression -> value plus arithmeticExpression .)
    closeParenthesis reduce using rule 13 (arithmeticExpression -> value plus arithmeticExpression .)
    greaterThan     reduce using rule 13 (arithmeticExpression -> value plus arithmeticExpression .)
    lessThan        reduce using rule 13 (arithmeticExpression -> value plus arithmeticExpression .)
    isEqual         reduce using rule 13 (arithmeticExpression -> value plus arithmeticExpression .)
    notEqual        reduce using rule 13 (arithmeticExpression -> value plus arithmeticExpression .)
    greaterOrEqual  reduce using rule 13 (arithmeticExpression -> value plus arithmeticExpression .)
    lessOrEqual     reduce using rule 13 (arithmeticExpression -> value plus arithmeticExpression .)
    and             reduce using rule 13 (arithmeticExpression -> value plus arithmeticExpression .)
    or              reduce using rule 13 (arithmeticExpression -> value plus arithmeticExpression .)


state 52

    (14) arithmeticExpression -> value minus arithmeticExpression .

    comma           reduce using rule 14 (arithmeticExpression -> value minus arithmeticExpression .)
    semicolon       reduce using rule 14 (arithmeticExpression -> value minus arithmeticExpression .)
    closeParenthesis reduce using rule 14 (arithmeticExpression -> value minus arithmeticExpression .)
    greaterThan     reduce using rule 14 (arithmeticExpression -> value minus arithmeticExpression .)
    lessThan        reduce using rule 14 (arithmeticExpression -> value minus arithmeticExpression .)
    isEqual         reduce using rule 14 (arithmeticExpression -> value minus arithmeticExpression .)
    notEqual        reduce using rule 14 (arithmeticExpression -> value minus arithmeticExpression .)
    greaterOrEqual  reduce using rule 14 (arithmeticExpression -> value minus arithmeticExpression .)
    lessOrEqual     reduce using rule 14 (arithmeticExpression -> value minus arithmeticExpression .)
    and             reduce using rule 14 (arithmeticExpression -> value minus arithmeticExpression .)
    or              reduce using rule 14 (arithmeticExpression -> value minus arithmeticExpression .)


state 53

    (15) arithmeticExpression -> value multiply arithmeticExpression .

    comma           reduce using rule 15 (arithmeticExpression -> value multiply arithmeticExpression .)
    semicolon       reduce using rule 15 (arithmeticExpression -> value multiply arithmeticExpression .)
    closeParenthesis reduce using rule 15 (arithmeticExpression -> value multiply arithmeticExpression .)
    greaterThan     reduce using rule 15 (arithmeticExpression -> value multiply arithmeticExpression .)
    lessThan        reduce using rule 15 (arithmeticExpression -> value multiply arithmeticExpression .)
    isEqual         reduce using rule 15 (arithmeticExpression -> value multiply arithmeticExpression .)
    notEqual        reduce using rule 15 (arithmeticExpression -> value multiply arithmeticExpression .)
    greaterOrEqual  reduce using rule 15 (arithmeticExpression -> value multiply arithmeticExpression .)
    lessOrEqual     reduce using rule 15 (arithmeticExpression -> value multiply arithmeticExpression .)
    and             reduce using rule 15 (arithmeticExpression -> value multiply arithmeticExpression .)
    or              reduce using rule 15 (arithmeticExpression -> value multiply arithmeticExpression .)


state 54

    (16) arithmeticExpression -> value divide arithmeticExpression .

    comma           reduce using rule 16 (arithmeticExpression -> value divide arithmeticExpression .)
    semicolon       reduce using rule 16 (arithmeticExpression -> value divide arithmeticExpression .)
    closeParenthesis reduce using rule 16 (arithmeticExpression -> value divide arithmeticExpression .)
    greaterThan     reduce using rule 16 (arithmeticExpression -> value divide arithmeticExpression .)
    lessThan        reduce using rule 16 (arithmeticExpression -> value divide arithmeticExpression .)
    isEqual         reduce using rule 16 (arithmeticExpression -> value divide arithmeticExpression .)
    notEqual        reduce using rule 16 (arithmeticExpression -> value divide arithmeticExpression .)
    greaterOrEqual  reduce using rule 16 (arithmeticExpression -> value divide arithmeticExpression .)
    lessOrEqual     reduce using rule 16 (arithmeticExpression -> value divide arithmeticExpression .)
    and             reduce using rule 16 (arithmeticExpression -> value divide arithmeticExpression .)
    or              reduce using rule 16 (arithmeticExpression -> value divide arithmeticExpression .)


state 55

    (17) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .
    (18) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis . plus arithmeticExpression
    (19) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis . minus arithmeticExpression
    (20) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis . divide arithmeticExpression
    (21) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis . multiply arithmeticExpression

    comma           reduce using rule 17 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    semicolon       reduce using rule 17 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    closeParenthesis reduce using rule 17 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    greaterThan     reduce using rule 17 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    lessThan        reduce using rule 17 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    isEqual         reduce using rule 17 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    notEqual        reduce using rule 17 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    greaterOrEqual  reduce using rule 17 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    lessOrEqual     reduce using rule 17 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    and             reduce using rule 17 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    or              reduce using rule 17 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    plus            shift and go to state 68
    minus           shift and go to state 69
    divide          shift and go to state 70
    multiply        shift and go to state 71


state 56

    (31) matrix -> id openBracket value closeBracket openBracket . value closeBracket
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id

    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 32

    value                          shift and go to state 72

state 57

    (34) mainProgram -> main openParenthesis closeParenthesis openBrace subroutine . closeBrace

    closeBrace      shift and go to state 73


state 58

    (35) subroutine -> consoleWrite . openParenthesis cout closeParenthesis semicolon subroutine

    openParenthesis shift and go to state 74


state 59

    (36) subroutine -> consoleRead . openParenthesis id closeParenthesis semicolon subroutine

    openParenthesis shift and go to state 75


state 60

    (41) subroutine -> id . equal arithmeticExpression semicolon subroutine
    (30) matrix -> id . openBracket value closeBracket
    (31) matrix -> id . openBracket value closeBracket openBracket value closeBracket
    (23) unaryExpression -> id . plusPlus
    (24) unaryExpression -> id . minusMinus

    equal           shift and go to state 76
    openBracket     shift and go to state 17
    plusPlus        shift and go to state 37
    minusMinus      shift and go to state 38


state 61

    (37) subroutine -> if . openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine

    openParenthesis shift and go to state 77


state 62

    (38) subroutine -> while . openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine

    openParenthesis shift and go to state 78


state 63

    (39) subroutine -> for . openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine

    openParenthesis shift and go to state 79


state 64

    (40) subroutine -> matrix . equal arithmeticExpression semicolon subroutine

    equal           shift and go to state 80


state 65

    (42) subroutine -> unaryExpression . semicolon subroutine

    semicolon       shift and go to state 81


state 66

    (43) subroutine -> call . id openParenthesis closeParenthesis semicolon subroutine

    id              shift and go to state 82


state 67

    (32) func -> function id openParenthesis closeParenthesis openBrace subroutine . closeBrace func

    closeBrace      shift and go to state 83


state 68

    (18) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus . arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 84
    value                          shift and go to state 24
    unaryExpression                shift and go to state 26

state 69

    (19) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus . arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 85
    value                          shift and go to state 24
    unaryExpression                shift and go to state 26

state 70

    (20) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide . arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 86
    value                          shift and go to state 24
    unaryExpression                shift and go to state 26

state 71

    (21) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply . arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 87
    value                          shift and go to state 24
    unaryExpression                shift and go to state 26

state 72

    (31) matrix -> id openBracket value closeBracket openBracket value . closeBracket

    closeBracket    shift and go to state 88


state 73

    (34) mainProgram -> main openParenthesis closeParenthesis openBrace subroutine closeBrace .

    $end            reduce using rule 34 (mainProgram -> main openParenthesis closeParenthesis openBrace subroutine closeBrace .)


state 74

    (35) subroutine -> consoleWrite openParenthesis . cout closeParenthesis semicolon subroutine
    (59) cout -> . arithmeticExpression
    (60) cout -> . string
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    string          shift and go to state 91
    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    cout                           shift and go to state 89
    arithmeticExpression           shift and go to state 90
    value                          shift and go to state 24
    unaryExpression                shift and go to state 26

state 75

    (36) subroutine -> consoleRead openParenthesis . id closeParenthesis semicolon subroutine

    id              shift and go to state 92


state 76

    (41) subroutine -> id equal . arithmeticExpression semicolon subroutine
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 93
    value                          shift and go to state 24
    unaryExpression                shift and go to state 26

state 77

    (37) subroutine -> if openParenthesis . statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (48) statement -> . arithmeticExpression
    (49) statement -> . arithmeticExpression logicExpression arithmeticExpression
    (50) statement -> . statement logicExpression statement
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    statement                      shift and go to state 94
    arithmeticExpression           shift and go to state 95
    value                          shift and go to state 24
    unaryExpression                shift and go to state 26

state 78

    (38) subroutine -> while openParenthesis . statement closeParenthesis openBrace subroutine closeBrace subroutine
    (48) statement -> . arithmeticExpression
    (49) statement -> . arithmeticExpression logicExpression arithmeticExpression
    (50) statement -> . statement logicExpression statement
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    statement                      shift and go to state 96
    arithmeticExpression           shift and go to state 95
    value                          shift and go to state 24
    unaryExpression                shift and go to state 26

state 79

    (39) subroutine -> for openParenthesis . varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (4) varSequence -> . id equal arithmeticExpression
    (5) varSequence -> . id
    (6) varSequence -> . matrix
    (7) varSequence -> . id equal arithmeticExpression comma varSequence
    (8) varSequence -> . id comma varSequence
    (9) varSequence -> . matrix comma varSequence
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket

    id              shift and go to state 9

    varSequence                    shift and go to state 97
    matrix                         shift and go to state 10

state 80

    (40) subroutine -> matrix equal . arithmeticExpression semicolon subroutine
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 98
    value                          shift and go to state 24
    unaryExpression                shift and go to state 26

state 81

    (42) subroutine -> unaryExpression semicolon . subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . matrix equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (42) subroutine -> . unaryExpression semicolon subroutine
    (43) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (44) subroutine -> .
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 58
    consoleRead     shift and go to state 59
    if              shift and go to state 61
    while           shift and go to state 62
    for             shift and go to state 63
    id              shift and go to state 60
    call            shift and go to state 66
    closeBrace      reduce using rule 44 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    unaryExpression                shift and go to state 65
    subroutine                     shift and go to state 99
    matrix                         shift and go to state 64

state 82

    (43) subroutine -> call id . openParenthesis closeParenthesis semicolon subroutine

    openParenthesis shift and go to state 100


state 83

    (32) func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace . func
    (32) func -> . function id openParenthesis closeParenthesis openBrace subroutine closeBrace func
    (33) func -> .

    function        shift and go to state 7
    main            reduce using rule 33 (func -> .)

    func                           shift and go to state 101

state 84

    (18) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .

    comma           reduce using rule 18 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    semicolon       reduce using rule 18 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    closeParenthesis reduce using rule 18 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    greaterThan     reduce using rule 18 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    lessThan        reduce using rule 18 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    isEqual         reduce using rule 18 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    notEqual        reduce using rule 18 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    greaterOrEqual  reduce using rule 18 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    lessOrEqual     reduce using rule 18 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    and             reduce using rule 18 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    or              reduce using rule 18 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)


state 85

    (19) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .

    comma           reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    semicolon       reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    closeParenthesis reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    greaterThan     reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    lessThan        reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    isEqual         reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    notEqual        reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    greaterOrEqual  reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    lessOrEqual     reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    and             reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    or              reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)


state 86

    (20) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .

    comma           reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    semicolon       reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    closeParenthesis reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    greaterThan     reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    lessThan        reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    isEqual         reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    notEqual        reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    greaterOrEqual  reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    lessOrEqual     reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    and             reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    or              reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)


state 87

    (21) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .

    comma           reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    semicolon       reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    closeParenthesis reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    greaterThan     reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    lessThan        reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    isEqual         reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    notEqual        reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    greaterOrEqual  reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    lessOrEqual     reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    and             reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    or              reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)


state 88

    (31) matrix -> id openBracket value closeBracket openBracket value closeBracket .

    comma           reduce using rule 31 (matrix -> id openBracket value closeBracket openBracket value closeBracket .)
    semicolon       reduce using rule 31 (matrix -> id openBracket value closeBracket openBracket value closeBracket .)
    equal           reduce using rule 31 (matrix -> id openBracket value closeBracket openBracket value closeBracket .)


state 89

    (35) subroutine -> consoleWrite openParenthesis cout . closeParenthesis semicolon subroutine

    closeParenthesis shift and go to state 102


state 90

    (59) cout -> arithmeticExpression .

    closeParenthesis reduce using rule 59 (cout -> arithmeticExpression .)


state 91

    (60) cout -> string .

    closeParenthesis reduce using rule 60 (cout -> string .)


state 92

    (36) subroutine -> consoleRead openParenthesis id . closeParenthesis semicolon subroutine

    closeParenthesis shift and go to state 103


state 93

    (41) subroutine -> id equal arithmeticExpression . semicolon subroutine

    semicolon       shift and go to state 104


state 94

    (37) subroutine -> if openParenthesis statement . closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (50) statement -> statement . logicExpression statement
    (51) logicExpression -> . greaterThan
    (52) logicExpression -> . lessThan
    (53) logicExpression -> . isEqual
    (54) logicExpression -> . notEqual
    (55) logicExpression -> . greaterOrEqual
    (56) logicExpression -> . lessOrEqual
    (57) logicExpression -> . and
    (58) logicExpression -> . or

    closeParenthesis shift and go to state 105
    greaterThan     shift and go to state 107
    lessThan        shift and go to state 108
    isEqual         shift and go to state 109
    notEqual        shift and go to state 110
    greaterOrEqual  shift and go to state 111
    lessOrEqual     shift and go to state 112
    and             shift and go to state 113
    or              shift and go to state 114

    logicExpression                shift and go to state 106

state 95

    (48) statement -> arithmeticExpression .
    (49) statement -> arithmeticExpression . logicExpression arithmeticExpression
    (51) logicExpression -> . greaterThan
    (52) logicExpression -> . lessThan
    (53) logicExpression -> . isEqual
    (54) logicExpression -> . notEqual
    (55) logicExpression -> . greaterOrEqual
    (56) logicExpression -> . lessOrEqual
    (57) logicExpression -> . and
    (58) logicExpression -> . or

  ! shift/reduce conflict for greaterThan resolved as shift
  ! shift/reduce conflict for lessThan resolved as shift
  ! shift/reduce conflict for isEqual resolved as shift
  ! shift/reduce conflict for notEqual resolved as shift
  ! shift/reduce conflict for greaterOrEqual resolved as shift
  ! shift/reduce conflict for lessOrEqual resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    closeParenthesis reduce using rule 48 (statement -> arithmeticExpression .)
    semicolon       reduce using rule 48 (statement -> arithmeticExpression .)
    greaterThan     shift and go to state 107
    lessThan        shift and go to state 108
    isEqual         shift and go to state 109
    notEqual        shift and go to state 110
    greaterOrEqual  shift and go to state 111
    lessOrEqual     shift and go to state 112
    and             shift and go to state 113
    or              shift and go to state 114

  ! greaterThan     [ reduce using rule 48 (statement -> arithmeticExpression .) ]
  ! lessThan        [ reduce using rule 48 (statement -> arithmeticExpression .) ]
  ! isEqual         [ reduce using rule 48 (statement -> arithmeticExpression .) ]
  ! notEqual        [ reduce using rule 48 (statement -> arithmeticExpression .) ]
  ! greaterOrEqual  [ reduce using rule 48 (statement -> arithmeticExpression .) ]
  ! lessOrEqual     [ reduce using rule 48 (statement -> arithmeticExpression .) ]
  ! and             [ reduce using rule 48 (statement -> arithmeticExpression .) ]
  ! or              [ reduce using rule 48 (statement -> arithmeticExpression .) ]

    logicExpression                shift and go to state 115

state 96

    (38) subroutine -> while openParenthesis statement . closeParenthesis openBrace subroutine closeBrace subroutine
    (50) statement -> statement . logicExpression statement
    (51) logicExpression -> . greaterThan
    (52) logicExpression -> . lessThan
    (53) logicExpression -> . isEqual
    (54) logicExpression -> . notEqual
    (55) logicExpression -> . greaterOrEqual
    (56) logicExpression -> . lessOrEqual
    (57) logicExpression -> . and
    (58) logicExpression -> . or

    closeParenthesis shift and go to state 116
    greaterThan     shift and go to state 107
    lessThan        shift and go to state 108
    isEqual         shift and go to state 109
    notEqual        shift and go to state 110
    greaterOrEqual  shift and go to state 111
    lessOrEqual     shift and go to state 112
    and             shift and go to state 113
    or              shift and go to state 114

    logicExpression                shift and go to state 106

state 97

    (39) subroutine -> for openParenthesis varSequence . semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine

    semicolon       shift and go to state 117


state 98

    (40) subroutine -> matrix equal arithmeticExpression . semicolon subroutine

    semicolon       shift and go to state 118


state 99

    (42) subroutine -> unaryExpression semicolon subroutine .

    closeBrace      reduce using rule 42 (subroutine -> unaryExpression semicolon subroutine .)


state 100

    (43) subroutine -> call id openParenthesis . closeParenthesis semicolon subroutine

    closeParenthesis shift and go to state 119


state 101

    (32) func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace func .

    main            reduce using rule 32 (func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace func .)


state 102

    (35) subroutine -> consoleWrite openParenthesis cout closeParenthesis . semicolon subroutine

    semicolon       shift and go to state 120


state 103

    (36) subroutine -> consoleRead openParenthesis id closeParenthesis . semicolon subroutine

    semicolon       shift and go to state 121


state 104

    (41) subroutine -> id equal arithmeticExpression semicolon . subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . matrix equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (42) subroutine -> . unaryExpression semicolon subroutine
    (43) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (44) subroutine -> .
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 58
    consoleRead     shift and go to state 59
    if              shift and go to state 61
    while           shift and go to state 62
    for             shift and go to state 63
    id              shift and go to state 60
    call            shift and go to state 66
    closeBrace      reduce using rule 44 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 122
    matrix                         shift and go to state 64
    unaryExpression                shift and go to state 65

state 105

    (37) subroutine -> if openParenthesis statement closeParenthesis . openBrace subroutine closeBrace elseStatement subroutine

    openBrace       shift and go to state 123


state 106

    (50) statement -> statement logicExpression . statement
    (48) statement -> . arithmeticExpression
    (49) statement -> . arithmeticExpression logicExpression arithmeticExpression
    (50) statement -> . statement logicExpression statement
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    statement                      shift and go to state 124
    arithmeticExpression           shift and go to state 95
    value                          shift and go to state 24
    unaryExpression                shift and go to state 26

state 107

    (51) logicExpression -> greaterThan .

    openParenthesis reduce using rule 51 (logicExpression -> greaterThan .)
    intValue        reduce using rule 51 (logicExpression -> greaterThan .)
    doubleValue     reduce using rule 51 (logicExpression -> greaterThan .)
    id              reduce using rule 51 (logicExpression -> greaterThan .)
    plusPlus        reduce using rule 51 (logicExpression -> greaterThan .)
    minusMinus      reduce using rule 51 (logicExpression -> greaterThan .)


state 108

    (52) logicExpression -> lessThan .

    openParenthesis reduce using rule 52 (logicExpression -> lessThan .)
    intValue        reduce using rule 52 (logicExpression -> lessThan .)
    doubleValue     reduce using rule 52 (logicExpression -> lessThan .)
    id              reduce using rule 52 (logicExpression -> lessThan .)
    plusPlus        reduce using rule 52 (logicExpression -> lessThan .)
    minusMinus      reduce using rule 52 (logicExpression -> lessThan .)


state 109

    (53) logicExpression -> isEqual .

    openParenthesis reduce using rule 53 (logicExpression -> isEqual .)
    intValue        reduce using rule 53 (logicExpression -> isEqual .)
    doubleValue     reduce using rule 53 (logicExpression -> isEqual .)
    id              reduce using rule 53 (logicExpression -> isEqual .)
    plusPlus        reduce using rule 53 (logicExpression -> isEqual .)
    minusMinus      reduce using rule 53 (logicExpression -> isEqual .)


state 110

    (54) logicExpression -> notEqual .

    openParenthesis reduce using rule 54 (logicExpression -> notEqual .)
    intValue        reduce using rule 54 (logicExpression -> notEqual .)
    doubleValue     reduce using rule 54 (logicExpression -> notEqual .)
    id              reduce using rule 54 (logicExpression -> notEqual .)
    plusPlus        reduce using rule 54 (logicExpression -> notEqual .)
    minusMinus      reduce using rule 54 (logicExpression -> notEqual .)


state 111

    (55) logicExpression -> greaterOrEqual .

    openParenthesis reduce using rule 55 (logicExpression -> greaterOrEqual .)
    intValue        reduce using rule 55 (logicExpression -> greaterOrEqual .)
    doubleValue     reduce using rule 55 (logicExpression -> greaterOrEqual .)
    id              reduce using rule 55 (logicExpression -> greaterOrEqual .)
    plusPlus        reduce using rule 55 (logicExpression -> greaterOrEqual .)
    minusMinus      reduce using rule 55 (logicExpression -> greaterOrEqual .)


state 112

    (56) logicExpression -> lessOrEqual .

    openParenthesis reduce using rule 56 (logicExpression -> lessOrEqual .)
    intValue        reduce using rule 56 (logicExpression -> lessOrEqual .)
    doubleValue     reduce using rule 56 (logicExpression -> lessOrEqual .)
    id              reduce using rule 56 (logicExpression -> lessOrEqual .)
    plusPlus        reduce using rule 56 (logicExpression -> lessOrEqual .)
    minusMinus      reduce using rule 56 (logicExpression -> lessOrEqual .)


state 113

    (57) logicExpression -> and .

    openParenthesis reduce using rule 57 (logicExpression -> and .)
    intValue        reduce using rule 57 (logicExpression -> and .)
    doubleValue     reduce using rule 57 (logicExpression -> and .)
    id              reduce using rule 57 (logicExpression -> and .)
    plusPlus        reduce using rule 57 (logicExpression -> and .)
    minusMinus      reduce using rule 57 (logicExpression -> and .)


state 114

    (58) logicExpression -> or .

    openParenthesis reduce using rule 58 (logicExpression -> or .)
    intValue        reduce using rule 58 (logicExpression -> or .)
    doubleValue     reduce using rule 58 (logicExpression -> or .)
    id              reduce using rule 58 (logicExpression -> or .)
    plusPlus        reduce using rule 58 (logicExpression -> or .)
    minusMinus      reduce using rule 58 (logicExpression -> or .)


state 115

    (49) statement -> arithmeticExpression logicExpression . arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 125
    value                          shift and go to state 24
    unaryExpression                shift and go to state 26

state 116

    (38) subroutine -> while openParenthesis statement closeParenthesis . openBrace subroutine closeBrace subroutine

    openBrace       shift and go to state 126


state 117

    (39) subroutine -> for openParenthesis varSequence semicolon . statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (48) statement -> . arithmeticExpression
    (49) statement -> . arithmeticExpression logicExpression arithmeticExpression
    (50) statement -> . statement logicExpression statement
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    statement                      shift and go to state 127
    arithmeticExpression           shift and go to state 95
    value                          shift and go to state 24
    unaryExpression                shift and go to state 26

state 118

    (40) subroutine -> matrix equal arithmeticExpression semicolon . subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . matrix equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (42) subroutine -> . unaryExpression semicolon subroutine
    (43) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (44) subroutine -> .
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 58
    consoleRead     shift and go to state 59
    if              shift and go to state 61
    while           shift and go to state 62
    for             shift and go to state 63
    id              shift and go to state 60
    call            shift and go to state 66
    closeBrace      reduce using rule 44 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    matrix                         shift and go to state 64
    subroutine                     shift and go to state 128
    unaryExpression                shift and go to state 65

state 119

    (43) subroutine -> call id openParenthesis closeParenthesis . semicolon subroutine

    semicolon       shift and go to state 129


state 120

    (35) subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon . subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . matrix equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (42) subroutine -> . unaryExpression semicolon subroutine
    (43) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (44) subroutine -> .
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 58
    consoleRead     shift and go to state 59
    if              shift and go to state 61
    while           shift and go to state 62
    for             shift and go to state 63
    id              shift and go to state 60
    call            shift and go to state 66
    closeBrace      reduce using rule 44 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 130
    matrix                         shift and go to state 64
    unaryExpression                shift and go to state 65

state 121

    (36) subroutine -> consoleRead openParenthesis id closeParenthesis semicolon . subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . matrix equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (42) subroutine -> . unaryExpression semicolon subroutine
    (43) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (44) subroutine -> .
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 58
    consoleRead     shift and go to state 59
    if              shift and go to state 61
    while           shift and go to state 62
    for             shift and go to state 63
    id              shift and go to state 60
    call            shift and go to state 66
    closeBrace      reduce using rule 44 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 131
    matrix                         shift and go to state 64
    unaryExpression                shift and go to state 65

state 122

    (41) subroutine -> id equal arithmeticExpression semicolon subroutine .

    closeBrace      reduce using rule 41 (subroutine -> id equal arithmeticExpression semicolon subroutine .)


state 123

    (37) subroutine -> if openParenthesis statement closeParenthesis openBrace . subroutine closeBrace elseStatement subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . matrix equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (42) subroutine -> . unaryExpression semicolon subroutine
    (43) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (44) subroutine -> .
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 58
    consoleRead     shift and go to state 59
    if              shift and go to state 61
    while           shift and go to state 62
    for             shift and go to state 63
    id              shift and go to state 60
    call            shift and go to state 66
    closeBrace      reduce using rule 44 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 132
    matrix                         shift and go to state 64
    unaryExpression                shift and go to state 65

state 124

    (50) statement -> statement logicExpression statement .
    (50) statement -> statement . logicExpression statement
    (51) logicExpression -> . greaterThan
    (52) logicExpression -> . lessThan
    (53) logicExpression -> . isEqual
    (54) logicExpression -> . notEqual
    (55) logicExpression -> . greaterOrEqual
    (56) logicExpression -> . lessOrEqual
    (57) logicExpression -> . and
    (58) logicExpression -> . or

  ! shift/reduce conflict for greaterThan resolved as shift
  ! shift/reduce conflict for lessThan resolved as shift
  ! shift/reduce conflict for isEqual resolved as shift
  ! shift/reduce conflict for notEqual resolved as shift
  ! shift/reduce conflict for greaterOrEqual resolved as shift
  ! shift/reduce conflict for lessOrEqual resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    closeParenthesis reduce using rule 50 (statement -> statement logicExpression statement .)
    semicolon       reduce using rule 50 (statement -> statement logicExpression statement .)
    greaterThan     shift and go to state 107
    lessThan        shift and go to state 108
    isEqual         shift and go to state 109
    notEqual        shift and go to state 110
    greaterOrEqual  shift and go to state 111
    lessOrEqual     shift and go to state 112
    and             shift and go to state 113
    or              shift and go to state 114

  ! greaterThan     [ reduce using rule 50 (statement -> statement logicExpression statement .) ]
  ! lessThan        [ reduce using rule 50 (statement -> statement logicExpression statement .) ]
  ! isEqual         [ reduce using rule 50 (statement -> statement logicExpression statement .) ]
  ! notEqual        [ reduce using rule 50 (statement -> statement logicExpression statement .) ]
  ! greaterOrEqual  [ reduce using rule 50 (statement -> statement logicExpression statement .) ]
  ! lessOrEqual     [ reduce using rule 50 (statement -> statement logicExpression statement .) ]
  ! and             [ reduce using rule 50 (statement -> statement logicExpression statement .) ]
  ! or              [ reduce using rule 50 (statement -> statement logicExpression statement .) ]

    logicExpression                shift and go to state 106

state 125

    (49) statement -> arithmeticExpression logicExpression arithmeticExpression .

    closeParenthesis reduce using rule 49 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    greaterThan     reduce using rule 49 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    lessThan        reduce using rule 49 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    isEqual         reduce using rule 49 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    notEqual        reduce using rule 49 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    greaterOrEqual  reduce using rule 49 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    lessOrEqual     reduce using rule 49 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    and             reduce using rule 49 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    or              reduce using rule 49 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    semicolon       reduce using rule 49 (statement -> arithmeticExpression logicExpression arithmeticExpression .)


state 126

    (38) subroutine -> while openParenthesis statement closeParenthesis openBrace . subroutine closeBrace subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . matrix equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (42) subroutine -> . unaryExpression semicolon subroutine
    (43) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (44) subroutine -> .
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 58
    consoleRead     shift and go to state 59
    if              shift and go to state 61
    while           shift and go to state 62
    for             shift and go to state 63
    id              shift and go to state 60
    call            shift and go to state 66
    closeBrace      reduce using rule 44 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 133
    matrix                         shift and go to state 64
    unaryExpression                shift and go to state 65

state 127

    (39) subroutine -> for openParenthesis varSequence semicolon statement . semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (50) statement -> statement . logicExpression statement
    (51) logicExpression -> . greaterThan
    (52) logicExpression -> . lessThan
    (53) logicExpression -> . isEqual
    (54) logicExpression -> . notEqual
    (55) logicExpression -> . greaterOrEqual
    (56) logicExpression -> . lessOrEqual
    (57) logicExpression -> . and
    (58) logicExpression -> . or

    semicolon       shift and go to state 134
    greaterThan     shift and go to state 107
    lessThan        shift and go to state 108
    isEqual         shift and go to state 109
    notEqual        shift and go to state 110
    greaterOrEqual  shift and go to state 111
    lessOrEqual     shift and go to state 112
    and             shift and go to state 113
    or              shift and go to state 114

    logicExpression                shift and go to state 106

state 128

    (40) subroutine -> matrix equal arithmeticExpression semicolon subroutine .

    closeBrace      reduce using rule 40 (subroutine -> matrix equal arithmeticExpression semicolon subroutine .)


state 129

    (43) subroutine -> call id openParenthesis closeParenthesis semicolon . subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . matrix equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (42) subroutine -> . unaryExpression semicolon subroutine
    (43) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (44) subroutine -> .
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 58
    consoleRead     shift and go to state 59
    if              shift and go to state 61
    while           shift and go to state 62
    for             shift and go to state 63
    id              shift and go to state 60
    call            shift and go to state 66
    closeBrace      reduce using rule 44 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 135
    matrix                         shift and go to state 64
    unaryExpression                shift and go to state 65

state 130

    (35) subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon subroutine .

    closeBrace      reduce using rule 35 (subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon subroutine .)


state 131

    (36) subroutine -> consoleRead openParenthesis id closeParenthesis semicolon subroutine .

    closeBrace      reduce using rule 36 (subroutine -> consoleRead openParenthesis id closeParenthesis semicolon subroutine .)


state 132

    (37) subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine . closeBrace elseStatement subroutine

    closeBrace      shift and go to state 136


state 133

    (38) subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine . closeBrace subroutine

    closeBrace      shift and go to state 137


state 134

    (39) subroutine -> for openParenthesis varSequence semicolon statement semicolon . arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 138
    value                          shift and go to state 24
    unaryExpression                shift and go to state 26

state 135

    (43) subroutine -> call id openParenthesis closeParenthesis semicolon subroutine .

    closeBrace      reduce using rule 43 (subroutine -> call id openParenthesis closeParenthesis semicolon subroutine .)


state 136

    (37) subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine closeBrace . elseStatement subroutine
    (45) elseStatement -> . elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement
    (46) elseStatement -> . else openBrace subroutine closeBrace
    (47) elseStatement -> .

    elif            shift and go to state 140
    else            shift and go to state 141
    consoleWrite    reduce using rule 47 (elseStatement -> .)
    consoleRead     reduce using rule 47 (elseStatement -> .)
    if              reduce using rule 47 (elseStatement -> .)
    while           reduce using rule 47 (elseStatement -> .)
    for             reduce using rule 47 (elseStatement -> .)
    id              reduce using rule 47 (elseStatement -> .)
    call            reduce using rule 47 (elseStatement -> .)
    plusPlus        reduce using rule 47 (elseStatement -> .)
    minusMinus      reduce using rule 47 (elseStatement -> .)
    closeBrace      reduce using rule 47 (elseStatement -> .)

    elseStatement                  shift and go to state 139

state 137

    (38) subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine closeBrace . subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . matrix equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (42) subroutine -> . unaryExpression semicolon subroutine
    (43) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (44) subroutine -> .
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 58
    consoleRead     shift and go to state 59
    if              shift and go to state 61
    while           shift and go to state 62
    for             shift and go to state 63
    id              shift and go to state 60
    call            shift and go to state 66
    closeBrace      reduce using rule 44 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 142
    matrix                         shift and go to state 64
    unaryExpression                shift and go to state 65

state 138

    (39) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression . closeParenthesis openBrace subroutine closeBrace subroutine

    closeParenthesis shift and go to state 143


state 139

    (37) subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement . subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . matrix equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (42) subroutine -> . unaryExpression semicolon subroutine
    (43) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (44) subroutine -> .
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 58
    consoleRead     shift and go to state 59
    if              shift and go to state 61
    while           shift and go to state 62
    for             shift and go to state 63
    id              shift and go to state 60
    call            shift and go to state 66
    closeBrace      reduce using rule 44 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 144
    matrix                         shift and go to state 64
    unaryExpression                shift and go to state 65

state 140

    (45) elseStatement -> elif . openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement

    openParenthesis shift and go to state 145


state 141

    (46) elseStatement -> else . openBrace subroutine closeBrace

    openBrace       shift and go to state 146


state 142

    (38) subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine .

    closeBrace      reduce using rule 38 (subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine .)


state 143

    (39) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis . openBrace subroutine closeBrace subroutine

    openBrace       shift and go to state 147


state 144

    (37) subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine .

    closeBrace      reduce using rule 37 (subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine .)


state 145

    (45) elseStatement -> elif openParenthesis . statement closeParenthesis openBrace subroutine closeBrace elseStatement
    (48) statement -> . arithmeticExpression
    (49) statement -> . arithmeticExpression logicExpression arithmeticExpression
    (50) statement -> . statement logicExpression statement
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) arithmeticExpression -> . unaryExpression
    (27) value -> . intValue
    (28) value -> . doubleValue
    (29) value -> . id
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 25
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 22
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    statement                      shift and go to state 148
    arithmeticExpression           shift and go to state 95
    value                          shift and go to state 24
    unaryExpression                shift and go to state 26

state 146

    (46) elseStatement -> else openBrace . subroutine closeBrace
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . matrix equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (42) subroutine -> . unaryExpression semicolon subroutine
    (43) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (44) subroutine -> .
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 58
    consoleRead     shift and go to state 59
    if              shift and go to state 61
    while           shift and go to state 62
    for             shift and go to state 63
    id              shift and go to state 60
    call            shift and go to state 66
    closeBrace      reduce using rule 44 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 149
    matrix                         shift and go to state 64
    unaryExpression                shift and go to state 65

state 147

    (39) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace . subroutine closeBrace subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . matrix equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (42) subroutine -> . unaryExpression semicolon subroutine
    (43) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (44) subroutine -> .
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 58
    consoleRead     shift and go to state 59
    if              shift and go to state 61
    while           shift and go to state 62
    for             shift and go to state 63
    id              shift and go to state 60
    call            shift and go to state 66
    closeBrace      reduce using rule 44 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 150
    matrix                         shift and go to state 64
    unaryExpression                shift and go to state 65

state 148

    (45) elseStatement -> elif openParenthesis statement . closeParenthesis openBrace subroutine closeBrace elseStatement
    (50) statement -> statement . logicExpression statement
    (51) logicExpression -> . greaterThan
    (52) logicExpression -> . lessThan
    (53) logicExpression -> . isEqual
    (54) logicExpression -> . notEqual
    (55) logicExpression -> . greaterOrEqual
    (56) logicExpression -> . lessOrEqual
    (57) logicExpression -> . and
    (58) logicExpression -> . or

    closeParenthesis shift and go to state 151
    greaterThan     shift and go to state 107
    lessThan        shift and go to state 108
    isEqual         shift and go to state 109
    notEqual        shift and go to state 110
    greaterOrEqual  shift and go to state 111
    lessOrEqual     shift and go to state 112
    and             shift and go to state 113
    or              shift and go to state 114

    logicExpression                shift and go to state 106

state 149

    (46) elseStatement -> else openBrace subroutine . closeBrace

    closeBrace      shift and go to state 152


state 150

    (39) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine . closeBrace subroutine

    closeBrace      shift and go to state 153


state 151

    (45) elseStatement -> elif openParenthesis statement closeParenthesis . openBrace subroutine closeBrace elseStatement

    openBrace       shift and go to state 154


state 152

    (46) elseStatement -> else openBrace subroutine closeBrace .

    consoleWrite    reduce using rule 46 (elseStatement -> else openBrace subroutine closeBrace .)
    consoleRead     reduce using rule 46 (elseStatement -> else openBrace subroutine closeBrace .)
    if              reduce using rule 46 (elseStatement -> else openBrace subroutine closeBrace .)
    while           reduce using rule 46 (elseStatement -> else openBrace subroutine closeBrace .)
    for             reduce using rule 46 (elseStatement -> else openBrace subroutine closeBrace .)
    id              reduce using rule 46 (elseStatement -> else openBrace subroutine closeBrace .)
    call            reduce using rule 46 (elseStatement -> else openBrace subroutine closeBrace .)
    plusPlus        reduce using rule 46 (elseStatement -> else openBrace subroutine closeBrace .)
    minusMinus      reduce using rule 46 (elseStatement -> else openBrace subroutine closeBrace .)
    closeBrace      reduce using rule 46 (elseStatement -> else openBrace subroutine closeBrace .)


state 153

    (39) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace . subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . matrix equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (42) subroutine -> . unaryExpression semicolon subroutine
    (43) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (44) subroutine -> .
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 58
    consoleRead     shift and go to state 59
    if              shift and go to state 61
    while           shift and go to state 62
    for             shift and go to state 63
    id              shift and go to state 60
    call            shift and go to state 66
    closeBrace      reduce using rule 44 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 155
    matrix                         shift and go to state 64
    unaryExpression                shift and go to state 65

state 154

    (45) elseStatement -> elif openParenthesis statement closeParenthesis openBrace . subroutine closeBrace elseStatement
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . matrix equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (42) subroutine -> . unaryExpression semicolon subroutine
    (43) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (44) subroutine -> .
    (30) matrix -> . id openBracket value closeBracket
    (31) matrix -> . id openBracket value closeBracket openBracket value closeBracket
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 58
    consoleRead     shift and go to state 59
    if              shift and go to state 61
    while           shift and go to state 62
    for             shift and go to state 63
    id              shift and go to state 60
    call            shift and go to state 66
    closeBrace      reduce using rule 44 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 156
    matrix                         shift and go to state 64
    unaryExpression                shift and go to state 65

state 155

    (39) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine .

    closeBrace      reduce using rule 39 (subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine .)


state 156

    (45) elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine . closeBrace elseStatement

    closeBrace      shift and go to state 157


state 157

    (45) elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace . elseStatement
    (45) elseStatement -> . elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement
    (46) elseStatement -> . else openBrace subroutine closeBrace
    (47) elseStatement -> .

    elif            shift and go to state 140
    else            shift and go to state 141
    consoleWrite    reduce using rule 47 (elseStatement -> .)
    consoleRead     reduce using rule 47 (elseStatement -> .)
    if              reduce using rule 47 (elseStatement -> .)
    while           reduce using rule 47 (elseStatement -> .)
    for             reduce using rule 47 (elseStatement -> .)
    id              reduce using rule 47 (elseStatement -> .)
    call            reduce using rule 47 (elseStatement -> .)
    plusPlus        reduce using rule 47 (elseStatement -> .)
    minusMinus      reduce using rule 47 (elseStatement -> .)
    closeBrace      reduce using rule 47 (elseStatement -> .)

    elseStatement                  shift and go to state 158

state 158

    (45) elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .

    consoleWrite    reduce using rule 45 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    consoleRead     reduce using rule 45 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    if              reduce using rule 45 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    while           reduce using rule 45 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    for             reduce using rule 45 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    id              reduce using rule 45 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    call            reduce using rule 45 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    plusPlus        reduce using rule 45 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    minusMinus      reduce using rule 45 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    closeBrace      reduce using rule 45 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for greaterThan in state 95 resolved as shift
WARNING: shift/reduce conflict for lessThan in state 95 resolved as shift
WARNING: shift/reduce conflict for isEqual in state 95 resolved as shift
WARNING: shift/reduce conflict for notEqual in state 95 resolved as shift
WARNING: shift/reduce conflict for greaterOrEqual in state 95 resolved as shift
WARNING: shift/reduce conflict for lessOrEqual in state 95 resolved as shift
WARNING: shift/reduce conflict for and in state 95 resolved as shift
WARNING: shift/reduce conflict for or in state 95 resolved as shift
WARNING: shift/reduce conflict for greaterThan in state 124 resolved as shift
WARNING: shift/reduce conflict for lessThan in state 124 resolved as shift
WARNING: shift/reduce conflict for isEqual in state 124 resolved as shift
WARNING: shift/reduce conflict for notEqual in state 124 resolved as shift
WARNING: shift/reduce conflict for greaterOrEqual in state 124 resolved as shift
WARNING: shift/reduce conflict for lessOrEqual in state 124 resolved as shift
WARNING: shift/reduce conflict for and in state 124 resolved as shift
WARNING: shift/reduce conflict for or in state 124 resolved as shift
