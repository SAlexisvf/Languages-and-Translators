Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    not

Grammar

Rule 0     S' -> program
Rule 1     program -> var func mainProgram
Rule 2     var -> type varSequence semicolon var
Rule 3     var -> <empty>
Rule 4     varSequence -> variable equal arithmeticExpression
Rule 5     varSequence -> variable
Rule 6     varSequence -> variable equal arithmeticExpression comma varSequence
Rule 7     varSequence -> variable comma varSequence
Rule 8     variable -> id dimentions
Rule 9     dimentions -> openBracket value closeBracket
Rule 10    dimentions -> openBracket value closeBracket openBracket value closeBracket
Rule 11    dimentions -> <empty>
Rule 12    type -> int
Rule 13    type -> double
Rule 14    arithmeticExpression -> multiplyDivide
Rule 15    arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
Rule 16    arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
Rule 17    multiplyDivide -> val
Rule 18    multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
Rule 19    multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
Rule 20    val -> value
Rule 21    val -> unaryExpression
Rule 22    val -> openParenthesis arithmeticExpression closeParenthesis
Rule 23    unaryExpression -> id plusPlus
Rule 24    unaryExpression -> id minusMinus
Rule 25    unaryExpression -> plusPlus id
Rule 26    unaryExpression -> minusMinus id
Rule 27    value -> intValue ACTION_INT_VALUE
Rule 28    value -> doubleValue ACTION_DOUBLE_VALUE
Rule 29    value -> id ACTION_VAR_VALUE
Rule 30    func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace func
Rule 31    func -> <empty>
Rule 32    mainProgram -> main openParenthesis closeParenthesis openBrace subroutine closeBrace
Rule 33    subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
Rule 34    subroutine -> consoleRead openParenthesis id closeParenthesis semicolon subroutine
Rule 35    subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
Rule 36    subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
Rule 37    subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
Rule 38    subroutine -> id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
Rule 39    subroutine -> unaryExpression semicolon subroutine
Rule 40    subroutine -> call id openParenthesis closeParenthesis semicolon subroutine
Rule 41    subroutine -> <empty>
Rule 42    elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement
Rule 43    elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace
Rule 44    elseStatement -> ACTION_FILL_JUMP
Rule 45    statement -> arithmeticExpression
Rule 46    statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET
Rule 47    statement -> statement logicExpression statement
Rule 48    logicExpression -> greaterThan
Rule 49    logicExpression -> lessThan
Rule 50    logicExpression -> isEqual
Rule 51    logicExpression -> notEqual
Rule 52    logicExpression -> greaterOrEqual
Rule 53    logicExpression -> lessOrEqual
Rule 54    logicExpression -> and
Rule 55    logicExpression -> or
Rule 56    cout -> arithmeticExpression
Rule 57    cout -> string
Rule 58    ACTION_VAR_VALUE -> <empty>
Rule 59    ACTION_INT_VALUE -> <empty>
Rule 60    ACTION_DOUBLE_VALUE -> <empty>
Rule 61    ACTION_ADD_OPERATOR -> <empty>
Rule 62    ACTION_GENERATE_QUADRUPLET -> <empty>
Rule 63    ACTION_ADD_QUADRUPLET -> <empty>
Rule 64    ACTION_QUADRUPLET_EMPTY_JUMP -> <empty>
Rule 65    ACTION_NEW_IF -> <empty>
Rule 66    ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> <empty>
Rule 67    ACTION_FILL_JUMP_END_IF -> <empty>
Rule 68    ACTION_FILL_JUMP -> <empty>

Terminals, with rules where they appear

and                  : 54
call                 : 40
closeBrace           : 30 32 35 36 37 42 43
closeBracket         : 9 10 10
closeParenthesis     : 22 30 32 33 34 35 36 37 40 42
comma                : 6 7
consoleRead          : 34
consoleWrite         : 33
divide               : 19
double               : 13
doubleValue          : 28
elif                 : 42
else                 : 43
equal                : 4 6 38
error                : 
for                  : 37
function             : 30
greaterOrEqual       : 52
greaterThan          : 48
id                   : 8 23 24 25 26 29 30 34 38 40
if                   : 35
int                  : 12
intValue             : 27
isEqual              : 50
lessOrEqual          : 53
lessThan             : 49
main                 : 32
minus                : 16
minusMinus           : 24 26
multiply             : 18
not                  : 
notEqual             : 51
openBrace            : 30 32 35 36 37 42 43
openBracket          : 9 10 10
openParenthesis      : 22 30 32 33 34 35 36 37 40 42
or                   : 55
plus                 : 15
plusPlus             : 23 25
semicolon            : 2 33 34 37 37 38 39 40
string               : 57
while                : 36

Nonterminals, with rules where they appear

ACTION_ADD_OPERATOR  : 15 16 18 19 46
ACTION_ADD_QUADRUPLET : 15 16 18 19 46
ACTION_DOUBLE_VALUE  : 28
ACTION_FILL_JUMP     : 42 43 44
ACTION_FILL_JUMP_END_IF : 35
ACTION_GENERATE_QUADRUPLET : 38
ACTION_INT_VALUE     : 27
ACTION_NEW_IF        : 35
ACTION_QUADRUPLET_EMPTY_JUMP : 35 42
ACTION_QUADRUPLET_EMPTY_JUMP_END_IF : 35 42
ACTION_VAR_VALUE     : 29
arithmeticExpression : 4 6 15 16 22 37 38 45 46 46 56
cout                 : 33
dimentions           : 8
elseStatement        : 35 42
func                 : 1 30
logicExpression      : 46 47
mainProgram          : 1
multiplyDivide       : 14 15 16 18 19
program              : 0
statement            : 35 36 37 42 47 47
subroutine           : 30 32 33 34 35 35 36 36 37 37 38 39 40 42 43
type                 : 2
unaryExpression      : 21 39
val                  : 17 18 19
value                : 9 10 10 20
var                  : 1 2
varSequence          : 2 6 7 37
variable             : 4 5 6 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . var func mainProgram
    (2) var -> . type varSequence semicolon var
    (3) var -> .
    (12) type -> . int
    (13) type -> . double

    function        reduce using rule 3 (var -> .)
    main            reduce using rule 3 (var -> .)
    int             shift and go to state 4
    double          shift and go to state 5

    program                        shift and go to state 1
    var                            shift and go to state 2
    type                           shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> var . func mainProgram
    (30) func -> . function id openParenthesis closeParenthesis openBrace subroutine closeBrace func
    (31) func -> .

    function        shift and go to state 7
    main            reduce using rule 31 (func -> .)

    func                           shift and go to state 6

state 3

    (2) var -> type . varSequence semicolon var
    (4) varSequence -> . variable equal arithmeticExpression
    (5) varSequence -> . variable
    (6) varSequence -> . variable equal arithmeticExpression comma varSequence
    (7) varSequence -> . variable comma varSequence
    (8) variable -> . id dimentions

    id              shift and go to state 10

    varSequence                    shift and go to state 8
    variable                       shift and go to state 9

state 4

    (12) type -> int .

    id              reduce using rule 12 (type -> int .)


state 5

    (13) type -> double .

    id              reduce using rule 13 (type -> double .)


state 6

    (1) program -> var func . mainProgram
    (32) mainProgram -> . main openParenthesis closeParenthesis openBrace subroutine closeBrace

    main            shift and go to state 12

    mainProgram                    shift and go to state 11

state 7

    (30) func -> function . id openParenthesis closeParenthesis openBrace subroutine closeBrace func

    id              shift and go to state 13


state 8

    (2) var -> type varSequence . semicolon var

    semicolon       shift and go to state 14


state 9

    (4) varSequence -> variable . equal arithmeticExpression
    (5) varSequence -> variable .
    (6) varSequence -> variable . equal arithmeticExpression comma varSequence
    (7) varSequence -> variable . comma varSequence

    equal           shift and go to state 15
    semicolon       reduce using rule 5 (varSequence -> variable .)
    comma           shift and go to state 16


state 10

    (8) variable -> id . dimentions
    (9) dimentions -> . openBracket value closeBracket
    (10) dimentions -> . openBracket value closeBracket openBracket value closeBracket
    (11) dimentions -> .

    openBracket     shift and go to state 18
    equal           reduce using rule 11 (dimentions -> .)
    comma           reduce using rule 11 (dimentions -> .)
    semicolon       reduce using rule 11 (dimentions -> .)

    dimentions                     shift and go to state 17

state 11

    (1) program -> var func mainProgram .

    $end            reduce using rule 1 (program -> var func mainProgram .)


state 12

    (32) mainProgram -> main . openParenthesis closeParenthesis openBrace subroutine closeBrace

    openParenthesis shift and go to state 19


state 13

    (30) func -> function id . openParenthesis closeParenthesis openBrace subroutine closeBrace func

    openParenthesis shift and go to state 20


state 14

    (2) var -> type varSequence semicolon . var
    (2) var -> . type varSequence semicolon var
    (3) var -> .
    (12) type -> . int
    (13) type -> . double

    function        reduce using rule 3 (var -> .)
    main            reduce using rule 3 (var -> .)
    int             shift and go to state 4
    double          shift and go to state 5

    type                           shift and go to state 3
    var                            shift and go to state 21

state 15

    (4) varSequence -> variable equal . arithmeticExpression
    (6) varSequence -> variable equal . arithmeticExpression comma varSequence
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (27) value -> . intValue ACTION_INT_VALUE
    (28) value -> . doubleValue ACTION_DOUBLE_VALUE
    (29) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    arithmeticExpression           shift and go to state 22
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 16

    (7) varSequence -> variable comma . varSequence
    (4) varSequence -> . variable equal arithmeticExpression
    (5) varSequence -> . variable
    (6) varSequence -> . variable equal arithmeticExpression comma varSequence
    (7) varSequence -> . variable comma varSequence
    (8) variable -> . id dimentions

    id              shift and go to state 10

    variable                       shift and go to state 9
    varSequence                    shift and go to state 33

state 17

    (8) variable -> id dimentions .

    equal           reduce using rule 8 (variable -> id dimentions .)
    comma           reduce using rule 8 (variable -> id dimentions .)
    semicolon       reduce using rule 8 (variable -> id dimentions .)


state 18

    (9) dimentions -> openBracket . value closeBracket
    (10) dimentions -> openBracket . value closeBracket openBracket value closeBracket
    (27) value -> . intValue ACTION_INT_VALUE
    (28) value -> . doubleValue ACTION_DOUBLE_VALUE
    (29) value -> . id ACTION_VAR_VALUE

    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 35

    value                          shift and go to state 34

state 19

    (32) mainProgram -> main openParenthesis . closeParenthesis openBrace subroutine closeBrace

    closeParenthesis shift and go to state 36


state 20

    (30) func -> function id openParenthesis . closeParenthesis openBrace subroutine closeBrace func

    closeParenthesis shift and go to state 37


state 21

    (2) var -> type varSequence semicolon var .

    function        reduce using rule 2 (var -> type varSequence semicolon var .)
    main            reduce using rule 2 (var -> type varSequence semicolon var .)


state 22

    (4) varSequence -> variable equal arithmeticExpression .
    (6) varSequence -> variable equal arithmeticExpression . comma varSequence
    (15) arithmeticExpression -> arithmeticExpression . plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> arithmeticExpression . minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET

    semicolon       reduce using rule 4 (varSequence -> variable equal arithmeticExpression .)
    comma           shift and go to state 38
    plus            shift and go to state 39
    minus           shift and go to state 40


state 23

    (14) arithmeticExpression -> multiplyDivide .
    (18) multiplyDivide -> multiplyDivide . multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> multiplyDivide . divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET

    comma           reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    plus            reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    minus           reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    semicolon       reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    closeParenthesis reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    greaterThan     reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    lessThan        reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    isEqual         reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    notEqual        reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    greaterOrEqual  reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    lessOrEqual     reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    and             reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    or              reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    multiply        shift and go to state 41
    divide          shift and go to state 42


state 24

    (17) multiplyDivide -> val .

    multiply        reduce using rule 17 (multiplyDivide -> val .)
    divide          reduce using rule 17 (multiplyDivide -> val .)
    comma           reduce using rule 17 (multiplyDivide -> val .)
    plus            reduce using rule 17 (multiplyDivide -> val .)
    minus           reduce using rule 17 (multiplyDivide -> val .)
    semicolon       reduce using rule 17 (multiplyDivide -> val .)
    closeParenthesis reduce using rule 17 (multiplyDivide -> val .)
    greaterThan     reduce using rule 17 (multiplyDivide -> val .)
    lessThan        reduce using rule 17 (multiplyDivide -> val .)
    isEqual         reduce using rule 17 (multiplyDivide -> val .)
    notEqual        reduce using rule 17 (multiplyDivide -> val .)
    greaterOrEqual  reduce using rule 17 (multiplyDivide -> val .)
    lessOrEqual     reduce using rule 17 (multiplyDivide -> val .)
    and             reduce using rule 17 (multiplyDivide -> val .)
    or              reduce using rule 17 (multiplyDivide -> val .)


state 25

    (20) val -> value .

    multiply        reduce using rule 20 (val -> value .)
    divide          reduce using rule 20 (val -> value .)
    comma           reduce using rule 20 (val -> value .)
    plus            reduce using rule 20 (val -> value .)
    minus           reduce using rule 20 (val -> value .)
    semicolon       reduce using rule 20 (val -> value .)
    closeParenthesis reduce using rule 20 (val -> value .)
    greaterThan     reduce using rule 20 (val -> value .)
    lessThan        reduce using rule 20 (val -> value .)
    isEqual         reduce using rule 20 (val -> value .)
    notEqual        reduce using rule 20 (val -> value .)
    greaterOrEqual  reduce using rule 20 (val -> value .)
    lessOrEqual     reduce using rule 20 (val -> value .)
    and             reduce using rule 20 (val -> value .)
    or              reduce using rule 20 (val -> value .)


state 26

    (21) val -> unaryExpression .

    multiply        reduce using rule 21 (val -> unaryExpression .)
    divide          reduce using rule 21 (val -> unaryExpression .)
    comma           reduce using rule 21 (val -> unaryExpression .)
    plus            reduce using rule 21 (val -> unaryExpression .)
    minus           reduce using rule 21 (val -> unaryExpression .)
    semicolon       reduce using rule 21 (val -> unaryExpression .)
    closeParenthesis reduce using rule 21 (val -> unaryExpression .)
    greaterThan     reduce using rule 21 (val -> unaryExpression .)
    lessThan        reduce using rule 21 (val -> unaryExpression .)
    isEqual         reduce using rule 21 (val -> unaryExpression .)
    notEqual        reduce using rule 21 (val -> unaryExpression .)
    greaterOrEqual  reduce using rule 21 (val -> unaryExpression .)
    lessOrEqual     reduce using rule 21 (val -> unaryExpression .)
    and             reduce using rule 21 (val -> unaryExpression .)
    or              reduce using rule 21 (val -> unaryExpression .)


state 27

    (22) val -> openParenthesis . arithmeticExpression closeParenthesis
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (27) value -> . intValue ACTION_INT_VALUE
    (28) value -> . doubleValue ACTION_DOUBLE_VALUE
    (29) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    arithmeticExpression           shift and go to state 43
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 28

    (27) value -> intValue . ACTION_INT_VALUE
    (59) ACTION_INT_VALUE -> .

    multiply        reduce using rule 59 (ACTION_INT_VALUE -> .)
    divide          reduce using rule 59 (ACTION_INT_VALUE -> .)
    comma           reduce using rule 59 (ACTION_INT_VALUE -> .)
    plus            reduce using rule 59 (ACTION_INT_VALUE -> .)
    minus           reduce using rule 59 (ACTION_INT_VALUE -> .)
    semicolon       reduce using rule 59 (ACTION_INT_VALUE -> .)
    closeBracket    reduce using rule 59 (ACTION_INT_VALUE -> .)
    closeParenthesis reduce using rule 59 (ACTION_INT_VALUE -> .)
    greaterThan     reduce using rule 59 (ACTION_INT_VALUE -> .)
    lessThan        reduce using rule 59 (ACTION_INT_VALUE -> .)
    isEqual         reduce using rule 59 (ACTION_INT_VALUE -> .)
    notEqual        reduce using rule 59 (ACTION_INT_VALUE -> .)
    greaterOrEqual  reduce using rule 59 (ACTION_INT_VALUE -> .)
    lessOrEqual     reduce using rule 59 (ACTION_INT_VALUE -> .)
    and             reduce using rule 59 (ACTION_INT_VALUE -> .)
    or              reduce using rule 59 (ACTION_INT_VALUE -> .)

    ACTION_INT_VALUE               shift and go to state 44

state 29

    (28) value -> doubleValue . ACTION_DOUBLE_VALUE
    (60) ACTION_DOUBLE_VALUE -> .

    multiply        reduce using rule 60 (ACTION_DOUBLE_VALUE -> .)
    divide          reduce using rule 60 (ACTION_DOUBLE_VALUE -> .)
    comma           reduce using rule 60 (ACTION_DOUBLE_VALUE -> .)
    plus            reduce using rule 60 (ACTION_DOUBLE_VALUE -> .)
    minus           reduce using rule 60 (ACTION_DOUBLE_VALUE -> .)
    semicolon       reduce using rule 60 (ACTION_DOUBLE_VALUE -> .)
    closeBracket    reduce using rule 60 (ACTION_DOUBLE_VALUE -> .)
    closeParenthesis reduce using rule 60 (ACTION_DOUBLE_VALUE -> .)
    greaterThan     reduce using rule 60 (ACTION_DOUBLE_VALUE -> .)
    lessThan        reduce using rule 60 (ACTION_DOUBLE_VALUE -> .)
    isEqual         reduce using rule 60 (ACTION_DOUBLE_VALUE -> .)
    notEqual        reduce using rule 60 (ACTION_DOUBLE_VALUE -> .)
    greaterOrEqual  reduce using rule 60 (ACTION_DOUBLE_VALUE -> .)
    lessOrEqual     reduce using rule 60 (ACTION_DOUBLE_VALUE -> .)
    and             reduce using rule 60 (ACTION_DOUBLE_VALUE -> .)
    or              reduce using rule 60 (ACTION_DOUBLE_VALUE -> .)

    ACTION_DOUBLE_VALUE            shift and go to state 45

state 30

    (29) value -> id . ACTION_VAR_VALUE
    (23) unaryExpression -> id . plusPlus
    (24) unaryExpression -> id . minusMinus
    (58) ACTION_VAR_VALUE -> .

    plusPlus        shift and go to state 47
    minusMinus      shift and go to state 48
    multiply        reduce using rule 58 (ACTION_VAR_VALUE -> .)
    divide          reduce using rule 58 (ACTION_VAR_VALUE -> .)
    comma           reduce using rule 58 (ACTION_VAR_VALUE -> .)
    plus            reduce using rule 58 (ACTION_VAR_VALUE -> .)
    minus           reduce using rule 58 (ACTION_VAR_VALUE -> .)
    semicolon       reduce using rule 58 (ACTION_VAR_VALUE -> .)
    closeParenthesis reduce using rule 58 (ACTION_VAR_VALUE -> .)
    greaterThan     reduce using rule 58 (ACTION_VAR_VALUE -> .)
    lessThan        reduce using rule 58 (ACTION_VAR_VALUE -> .)
    isEqual         reduce using rule 58 (ACTION_VAR_VALUE -> .)
    notEqual        reduce using rule 58 (ACTION_VAR_VALUE -> .)
    greaterOrEqual  reduce using rule 58 (ACTION_VAR_VALUE -> .)
    lessOrEqual     reduce using rule 58 (ACTION_VAR_VALUE -> .)
    and             reduce using rule 58 (ACTION_VAR_VALUE -> .)
    or              reduce using rule 58 (ACTION_VAR_VALUE -> .)

    ACTION_VAR_VALUE               shift and go to state 46

state 31

    (25) unaryExpression -> plusPlus . id

    id              shift and go to state 49


state 32

    (26) unaryExpression -> minusMinus . id

    id              shift and go to state 50


state 33

    (7) varSequence -> variable comma varSequence .

    semicolon       reduce using rule 7 (varSequence -> variable comma varSequence .)


state 34

    (9) dimentions -> openBracket value . closeBracket
    (10) dimentions -> openBracket value . closeBracket openBracket value closeBracket

    closeBracket    shift and go to state 51


state 35

    (29) value -> id . ACTION_VAR_VALUE
    (58) ACTION_VAR_VALUE -> .

    closeBracket    reduce using rule 58 (ACTION_VAR_VALUE -> .)

    ACTION_VAR_VALUE               shift and go to state 46

state 36

    (32) mainProgram -> main openParenthesis closeParenthesis . openBrace subroutine closeBrace

    openBrace       shift and go to state 52


state 37

    (30) func -> function id openParenthesis closeParenthesis . openBrace subroutine closeBrace func

    openBrace       shift and go to state 53


state 38

    (6) varSequence -> variable equal arithmeticExpression comma . varSequence
    (4) varSequence -> . variable equal arithmeticExpression
    (5) varSequence -> . variable
    (6) varSequence -> . variable equal arithmeticExpression comma varSequence
    (7) varSequence -> . variable comma varSequence
    (8) variable -> . id dimentions

    id              shift and go to state 10

    variable                       shift and go to state 9
    varSequence                    shift and go to state 54

state 39

    (15) arithmeticExpression -> arithmeticExpression plus . ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (61) ACTION_ADD_OPERATOR -> .

    openParenthesis reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    intValue        reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    doubleValue     reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    plusPlus        reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    minusMinus      reduce using rule 61 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 55

state 40

    (16) arithmeticExpression -> arithmeticExpression minus . ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (61) ACTION_ADD_OPERATOR -> .

    openParenthesis reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    intValue        reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    doubleValue     reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    plusPlus        reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    minusMinus      reduce using rule 61 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 56

state 41

    (18) multiplyDivide -> multiplyDivide multiply . ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (61) ACTION_ADD_OPERATOR -> .

    openParenthesis reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    intValue        reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    doubleValue     reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    plusPlus        reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    minusMinus      reduce using rule 61 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 57

state 42

    (19) multiplyDivide -> multiplyDivide divide . ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (61) ACTION_ADD_OPERATOR -> .

    openParenthesis reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    intValue        reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    doubleValue     reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    plusPlus        reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    minusMinus      reduce using rule 61 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 58

state 43

    (22) val -> openParenthesis arithmeticExpression . closeParenthesis
    (15) arithmeticExpression -> arithmeticExpression . plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> arithmeticExpression . minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET

    closeParenthesis shift and go to state 59
    plus            shift and go to state 39
    minus           shift and go to state 40


state 44

    (27) value -> intValue ACTION_INT_VALUE .

    multiply        reduce using rule 27 (value -> intValue ACTION_INT_VALUE .)
    divide          reduce using rule 27 (value -> intValue ACTION_INT_VALUE .)
    comma           reduce using rule 27 (value -> intValue ACTION_INT_VALUE .)
    plus            reduce using rule 27 (value -> intValue ACTION_INT_VALUE .)
    minus           reduce using rule 27 (value -> intValue ACTION_INT_VALUE .)
    semicolon       reduce using rule 27 (value -> intValue ACTION_INT_VALUE .)
    closeBracket    reduce using rule 27 (value -> intValue ACTION_INT_VALUE .)
    closeParenthesis reduce using rule 27 (value -> intValue ACTION_INT_VALUE .)
    greaterThan     reduce using rule 27 (value -> intValue ACTION_INT_VALUE .)
    lessThan        reduce using rule 27 (value -> intValue ACTION_INT_VALUE .)
    isEqual         reduce using rule 27 (value -> intValue ACTION_INT_VALUE .)
    notEqual        reduce using rule 27 (value -> intValue ACTION_INT_VALUE .)
    greaterOrEqual  reduce using rule 27 (value -> intValue ACTION_INT_VALUE .)
    lessOrEqual     reduce using rule 27 (value -> intValue ACTION_INT_VALUE .)
    and             reduce using rule 27 (value -> intValue ACTION_INT_VALUE .)
    or              reduce using rule 27 (value -> intValue ACTION_INT_VALUE .)


state 45

    (28) value -> doubleValue ACTION_DOUBLE_VALUE .

    multiply        reduce using rule 28 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    divide          reduce using rule 28 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    comma           reduce using rule 28 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    plus            reduce using rule 28 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    minus           reduce using rule 28 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    semicolon       reduce using rule 28 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    closeBracket    reduce using rule 28 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    closeParenthesis reduce using rule 28 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    greaterThan     reduce using rule 28 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    lessThan        reduce using rule 28 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    isEqual         reduce using rule 28 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    notEqual        reduce using rule 28 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    greaterOrEqual  reduce using rule 28 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    lessOrEqual     reduce using rule 28 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    and             reduce using rule 28 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    or              reduce using rule 28 (value -> doubleValue ACTION_DOUBLE_VALUE .)


state 46

    (29) value -> id ACTION_VAR_VALUE .

    multiply        reduce using rule 29 (value -> id ACTION_VAR_VALUE .)
    divide          reduce using rule 29 (value -> id ACTION_VAR_VALUE .)
    comma           reduce using rule 29 (value -> id ACTION_VAR_VALUE .)
    plus            reduce using rule 29 (value -> id ACTION_VAR_VALUE .)
    minus           reduce using rule 29 (value -> id ACTION_VAR_VALUE .)
    semicolon       reduce using rule 29 (value -> id ACTION_VAR_VALUE .)
    closeBracket    reduce using rule 29 (value -> id ACTION_VAR_VALUE .)
    closeParenthesis reduce using rule 29 (value -> id ACTION_VAR_VALUE .)
    greaterThan     reduce using rule 29 (value -> id ACTION_VAR_VALUE .)
    lessThan        reduce using rule 29 (value -> id ACTION_VAR_VALUE .)
    isEqual         reduce using rule 29 (value -> id ACTION_VAR_VALUE .)
    notEqual        reduce using rule 29 (value -> id ACTION_VAR_VALUE .)
    greaterOrEqual  reduce using rule 29 (value -> id ACTION_VAR_VALUE .)
    lessOrEqual     reduce using rule 29 (value -> id ACTION_VAR_VALUE .)
    and             reduce using rule 29 (value -> id ACTION_VAR_VALUE .)
    or              reduce using rule 29 (value -> id ACTION_VAR_VALUE .)


state 47

    (23) unaryExpression -> id plusPlus .

    multiply        reduce using rule 23 (unaryExpression -> id plusPlus .)
    divide          reduce using rule 23 (unaryExpression -> id plusPlus .)
    comma           reduce using rule 23 (unaryExpression -> id plusPlus .)
    plus            reduce using rule 23 (unaryExpression -> id plusPlus .)
    minus           reduce using rule 23 (unaryExpression -> id plusPlus .)
    semicolon       reduce using rule 23 (unaryExpression -> id plusPlus .)
    closeParenthesis reduce using rule 23 (unaryExpression -> id plusPlus .)
    greaterThan     reduce using rule 23 (unaryExpression -> id plusPlus .)
    lessThan        reduce using rule 23 (unaryExpression -> id plusPlus .)
    isEqual         reduce using rule 23 (unaryExpression -> id plusPlus .)
    notEqual        reduce using rule 23 (unaryExpression -> id plusPlus .)
    greaterOrEqual  reduce using rule 23 (unaryExpression -> id plusPlus .)
    lessOrEqual     reduce using rule 23 (unaryExpression -> id plusPlus .)
    and             reduce using rule 23 (unaryExpression -> id plusPlus .)
    or              reduce using rule 23 (unaryExpression -> id plusPlus .)


state 48

    (24) unaryExpression -> id minusMinus .

    multiply        reduce using rule 24 (unaryExpression -> id minusMinus .)
    divide          reduce using rule 24 (unaryExpression -> id minusMinus .)
    comma           reduce using rule 24 (unaryExpression -> id minusMinus .)
    plus            reduce using rule 24 (unaryExpression -> id minusMinus .)
    minus           reduce using rule 24 (unaryExpression -> id minusMinus .)
    semicolon       reduce using rule 24 (unaryExpression -> id minusMinus .)
    closeParenthesis reduce using rule 24 (unaryExpression -> id minusMinus .)
    greaterThan     reduce using rule 24 (unaryExpression -> id minusMinus .)
    lessThan        reduce using rule 24 (unaryExpression -> id minusMinus .)
    isEqual         reduce using rule 24 (unaryExpression -> id minusMinus .)
    notEqual        reduce using rule 24 (unaryExpression -> id minusMinus .)
    greaterOrEqual  reduce using rule 24 (unaryExpression -> id minusMinus .)
    lessOrEqual     reduce using rule 24 (unaryExpression -> id minusMinus .)
    and             reduce using rule 24 (unaryExpression -> id minusMinus .)
    or              reduce using rule 24 (unaryExpression -> id minusMinus .)


state 49

    (25) unaryExpression -> plusPlus id .

    multiply        reduce using rule 25 (unaryExpression -> plusPlus id .)
    divide          reduce using rule 25 (unaryExpression -> plusPlus id .)
    comma           reduce using rule 25 (unaryExpression -> plusPlus id .)
    plus            reduce using rule 25 (unaryExpression -> plusPlus id .)
    minus           reduce using rule 25 (unaryExpression -> plusPlus id .)
    semicolon       reduce using rule 25 (unaryExpression -> plusPlus id .)
    closeParenthesis reduce using rule 25 (unaryExpression -> plusPlus id .)
    greaterThan     reduce using rule 25 (unaryExpression -> plusPlus id .)
    lessThan        reduce using rule 25 (unaryExpression -> plusPlus id .)
    isEqual         reduce using rule 25 (unaryExpression -> plusPlus id .)
    notEqual        reduce using rule 25 (unaryExpression -> plusPlus id .)
    greaterOrEqual  reduce using rule 25 (unaryExpression -> plusPlus id .)
    lessOrEqual     reduce using rule 25 (unaryExpression -> plusPlus id .)
    and             reduce using rule 25 (unaryExpression -> plusPlus id .)
    or              reduce using rule 25 (unaryExpression -> plusPlus id .)


state 50

    (26) unaryExpression -> minusMinus id .

    multiply        reduce using rule 26 (unaryExpression -> minusMinus id .)
    divide          reduce using rule 26 (unaryExpression -> minusMinus id .)
    comma           reduce using rule 26 (unaryExpression -> minusMinus id .)
    plus            reduce using rule 26 (unaryExpression -> minusMinus id .)
    minus           reduce using rule 26 (unaryExpression -> minusMinus id .)
    semicolon       reduce using rule 26 (unaryExpression -> minusMinus id .)
    closeParenthesis reduce using rule 26 (unaryExpression -> minusMinus id .)
    greaterThan     reduce using rule 26 (unaryExpression -> minusMinus id .)
    lessThan        reduce using rule 26 (unaryExpression -> minusMinus id .)
    isEqual         reduce using rule 26 (unaryExpression -> minusMinus id .)
    notEqual        reduce using rule 26 (unaryExpression -> minusMinus id .)
    greaterOrEqual  reduce using rule 26 (unaryExpression -> minusMinus id .)
    lessOrEqual     reduce using rule 26 (unaryExpression -> minusMinus id .)
    and             reduce using rule 26 (unaryExpression -> minusMinus id .)
    or              reduce using rule 26 (unaryExpression -> minusMinus id .)


state 51

    (9) dimentions -> openBracket value closeBracket .
    (10) dimentions -> openBracket value closeBracket . openBracket value closeBracket

    equal           reduce using rule 9 (dimentions -> openBracket value closeBracket .)
    comma           reduce using rule 9 (dimentions -> openBracket value closeBracket .)
    semicolon       reduce using rule 9 (dimentions -> openBracket value closeBracket .)
    openBracket     shift and go to state 60


state 52

    (32) mainProgram -> main openParenthesis closeParenthesis openBrace . subroutine closeBrace
    (33) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (34) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (35) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (36) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (38) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (39) subroutine -> . unaryExpression semicolon subroutine
    (40) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (41) subroutine -> .
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 62
    consoleRead     shift and go to state 63
    if              shift and go to state 65
    while           shift and go to state 66
    for             shift and go to state 67
    id              shift and go to state 64
    call            shift and go to state 69
    closeBrace      reduce using rule 41 (subroutine -> .)
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    subroutine                     shift and go to state 61
    unaryExpression                shift and go to state 68

state 53

    (30) func -> function id openParenthesis closeParenthesis openBrace . subroutine closeBrace func
    (33) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (34) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (35) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (36) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (38) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (39) subroutine -> . unaryExpression semicolon subroutine
    (40) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (41) subroutine -> .
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 62
    consoleRead     shift and go to state 63
    if              shift and go to state 65
    while           shift and go to state 66
    for             shift and go to state 67
    id              shift and go to state 64
    call            shift and go to state 69
    closeBrace      reduce using rule 41 (subroutine -> .)
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    subroutine                     shift and go to state 70
    unaryExpression                shift and go to state 68

state 54

    (6) varSequence -> variable equal arithmeticExpression comma varSequence .

    semicolon       reduce using rule 6 (varSequence -> variable equal arithmeticExpression comma varSequence .)


state 55

    (15) arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR . multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (27) value -> . intValue ACTION_INT_VALUE
    (28) value -> . doubleValue ACTION_DOUBLE_VALUE
    (29) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    multiplyDivide                 shift and go to state 71
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 56

    (16) arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR . multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (27) value -> . intValue ACTION_INT_VALUE
    (28) value -> . doubleValue ACTION_DOUBLE_VALUE
    (29) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    multiplyDivide                 shift and go to state 72
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 57

    (18) multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR . val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (27) value -> . intValue ACTION_INT_VALUE
    (28) value -> . doubleValue ACTION_DOUBLE_VALUE
    (29) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    val                            shift and go to state 73
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 58

    (19) multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR . val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (27) value -> . intValue ACTION_INT_VALUE
    (28) value -> . doubleValue ACTION_DOUBLE_VALUE
    (29) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    val                            shift and go to state 74
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 59

    (22) val -> openParenthesis arithmeticExpression closeParenthesis .

    multiply        reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    divide          reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    comma           reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    plus            reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    minus           reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    semicolon       reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    closeParenthesis reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    greaterThan     reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    lessThan        reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    isEqual         reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    notEqual        reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    greaterOrEqual  reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    lessOrEqual     reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    and             reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    or              reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)


state 60

    (10) dimentions -> openBracket value closeBracket openBracket . value closeBracket
    (27) value -> . intValue ACTION_INT_VALUE
    (28) value -> . doubleValue ACTION_DOUBLE_VALUE
    (29) value -> . id ACTION_VAR_VALUE

    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 35

    value                          shift and go to state 75

state 61

    (32) mainProgram -> main openParenthesis closeParenthesis openBrace subroutine . closeBrace

    closeBrace      shift and go to state 76


state 62

    (33) subroutine -> consoleWrite . openParenthesis cout closeParenthesis semicolon subroutine

    openParenthesis shift and go to state 77


state 63

    (34) subroutine -> consoleRead . openParenthesis id closeParenthesis semicolon subroutine

    openParenthesis shift and go to state 78


state 64

    (38) subroutine -> id . equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (23) unaryExpression -> id . plusPlus
    (24) unaryExpression -> id . minusMinus

    equal           shift and go to state 79
    plusPlus        shift and go to state 47
    minusMinus      shift and go to state 48


state 65

    (35) subroutine -> if . openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine

    openParenthesis shift and go to state 80


state 66

    (36) subroutine -> while . openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine

    openParenthesis shift and go to state 81


state 67

    (37) subroutine -> for . openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine

    openParenthesis shift and go to state 82


state 68

    (39) subroutine -> unaryExpression . semicolon subroutine

    semicolon       shift and go to state 83


state 69

    (40) subroutine -> call . id openParenthesis closeParenthesis semicolon subroutine

    id              shift and go to state 84


state 70

    (30) func -> function id openParenthesis closeParenthesis openBrace subroutine . closeBrace func

    closeBrace      shift and go to state 85


state 71

    (15) arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide . ACTION_ADD_QUADRUPLET
    (18) multiplyDivide -> multiplyDivide . multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> multiplyDivide . divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (63) ACTION_ADD_QUADRUPLET -> .

    multiply        shift and go to state 41
    divide          shift and go to state 42
    comma           reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    plus            reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    minus           reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    semicolon       reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    closeParenthesis reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    greaterThan     reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    lessThan        reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    isEqual         reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    notEqual        reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    greaterOrEqual  reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    lessOrEqual     reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    and             reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    or              reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)

    ACTION_ADD_QUADRUPLET          shift and go to state 86

state 72

    (16) arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide . ACTION_ADD_QUADRUPLET
    (18) multiplyDivide -> multiplyDivide . multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> multiplyDivide . divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (63) ACTION_ADD_QUADRUPLET -> .

    multiply        shift and go to state 41
    divide          shift and go to state 42
    comma           reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    plus            reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    minus           reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    semicolon       reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    closeParenthesis reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    greaterThan     reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    lessThan        reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    isEqual         reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    notEqual        reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    greaterOrEqual  reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    lessOrEqual     reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    and             reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    or              reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)

    ACTION_ADD_QUADRUPLET          shift and go to state 87

state 73

    (18) multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val . ACTION_ADD_QUADRUPLET
    (63) ACTION_ADD_QUADRUPLET -> .

    multiply        reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    divide          reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    comma           reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    plus            reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    minus           reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    semicolon       reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    closeParenthesis reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    greaterThan     reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    lessThan        reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    isEqual         reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    notEqual        reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    greaterOrEqual  reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    lessOrEqual     reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    and             reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    or              reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)

    ACTION_ADD_QUADRUPLET          shift and go to state 88

state 74

    (19) multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val . ACTION_ADD_QUADRUPLET
    (63) ACTION_ADD_QUADRUPLET -> .

    multiply        reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    divide          reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    comma           reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    plus            reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    minus           reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    semicolon       reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    closeParenthesis reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    greaterThan     reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    lessThan        reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    isEqual         reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    notEqual        reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    greaterOrEqual  reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    lessOrEqual     reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    and             reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    or              reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)

    ACTION_ADD_QUADRUPLET          shift and go to state 89

state 75

    (10) dimentions -> openBracket value closeBracket openBracket value . closeBracket

    closeBracket    shift and go to state 90


state 76

    (32) mainProgram -> main openParenthesis closeParenthesis openBrace subroutine closeBrace .

    $end            reduce using rule 32 (mainProgram -> main openParenthesis closeParenthesis openBrace subroutine closeBrace .)


state 77

    (33) subroutine -> consoleWrite openParenthesis . cout closeParenthesis semicolon subroutine
    (56) cout -> . arithmeticExpression
    (57) cout -> . string
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (27) value -> . intValue ACTION_INT_VALUE
    (28) value -> . doubleValue ACTION_DOUBLE_VALUE
    (29) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    string          shift and go to state 93
    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    cout                           shift and go to state 91
    arithmeticExpression           shift and go to state 92
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 78

    (34) subroutine -> consoleRead openParenthesis . id closeParenthesis semicolon subroutine

    id              shift and go to state 94


state 79

    (38) subroutine -> id equal . arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (27) value -> . intValue ACTION_INT_VALUE
    (28) value -> . doubleValue ACTION_DOUBLE_VALUE
    (29) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    arithmeticExpression           shift and go to state 95
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 80

    (35) subroutine -> if openParenthesis . statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (45) statement -> . arithmeticExpression
    (46) statement -> . arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET
    (47) statement -> . statement logicExpression statement
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (27) value -> . intValue ACTION_INT_VALUE
    (28) value -> . doubleValue ACTION_DOUBLE_VALUE
    (29) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    statement                      shift and go to state 96
    arithmeticExpression           shift and go to state 97
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 81

    (36) subroutine -> while openParenthesis . statement closeParenthesis openBrace subroutine closeBrace subroutine
    (45) statement -> . arithmeticExpression
    (46) statement -> . arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET
    (47) statement -> . statement logicExpression statement
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (27) value -> . intValue ACTION_INT_VALUE
    (28) value -> . doubleValue ACTION_DOUBLE_VALUE
    (29) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    statement                      shift and go to state 98
    arithmeticExpression           shift and go to state 97
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 82

    (37) subroutine -> for openParenthesis . varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (4) varSequence -> . variable equal arithmeticExpression
    (5) varSequence -> . variable
    (6) varSequence -> . variable equal arithmeticExpression comma varSequence
    (7) varSequence -> . variable comma varSequence
    (8) variable -> . id dimentions

    id              shift and go to state 10

    varSequence                    shift and go to state 99
    variable                       shift and go to state 9

state 83

    (39) subroutine -> unaryExpression semicolon . subroutine
    (33) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (34) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (35) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (36) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (38) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (39) subroutine -> . unaryExpression semicolon subroutine
    (40) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (41) subroutine -> .
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 62
    consoleRead     shift and go to state 63
    if              shift and go to state 65
    while           shift and go to state 66
    for             shift and go to state 67
    id              shift and go to state 64
    call            shift and go to state 69
    closeBrace      reduce using rule 41 (subroutine -> .)
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    unaryExpression                shift and go to state 68
    subroutine                     shift and go to state 100

state 84

    (40) subroutine -> call id . openParenthesis closeParenthesis semicolon subroutine

    openParenthesis shift and go to state 101


state 85

    (30) func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace . func
    (30) func -> . function id openParenthesis closeParenthesis openBrace subroutine closeBrace func
    (31) func -> .

    function        shift and go to state 7
    main            reduce using rule 31 (func -> .)

    func                           shift and go to state 102

state 86

    (15) arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .

    comma           reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    plus            reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    minus           reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    semicolon       reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    closeParenthesis reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    greaterThan     reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    lessThan        reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    isEqual         reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    notEqual        reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    greaterOrEqual  reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    lessOrEqual     reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)


state 87

    (16) arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .

    comma           reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    plus            reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    minus           reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    semicolon       reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    closeParenthesis reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    greaterThan     reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    lessThan        reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    isEqual         reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    notEqual        reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    greaterOrEqual  reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    lessOrEqual     reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)


state 88

    (18) multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .

    multiply        reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    divide          reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    comma           reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    plus            reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    minus           reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    semicolon       reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    closeParenthesis reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    greaterThan     reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    lessThan        reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    isEqual         reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    notEqual        reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    greaterOrEqual  reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    lessOrEqual     reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)


state 89

    (19) multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .

    multiply        reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    divide          reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    comma           reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    plus            reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    minus           reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    semicolon       reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    closeParenthesis reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    greaterThan     reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    lessThan        reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    isEqual         reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    notEqual        reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    greaterOrEqual  reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    lessOrEqual     reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)


state 90

    (10) dimentions -> openBracket value closeBracket openBracket value closeBracket .

    equal           reduce using rule 10 (dimentions -> openBracket value closeBracket openBracket value closeBracket .)
    comma           reduce using rule 10 (dimentions -> openBracket value closeBracket openBracket value closeBracket .)
    semicolon       reduce using rule 10 (dimentions -> openBracket value closeBracket openBracket value closeBracket .)


state 91

    (33) subroutine -> consoleWrite openParenthesis cout . closeParenthesis semicolon subroutine

    closeParenthesis shift and go to state 103


state 92

    (56) cout -> arithmeticExpression .
    (15) arithmeticExpression -> arithmeticExpression . plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> arithmeticExpression . minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET

    closeParenthesis reduce using rule 56 (cout -> arithmeticExpression .)
    plus            shift and go to state 39
    minus           shift and go to state 40


state 93

    (57) cout -> string .

    closeParenthesis reduce using rule 57 (cout -> string .)


state 94

    (34) subroutine -> consoleRead openParenthesis id . closeParenthesis semicolon subroutine

    closeParenthesis shift and go to state 104


state 95

    (38) subroutine -> id equal arithmeticExpression . ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (15) arithmeticExpression -> arithmeticExpression . plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> arithmeticExpression . minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (62) ACTION_GENERATE_QUADRUPLET -> .

    plus            shift and go to state 39
    minus           shift and go to state 40
    semicolon       reduce using rule 62 (ACTION_GENERATE_QUADRUPLET -> .)

    ACTION_GENERATE_QUADRUPLET     shift and go to state 105

state 96

    (35) subroutine -> if openParenthesis statement . closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (47) statement -> statement . logicExpression statement
    (48) logicExpression -> . greaterThan
    (49) logicExpression -> . lessThan
    (50) logicExpression -> . isEqual
    (51) logicExpression -> . notEqual
    (52) logicExpression -> . greaterOrEqual
    (53) logicExpression -> . lessOrEqual
    (54) logicExpression -> . and
    (55) logicExpression -> . or

    closeParenthesis shift and go to state 106
    greaterThan     shift and go to state 108
    lessThan        shift and go to state 109
    isEqual         shift and go to state 110
    notEqual        shift and go to state 111
    greaterOrEqual  shift and go to state 112
    lessOrEqual     shift and go to state 113
    and             shift and go to state 114
    or              shift and go to state 115

    logicExpression                shift and go to state 107

state 97

    (45) statement -> arithmeticExpression .
    (46) statement -> arithmeticExpression . logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET
    (15) arithmeticExpression -> arithmeticExpression . plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> arithmeticExpression . minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (48) logicExpression -> . greaterThan
    (49) logicExpression -> . lessThan
    (50) logicExpression -> . isEqual
    (51) logicExpression -> . notEqual
    (52) logicExpression -> . greaterOrEqual
    (53) logicExpression -> . lessOrEqual
    (54) logicExpression -> . and
    (55) logicExpression -> . or

  ! shift/reduce conflict for greaterThan resolved as shift
  ! shift/reduce conflict for lessThan resolved as shift
  ! shift/reduce conflict for isEqual resolved as shift
  ! shift/reduce conflict for notEqual resolved as shift
  ! shift/reduce conflict for greaterOrEqual resolved as shift
  ! shift/reduce conflict for lessOrEqual resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    closeParenthesis reduce using rule 45 (statement -> arithmeticExpression .)
    semicolon       reduce using rule 45 (statement -> arithmeticExpression .)
    plus            shift and go to state 39
    minus           shift and go to state 40
    greaterThan     shift and go to state 108
    lessThan        shift and go to state 109
    isEqual         shift and go to state 110
    notEqual        shift and go to state 111
    greaterOrEqual  shift and go to state 112
    lessOrEqual     shift and go to state 113
    and             shift and go to state 114
    or              shift and go to state 115

  ! greaterThan     [ reduce using rule 45 (statement -> arithmeticExpression .) ]
  ! lessThan        [ reduce using rule 45 (statement -> arithmeticExpression .) ]
  ! isEqual         [ reduce using rule 45 (statement -> arithmeticExpression .) ]
  ! notEqual        [ reduce using rule 45 (statement -> arithmeticExpression .) ]
  ! greaterOrEqual  [ reduce using rule 45 (statement -> arithmeticExpression .) ]
  ! lessOrEqual     [ reduce using rule 45 (statement -> arithmeticExpression .) ]
  ! and             [ reduce using rule 45 (statement -> arithmeticExpression .) ]
  ! or              [ reduce using rule 45 (statement -> arithmeticExpression .) ]

    logicExpression                shift and go to state 116

state 98

    (36) subroutine -> while openParenthesis statement . closeParenthesis openBrace subroutine closeBrace subroutine
    (47) statement -> statement . logicExpression statement
    (48) logicExpression -> . greaterThan
    (49) logicExpression -> . lessThan
    (50) logicExpression -> . isEqual
    (51) logicExpression -> . notEqual
    (52) logicExpression -> . greaterOrEqual
    (53) logicExpression -> . lessOrEqual
    (54) logicExpression -> . and
    (55) logicExpression -> . or

    closeParenthesis shift and go to state 117
    greaterThan     shift and go to state 108
    lessThan        shift and go to state 109
    isEqual         shift and go to state 110
    notEqual        shift and go to state 111
    greaterOrEqual  shift and go to state 112
    lessOrEqual     shift and go to state 113
    and             shift and go to state 114
    or              shift and go to state 115

    logicExpression                shift and go to state 107

state 99

    (37) subroutine -> for openParenthesis varSequence . semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine

    semicolon       shift and go to state 118


state 100

    (39) subroutine -> unaryExpression semicolon subroutine .

    closeBrace      reduce using rule 39 (subroutine -> unaryExpression semicolon subroutine .)


state 101

    (40) subroutine -> call id openParenthesis . closeParenthesis semicolon subroutine

    closeParenthesis shift and go to state 119


state 102

    (30) func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace func .

    main            reduce using rule 30 (func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace func .)


state 103

    (33) subroutine -> consoleWrite openParenthesis cout closeParenthesis . semicolon subroutine

    semicolon       shift and go to state 120


state 104

    (34) subroutine -> consoleRead openParenthesis id closeParenthesis . semicolon subroutine

    semicolon       shift and go to state 121


state 105

    (38) subroutine -> id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET . semicolon subroutine

    semicolon       shift and go to state 122


state 106

    (35) subroutine -> if openParenthesis statement closeParenthesis . ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (64) ACTION_QUADRUPLET_EMPTY_JUMP -> .

    openBrace       reduce using rule 64 (ACTION_QUADRUPLET_EMPTY_JUMP -> .)

    ACTION_QUADRUPLET_EMPTY_JUMP   shift and go to state 123

state 107

    (47) statement -> statement logicExpression . statement
    (45) statement -> . arithmeticExpression
    (46) statement -> . arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET
    (47) statement -> . statement logicExpression statement
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (27) value -> . intValue ACTION_INT_VALUE
    (28) value -> . doubleValue ACTION_DOUBLE_VALUE
    (29) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    statement                      shift and go to state 124
    arithmeticExpression           shift and go to state 97
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 108

    (48) logicExpression -> greaterThan .

    openParenthesis reduce using rule 48 (logicExpression -> greaterThan .)
    intValue        reduce using rule 48 (logicExpression -> greaterThan .)
    doubleValue     reduce using rule 48 (logicExpression -> greaterThan .)
    id              reduce using rule 48 (logicExpression -> greaterThan .)
    plusPlus        reduce using rule 48 (logicExpression -> greaterThan .)
    minusMinus      reduce using rule 48 (logicExpression -> greaterThan .)


state 109

    (49) logicExpression -> lessThan .

    openParenthesis reduce using rule 49 (logicExpression -> lessThan .)
    intValue        reduce using rule 49 (logicExpression -> lessThan .)
    doubleValue     reduce using rule 49 (logicExpression -> lessThan .)
    id              reduce using rule 49 (logicExpression -> lessThan .)
    plusPlus        reduce using rule 49 (logicExpression -> lessThan .)
    minusMinus      reduce using rule 49 (logicExpression -> lessThan .)


state 110

    (50) logicExpression -> isEqual .

    openParenthesis reduce using rule 50 (logicExpression -> isEqual .)
    intValue        reduce using rule 50 (logicExpression -> isEqual .)
    doubleValue     reduce using rule 50 (logicExpression -> isEqual .)
    id              reduce using rule 50 (logicExpression -> isEqual .)
    plusPlus        reduce using rule 50 (logicExpression -> isEqual .)
    minusMinus      reduce using rule 50 (logicExpression -> isEqual .)


state 111

    (51) logicExpression -> notEqual .

    openParenthesis reduce using rule 51 (logicExpression -> notEqual .)
    intValue        reduce using rule 51 (logicExpression -> notEqual .)
    doubleValue     reduce using rule 51 (logicExpression -> notEqual .)
    id              reduce using rule 51 (logicExpression -> notEqual .)
    plusPlus        reduce using rule 51 (logicExpression -> notEqual .)
    minusMinus      reduce using rule 51 (logicExpression -> notEqual .)


state 112

    (52) logicExpression -> greaterOrEqual .

    openParenthesis reduce using rule 52 (logicExpression -> greaterOrEqual .)
    intValue        reduce using rule 52 (logicExpression -> greaterOrEqual .)
    doubleValue     reduce using rule 52 (logicExpression -> greaterOrEqual .)
    id              reduce using rule 52 (logicExpression -> greaterOrEqual .)
    plusPlus        reduce using rule 52 (logicExpression -> greaterOrEqual .)
    minusMinus      reduce using rule 52 (logicExpression -> greaterOrEqual .)


state 113

    (53) logicExpression -> lessOrEqual .

    openParenthesis reduce using rule 53 (logicExpression -> lessOrEqual .)
    intValue        reduce using rule 53 (logicExpression -> lessOrEqual .)
    doubleValue     reduce using rule 53 (logicExpression -> lessOrEqual .)
    id              reduce using rule 53 (logicExpression -> lessOrEqual .)
    plusPlus        reduce using rule 53 (logicExpression -> lessOrEqual .)
    minusMinus      reduce using rule 53 (logicExpression -> lessOrEqual .)


state 114

    (54) logicExpression -> and .

    openParenthesis reduce using rule 54 (logicExpression -> and .)
    intValue        reduce using rule 54 (logicExpression -> and .)
    doubleValue     reduce using rule 54 (logicExpression -> and .)
    id              reduce using rule 54 (logicExpression -> and .)
    plusPlus        reduce using rule 54 (logicExpression -> and .)
    minusMinus      reduce using rule 54 (logicExpression -> and .)


state 115

    (55) logicExpression -> or .

    openParenthesis reduce using rule 55 (logicExpression -> or .)
    intValue        reduce using rule 55 (logicExpression -> or .)
    doubleValue     reduce using rule 55 (logicExpression -> or .)
    id              reduce using rule 55 (logicExpression -> or .)
    plusPlus        reduce using rule 55 (logicExpression -> or .)
    minusMinus      reduce using rule 55 (logicExpression -> or .)


state 116

    (46) statement -> arithmeticExpression logicExpression . ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET
    (61) ACTION_ADD_OPERATOR -> .

    openParenthesis reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    intValue        reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    doubleValue     reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    plusPlus        reduce using rule 61 (ACTION_ADD_OPERATOR -> .)
    minusMinus      reduce using rule 61 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 125

state 117

    (36) subroutine -> while openParenthesis statement closeParenthesis . openBrace subroutine closeBrace subroutine

    openBrace       shift and go to state 126


state 118

    (37) subroutine -> for openParenthesis varSequence semicolon . statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (45) statement -> . arithmeticExpression
    (46) statement -> . arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET
    (47) statement -> . statement logicExpression statement
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (27) value -> . intValue ACTION_INT_VALUE
    (28) value -> . doubleValue ACTION_DOUBLE_VALUE
    (29) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    statement                      shift and go to state 127
    arithmeticExpression           shift and go to state 97
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 119

    (40) subroutine -> call id openParenthesis closeParenthesis . semicolon subroutine

    semicolon       shift and go to state 128


state 120

    (33) subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon . subroutine
    (33) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (34) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (35) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (36) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (38) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (39) subroutine -> . unaryExpression semicolon subroutine
    (40) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (41) subroutine -> .
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 62
    consoleRead     shift and go to state 63
    if              shift and go to state 65
    while           shift and go to state 66
    for             shift and go to state 67
    id              shift and go to state 64
    call            shift and go to state 69
    closeBrace      reduce using rule 41 (subroutine -> .)
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    subroutine                     shift and go to state 129
    unaryExpression                shift and go to state 68

state 121

    (34) subroutine -> consoleRead openParenthesis id closeParenthesis semicolon . subroutine
    (33) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (34) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (35) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (36) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (38) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (39) subroutine -> . unaryExpression semicolon subroutine
    (40) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (41) subroutine -> .
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 62
    consoleRead     shift and go to state 63
    if              shift and go to state 65
    while           shift and go to state 66
    for             shift and go to state 67
    id              shift and go to state 64
    call            shift and go to state 69
    closeBrace      reduce using rule 41 (subroutine -> .)
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    subroutine                     shift and go to state 130
    unaryExpression                shift and go to state 68

state 122

    (38) subroutine -> id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon . subroutine
    (33) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (34) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (35) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (36) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (38) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (39) subroutine -> . unaryExpression semicolon subroutine
    (40) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (41) subroutine -> .
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 62
    consoleRead     shift and go to state 63
    if              shift and go to state 65
    while           shift and go to state 66
    for             shift and go to state 67
    id              shift and go to state 64
    call            shift and go to state 69
    closeBrace      reduce using rule 41 (subroutine -> .)
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    subroutine                     shift and go to state 131
    unaryExpression                shift and go to state 68

state 123

    (35) subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP . openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine

    openBrace       shift and go to state 132


state 124

    (47) statement -> statement logicExpression statement .
    (47) statement -> statement . logicExpression statement
    (48) logicExpression -> . greaterThan
    (49) logicExpression -> . lessThan
    (50) logicExpression -> . isEqual
    (51) logicExpression -> . notEqual
    (52) logicExpression -> . greaterOrEqual
    (53) logicExpression -> . lessOrEqual
    (54) logicExpression -> . and
    (55) logicExpression -> . or

  ! shift/reduce conflict for greaterThan resolved as shift
  ! shift/reduce conflict for lessThan resolved as shift
  ! shift/reduce conflict for isEqual resolved as shift
  ! shift/reduce conflict for notEqual resolved as shift
  ! shift/reduce conflict for greaterOrEqual resolved as shift
  ! shift/reduce conflict for lessOrEqual resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    closeParenthesis reduce using rule 47 (statement -> statement logicExpression statement .)
    semicolon       reduce using rule 47 (statement -> statement logicExpression statement .)
    greaterThan     shift and go to state 108
    lessThan        shift and go to state 109
    isEqual         shift and go to state 110
    notEqual        shift and go to state 111
    greaterOrEqual  shift and go to state 112
    lessOrEqual     shift and go to state 113
    and             shift and go to state 114
    or              shift and go to state 115

  ! greaterThan     [ reduce using rule 47 (statement -> statement logicExpression statement .) ]
  ! lessThan        [ reduce using rule 47 (statement -> statement logicExpression statement .) ]
  ! isEqual         [ reduce using rule 47 (statement -> statement logicExpression statement .) ]
  ! notEqual        [ reduce using rule 47 (statement -> statement logicExpression statement .) ]
  ! greaterOrEqual  [ reduce using rule 47 (statement -> statement logicExpression statement .) ]
  ! lessOrEqual     [ reduce using rule 47 (statement -> statement logicExpression statement .) ]
  ! and             [ reduce using rule 47 (statement -> statement logicExpression statement .) ]
  ! or              [ reduce using rule 47 (statement -> statement logicExpression statement .) ]

    logicExpression                shift and go to state 107

state 125

    (46) statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR . arithmeticExpression ACTION_ADD_QUADRUPLET
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (27) value -> . intValue ACTION_INT_VALUE
    (28) value -> . doubleValue ACTION_DOUBLE_VALUE
    (29) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    arithmeticExpression           shift and go to state 133
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 126

    (36) subroutine -> while openParenthesis statement closeParenthesis openBrace . subroutine closeBrace subroutine
    (33) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (34) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (35) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (36) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (38) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (39) subroutine -> . unaryExpression semicolon subroutine
    (40) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (41) subroutine -> .
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 62
    consoleRead     shift and go to state 63
    if              shift and go to state 65
    while           shift and go to state 66
    for             shift and go to state 67
    id              shift and go to state 64
    call            shift and go to state 69
    closeBrace      reduce using rule 41 (subroutine -> .)
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    subroutine                     shift and go to state 134
    unaryExpression                shift and go to state 68

state 127

    (37) subroutine -> for openParenthesis varSequence semicolon statement . semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (47) statement -> statement . logicExpression statement
    (48) logicExpression -> . greaterThan
    (49) logicExpression -> . lessThan
    (50) logicExpression -> . isEqual
    (51) logicExpression -> . notEqual
    (52) logicExpression -> . greaterOrEqual
    (53) logicExpression -> . lessOrEqual
    (54) logicExpression -> . and
    (55) logicExpression -> . or

    semicolon       shift and go to state 135
    greaterThan     shift and go to state 108
    lessThan        shift and go to state 109
    isEqual         shift and go to state 110
    notEqual        shift and go to state 111
    greaterOrEqual  shift and go to state 112
    lessOrEqual     shift and go to state 113
    and             shift and go to state 114
    or              shift and go to state 115

    logicExpression                shift and go to state 107

state 128

    (40) subroutine -> call id openParenthesis closeParenthesis semicolon . subroutine
    (33) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (34) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (35) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (36) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (38) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (39) subroutine -> . unaryExpression semicolon subroutine
    (40) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (41) subroutine -> .
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 62
    consoleRead     shift and go to state 63
    if              shift and go to state 65
    while           shift and go to state 66
    for             shift and go to state 67
    id              shift and go to state 64
    call            shift and go to state 69
    closeBrace      reduce using rule 41 (subroutine -> .)
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    subroutine                     shift and go to state 136
    unaryExpression                shift and go to state 68

state 129

    (33) subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon subroutine .

    closeBrace      reduce using rule 33 (subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon subroutine .)


state 130

    (34) subroutine -> consoleRead openParenthesis id closeParenthesis semicolon subroutine .

    closeBrace      reduce using rule 34 (subroutine -> consoleRead openParenthesis id closeParenthesis semicolon subroutine .)


state 131

    (38) subroutine -> id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine .

    closeBrace      reduce using rule 38 (subroutine -> id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine .)


state 132

    (35) subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace . subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (33) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (34) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (35) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (36) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (38) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (39) subroutine -> . unaryExpression semicolon subroutine
    (40) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (41) subroutine -> .
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 62
    consoleRead     shift and go to state 63
    if              shift and go to state 65
    while           shift and go to state 66
    for             shift and go to state 67
    id              shift and go to state 64
    call            shift and go to state 69
    closeBrace      reduce using rule 41 (subroutine -> .)
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    subroutine                     shift and go to state 137
    unaryExpression                shift and go to state 68

state 133

    (46) statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression . ACTION_ADD_QUADRUPLET
    (15) arithmeticExpression -> arithmeticExpression . plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> arithmeticExpression . minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (63) ACTION_ADD_QUADRUPLET -> .

    plus            shift and go to state 39
    minus           shift and go to state 40
    closeParenthesis reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    greaterThan     reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    lessThan        reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    isEqual         reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    notEqual        reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    greaterOrEqual  reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    lessOrEqual     reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    and             reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    or              reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)
    semicolon       reduce using rule 63 (ACTION_ADD_QUADRUPLET -> .)

    ACTION_ADD_QUADRUPLET          shift and go to state 138

state 134

    (36) subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine . closeBrace subroutine

    closeBrace      shift and go to state 139


state 135

    (37) subroutine -> for openParenthesis varSequence semicolon statement semicolon . arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (27) value -> . intValue ACTION_INT_VALUE
    (28) value -> . doubleValue ACTION_DOUBLE_VALUE
    (29) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    arithmeticExpression           shift and go to state 140
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 136

    (40) subroutine -> call id openParenthesis closeParenthesis semicolon subroutine .

    closeBrace      reduce using rule 40 (subroutine -> call id openParenthesis closeParenthesis semicolon subroutine .)


state 137

    (35) subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine . closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine

    closeBrace      shift and go to state 141


state 138

    (46) statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .

    closeParenthesis reduce using rule 46 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)
    greaterThan     reduce using rule 46 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)
    lessThan        reduce using rule 46 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)
    isEqual         reduce using rule 46 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)
    notEqual        reduce using rule 46 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)
    greaterOrEqual  reduce using rule 46 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)
    lessOrEqual     reduce using rule 46 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 46 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 46 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)
    semicolon       reduce using rule 46 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)


state 139

    (36) subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine closeBrace . subroutine
    (33) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (34) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (35) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (36) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (38) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (39) subroutine -> . unaryExpression semicolon subroutine
    (40) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (41) subroutine -> .
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 62
    consoleRead     shift and go to state 63
    if              shift and go to state 65
    while           shift and go to state 66
    for             shift and go to state 67
    id              shift and go to state 64
    call            shift and go to state 69
    closeBrace      reduce using rule 41 (subroutine -> .)
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    subroutine                     shift and go to state 142
    unaryExpression                shift and go to state 68

state 140

    (37) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression . closeParenthesis openBrace subroutine closeBrace subroutine
    (15) arithmeticExpression -> arithmeticExpression . plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> arithmeticExpression . minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET

    closeParenthesis shift and go to state 143
    plus            shift and go to state 39
    minus           shift and go to state 40


state 141

    (35) subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace . ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (65) ACTION_NEW_IF -> .

    elif            reduce using rule 65 (ACTION_NEW_IF -> .)
    else            reduce using rule 65 (ACTION_NEW_IF -> .)
    consoleWrite    reduce using rule 65 (ACTION_NEW_IF -> .)
    consoleRead     reduce using rule 65 (ACTION_NEW_IF -> .)
    if              reduce using rule 65 (ACTION_NEW_IF -> .)
    while           reduce using rule 65 (ACTION_NEW_IF -> .)
    for             reduce using rule 65 (ACTION_NEW_IF -> .)
    id              reduce using rule 65 (ACTION_NEW_IF -> .)
    call            reduce using rule 65 (ACTION_NEW_IF -> .)
    plusPlus        reduce using rule 65 (ACTION_NEW_IF -> .)
    minusMinus      reduce using rule 65 (ACTION_NEW_IF -> .)
    closeBrace      reduce using rule 65 (ACTION_NEW_IF -> .)

    ACTION_NEW_IF                  shift and go to state 144

state 142

    (36) subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine .

    closeBrace      reduce using rule 36 (subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine .)


state 143

    (37) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis . openBrace subroutine closeBrace subroutine

    openBrace       shift and go to state 145


state 144

    (35) subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF . ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (66) ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .

    elif            reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    else            reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    consoleWrite    reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    consoleRead     reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    if              reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    while           reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    for             reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    id              reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    call            reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    plusPlus        reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    minusMinus      reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    closeBrace      reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)

    ACTION_QUADRUPLET_EMPTY_JUMP_END_IF shift and go to state 146

state 145

    (37) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace . subroutine closeBrace subroutine
    (33) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (34) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (35) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (36) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (38) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (39) subroutine -> . unaryExpression semicolon subroutine
    (40) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (41) subroutine -> .
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 62
    consoleRead     shift and go to state 63
    if              shift and go to state 65
    while           shift and go to state 66
    for             shift and go to state 67
    id              shift and go to state 64
    call            shift and go to state 69
    closeBrace      reduce using rule 41 (subroutine -> .)
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    subroutine                     shift and go to state 147
    unaryExpression                shift and go to state 68

state 146

    (35) subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF . elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (42) elseStatement -> . elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement
    (43) elseStatement -> . else ACTION_FILL_JUMP openBrace subroutine closeBrace
    (44) elseStatement -> . ACTION_FILL_JUMP
    (68) ACTION_FILL_JUMP -> .

    elif            shift and go to state 149
    else            shift and go to state 151
    consoleWrite    reduce using rule 68 (ACTION_FILL_JUMP -> .)
    consoleRead     reduce using rule 68 (ACTION_FILL_JUMP -> .)
    if              reduce using rule 68 (ACTION_FILL_JUMP -> .)
    while           reduce using rule 68 (ACTION_FILL_JUMP -> .)
    for             reduce using rule 68 (ACTION_FILL_JUMP -> .)
    id              reduce using rule 68 (ACTION_FILL_JUMP -> .)
    call            reduce using rule 68 (ACTION_FILL_JUMP -> .)
    plusPlus        reduce using rule 68 (ACTION_FILL_JUMP -> .)
    minusMinus      reduce using rule 68 (ACTION_FILL_JUMP -> .)
    closeBrace      reduce using rule 68 (ACTION_FILL_JUMP -> .)

    elseStatement                  shift and go to state 148
    ACTION_FILL_JUMP               shift and go to state 150

state 147

    (37) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine . closeBrace subroutine

    closeBrace      shift and go to state 152


state 148

    (35) subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement . ACTION_FILL_JUMP_END_IF subroutine
    (67) ACTION_FILL_JUMP_END_IF -> .

    consoleWrite    reduce using rule 67 (ACTION_FILL_JUMP_END_IF -> .)
    consoleRead     reduce using rule 67 (ACTION_FILL_JUMP_END_IF -> .)
    if              reduce using rule 67 (ACTION_FILL_JUMP_END_IF -> .)
    while           reduce using rule 67 (ACTION_FILL_JUMP_END_IF -> .)
    for             reduce using rule 67 (ACTION_FILL_JUMP_END_IF -> .)
    id              reduce using rule 67 (ACTION_FILL_JUMP_END_IF -> .)
    call            reduce using rule 67 (ACTION_FILL_JUMP_END_IF -> .)
    plusPlus        reduce using rule 67 (ACTION_FILL_JUMP_END_IF -> .)
    minusMinus      reduce using rule 67 (ACTION_FILL_JUMP_END_IF -> .)
    closeBrace      reduce using rule 67 (ACTION_FILL_JUMP_END_IF -> .)

    ACTION_FILL_JUMP_END_IF        shift and go to state 153

state 149

    (42) elseStatement -> elif . ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement
    (68) ACTION_FILL_JUMP -> .

    openParenthesis reduce using rule 68 (ACTION_FILL_JUMP -> .)

    ACTION_FILL_JUMP               shift and go to state 154

state 150

    (44) elseStatement -> ACTION_FILL_JUMP .

    consoleWrite    reduce using rule 44 (elseStatement -> ACTION_FILL_JUMP .)
    consoleRead     reduce using rule 44 (elseStatement -> ACTION_FILL_JUMP .)
    if              reduce using rule 44 (elseStatement -> ACTION_FILL_JUMP .)
    while           reduce using rule 44 (elseStatement -> ACTION_FILL_JUMP .)
    for             reduce using rule 44 (elseStatement -> ACTION_FILL_JUMP .)
    id              reduce using rule 44 (elseStatement -> ACTION_FILL_JUMP .)
    call            reduce using rule 44 (elseStatement -> ACTION_FILL_JUMP .)
    plusPlus        reduce using rule 44 (elseStatement -> ACTION_FILL_JUMP .)
    minusMinus      reduce using rule 44 (elseStatement -> ACTION_FILL_JUMP .)
    closeBrace      reduce using rule 44 (elseStatement -> ACTION_FILL_JUMP .)


state 151

    (43) elseStatement -> else . ACTION_FILL_JUMP openBrace subroutine closeBrace
    (68) ACTION_FILL_JUMP -> .

    openBrace       reduce using rule 68 (ACTION_FILL_JUMP -> .)

    ACTION_FILL_JUMP               shift and go to state 155

state 152

    (37) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace . subroutine
    (33) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (34) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (35) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (36) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (38) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (39) subroutine -> . unaryExpression semicolon subroutine
    (40) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (41) subroutine -> .
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 62
    consoleRead     shift and go to state 63
    if              shift and go to state 65
    while           shift and go to state 66
    for             shift and go to state 67
    id              shift and go to state 64
    call            shift and go to state 69
    closeBrace      reduce using rule 41 (subroutine -> .)
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    subroutine                     shift and go to state 156
    unaryExpression                shift and go to state 68

state 153

    (35) subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF . subroutine
    (33) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (34) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (35) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (36) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (38) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (39) subroutine -> . unaryExpression semicolon subroutine
    (40) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (41) subroutine -> .
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 62
    consoleRead     shift and go to state 63
    if              shift and go to state 65
    while           shift and go to state 66
    for             shift and go to state 67
    id              shift and go to state 64
    call            shift and go to state 69
    closeBrace      reduce using rule 41 (subroutine -> .)
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    subroutine                     shift and go to state 157
    unaryExpression                shift and go to state 68

state 154

    (42) elseStatement -> elif ACTION_FILL_JUMP . openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement

    openParenthesis shift and go to state 158


state 155

    (43) elseStatement -> else ACTION_FILL_JUMP . openBrace subroutine closeBrace

    openBrace       shift and go to state 159


state 156

    (37) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine .

    closeBrace      reduce using rule 37 (subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine .)


state 157

    (35) subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine .

    closeBrace      reduce using rule 35 (subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine .)


state 158

    (42) elseStatement -> elif ACTION_FILL_JUMP openParenthesis . statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement
    (45) statement -> . arithmeticExpression
    (46) statement -> . arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET
    (47) statement -> . statement logicExpression statement
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (27) value -> . intValue ACTION_INT_VALUE
    (28) value -> . doubleValue ACTION_DOUBLE_VALUE
    (29) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    statement                      shift and go to state 160
    arithmeticExpression           shift and go to state 97
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 159

    (43) elseStatement -> else ACTION_FILL_JUMP openBrace . subroutine closeBrace
    (33) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (34) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (35) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (36) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (38) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (39) subroutine -> . unaryExpression semicolon subroutine
    (40) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (41) subroutine -> .
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 62
    consoleRead     shift and go to state 63
    if              shift and go to state 65
    while           shift and go to state 66
    for             shift and go to state 67
    id              shift and go to state 64
    call            shift and go to state 69
    closeBrace      reduce using rule 41 (subroutine -> .)
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    subroutine                     shift and go to state 161
    unaryExpression                shift and go to state 68

state 160

    (42) elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement . closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement
    (47) statement -> statement . logicExpression statement
    (48) logicExpression -> . greaterThan
    (49) logicExpression -> . lessThan
    (50) logicExpression -> . isEqual
    (51) logicExpression -> . notEqual
    (52) logicExpression -> . greaterOrEqual
    (53) logicExpression -> . lessOrEqual
    (54) logicExpression -> . and
    (55) logicExpression -> . or

    closeParenthesis shift and go to state 162
    greaterThan     shift and go to state 108
    lessThan        shift and go to state 109
    isEqual         shift and go to state 110
    notEqual        shift and go to state 111
    greaterOrEqual  shift and go to state 112
    lessOrEqual     shift and go to state 113
    and             shift and go to state 114
    or              shift and go to state 115

    logicExpression                shift and go to state 107

state 161

    (43) elseStatement -> else ACTION_FILL_JUMP openBrace subroutine . closeBrace

    closeBrace      shift and go to state 163


state 162

    (42) elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis . ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement
    (64) ACTION_QUADRUPLET_EMPTY_JUMP -> .

    openBrace       reduce using rule 64 (ACTION_QUADRUPLET_EMPTY_JUMP -> .)

    ACTION_QUADRUPLET_EMPTY_JUMP   shift and go to state 164

state 163

    (43) elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .

    consoleWrite    reduce using rule 43 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)
    consoleRead     reduce using rule 43 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)
    if              reduce using rule 43 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)
    while           reduce using rule 43 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)
    for             reduce using rule 43 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)
    id              reduce using rule 43 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)
    call            reduce using rule 43 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)
    plusPlus        reduce using rule 43 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)
    minusMinus      reduce using rule 43 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)
    closeBrace      reduce using rule 43 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)


state 164

    (42) elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP . openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement

    openBrace       shift and go to state 165


state 165

    (42) elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace . subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement
    (33) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (34) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (35) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (36) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (38) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (39) subroutine -> . unaryExpression semicolon subroutine
    (40) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (41) subroutine -> .
    (23) unaryExpression -> . id plusPlus
    (24) unaryExpression -> . id minusMinus
    (25) unaryExpression -> . plusPlus id
    (26) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 62
    consoleRead     shift and go to state 63
    if              shift and go to state 65
    while           shift and go to state 66
    for             shift and go to state 67
    id              shift and go to state 64
    call            shift and go to state 69
    closeBrace      reduce using rule 41 (subroutine -> .)
    plusPlus        shift and go to state 31
    minusMinus      shift and go to state 32

    subroutine                     shift and go to state 166
    unaryExpression                shift and go to state 68

state 166

    (42) elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine . closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement

    closeBrace      shift and go to state 167


state 167

    (42) elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace . ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement
    (66) ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .

    elif            reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    else            reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    consoleWrite    reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    consoleRead     reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    if              reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    while           reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    for             reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    id              reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    call            reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    plusPlus        reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    minusMinus      reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    closeBrace      reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)

    ACTION_QUADRUPLET_EMPTY_JUMP_END_IF shift and go to state 168

state 168

    (42) elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF . elseStatement
    (42) elseStatement -> . elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement
    (43) elseStatement -> . else ACTION_FILL_JUMP openBrace subroutine closeBrace
    (44) elseStatement -> . ACTION_FILL_JUMP
    (68) ACTION_FILL_JUMP -> .

    elif            shift and go to state 149
    else            shift and go to state 151
    consoleWrite    reduce using rule 68 (ACTION_FILL_JUMP -> .)
    consoleRead     reduce using rule 68 (ACTION_FILL_JUMP -> .)
    if              reduce using rule 68 (ACTION_FILL_JUMP -> .)
    while           reduce using rule 68 (ACTION_FILL_JUMP -> .)
    for             reduce using rule 68 (ACTION_FILL_JUMP -> .)
    id              reduce using rule 68 (ACTION_FILL_JUMP -> .)
    call            reduce using rule 68 (ACTION_FILL_JUMP -> .)
    plusPlus        reduce using rule 68 (ACTION_FILL_JUMP -> .)
    minusMinus      reduce using rule 68 (ACTION_FILL_JUMP -> .)
    closeBrace      reduce using rule 68 (ACTION_FILL_JUMP -> .)

    ACTION_FILL_JUMP               shift and go to state 150
    elseStatement                  shift and go to state 169

state 169

    (42) elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .

    consoleWrite    reduce using rule 42 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)
    consoleRead     reduce using rule 42 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)
    if              reduce using rule 42 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)
    while           reduce using rule 42 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)
    for             reduce using rule 42 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)
    id              reduce using rule 42 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)
    call            reduce using rule 42 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)
    plusPlus        reduce using rule 42 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)
    minusMinus      reduce using rule 42 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)
    closeBrace      reduce using rule 42 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for greaterThan in state 97 resolved as shift
WARNING: shift/reduce conflict for lessThan in state 97 resolved as shift
WARNING: shift/reduce conflict for isEqual in state 97 resolved as shift
WARNING: shift/reduce conflict for notEqual in state 97 resolved as shift
WARNING: shift/reduce conflict for greaterOrEqual in state 97 resolved as shift
WARNING: shift/reduce conflict for lessOrEqual in state 97 resolved as shift
WARNING: shift/reduce conflict for and in state 97 resolved as shift
WARNING: shift/reduce conflict for or in state 97 resolved as shift
WARNING: shift/reduce conflict for greaterThan in state 124 resolved as shift
WARNING: shift/reduce conflict for lessThan in state 124 resolved as shift
WARNING: shift/reduce conflict for isEqual in state 124 resolved as shift
WARNING: shift/reduce conflict for notEqual in state 124 resolved as shift
WARNING: shift/reduce conflict for greaterOrEqual in state 124 resolved as shift
WARNING: shift/reduce conflict for lessOrEqual in state 124 resolved as shift
WARNING: shift/reduce conflict for and in state 124 resolved as shift
WARNING: shift/reduce conflict for or in state 124 resolved as shift
