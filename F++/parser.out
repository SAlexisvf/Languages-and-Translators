Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    not

Grammar

Rule 0     S' -> program
Rule 1     program -> var func mainProgram
Rule 2     var -> type varSequence semicolon var
Rule 3     var -> <empty>
Rule 4     varSequence -> variable equal arithmeticExpression
Rule 5     varSequence -> variable
Rule 6     varSequence -> variable equal arithmeticExpression comma varSequence
Rule 7     varSequence -> variable comma varSequence
Rule 8     variable -> id dimentions
Rule 9     dimentions -> openBracket value closeBracket
Rule 10    dimentions -> openBracket value closeBracket openBracket value closeBracket
Rule 11    dimentions -> <empty>
Rule 12    type -> int
Rule 13    type -> double
Rule 14    arithmeticExpression -> multiplyDivide
Rule 15    arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
Rule 16    arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
Rule 17    multiplyDivide -> val
Rule 18    multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
Rule 19    multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
Rule 20    val -> value
Rule 21    val -> unaryExpression
Rule 22    val -> openParenthesis arithmeticExpression closeParenthesis
Rule 23    unaryExpression -> id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
Rule 24    unaryExpression -> id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS
Rule 25    value -> intValue ACTION_INT_VALUE
Rule 26    value -> doubleValue ACTION_DOUBLE_VALUE
Rule 27    value -> id ACTION_VAR_VALUE
Rule 28    func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace func
Rule 29    func -> <empty>
Rule 30    mainProgram -> main openParenthesis closeParenthesis openBrace subroutine closeBrace
Rule 31    subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
Rule 32    subroutine -> consoleRead openParenthesis id closeParenthesis semicolon subroutine
Rule 33    subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
Rule 34    subroutine -> while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
Rule 35    subroutine -> do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
Rule 36    subroutine -> for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
Rule 37    subroutine -> id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
Rule 38    subroutine -> unaryExpression semicolon subroutine
Rule 39    subroutine -> call id openParenthesis closeParenthesis semicolon subroutine
Rule 40    subroutine -> <empty>
Rule 41    elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement
Rule 42    elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace
Rule 43    elseStatement -> ACTION_FILL_JUMP
Rule 44    statement -> arithmeticExpression
Rule 45    statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET
Rule 46    statement -> statement logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET
Rule 47    logicExpression -> greaterThan
Rule 48    logicExpression -> lessThan
Rule 49    logicExpression -> isEqual
Rule 50    logicExpression -> notEqual
Rule 51    logicExpression -> greaterOrEqual
Rule 52    logicExpression -> lessOrEqual
Rule 53    logicExpression -> and
Rule 54    logicExpression -> or
Rule 55    cout -> arithmeticExpression
Rule 56    cout -> string
Rule 57    ACTION_VAR_VALUE -> <empty>
Rule 58    ACTION_INT_VALUE -> <empty>
Rule 59    ACTION_DOUBLE_VALUE -> <empty>
Rule 60    ACTION_UNARY_ADD_OPERANDS -> <empty>
Rule 61    ACTION_UNARY_PLUS -> <empty>
Rule 62    ACTION_UNARY_MINUS -> <empty>
Rule 63    ACTION_ADD_OPERATOR -> <empty>
Rule 64    ACTION_GENERATE_QUADRUPLET -> <empty>
Rule 65    ACTION_ADD_QUADRUPLET -> <empty>
Rule 66    ACTION_QUADRUPLET_EMPTY_JUMP -> <empty>
Rule 67    ACTION_NEW_IF -> <empty>
Rule 68    ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> <empty>
Rule 69    ACTION_FILL_JUMP_END_IF -> <empty>
Rule 70    ACTION_FILL_JUMP -> <empty>
Rule 71    ACTION_WHILE_GOTO -> <empty>
Rule 72    ACTION_DO_WHILE_INDEX -> <empty>
Rule 73    ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> <empty>

Terminals, with rules where they appear

and                  : 53
call                 : 39
closeBrace           : 28 30 33 34 35 36 41 42
closeBracket         : 9 10 10
closeParenthesis     : 22 28 30 31 32 33 34 35 36 39 41
comma                : 6 7
consoleRead          : 32
consoleWrite         : 31
divide               : 19
do                   : 35
double               : 13
doubleValue          : 26
elif                 : 41
else                 : 42
equal                : 4 6 36 37
error                : 
for                  : 36
function             : 28
greaterOrEqual       : 51
greaterThan          : 47
id                   : 8 23 24 27 28 32 36 37 39
if                   : 33
int                  : 12
intValue             : 25
isEqual              : 49
lessOrEqual          : 52
lessThan             : 48
main                 : 30
minus                : 16
minusMinus           : 24
multiply             : 18
not                  : 
notEqual             : 50
openBrace            : 28 30 33 34 35 36 41 42
openBracket          : 9 10 10
openParenthesis      : 22 28 30 31 32 33 34 35 36 39 41
or                   : 54
plus                 : 15
plusPlus             : 23
semicolon            : 2 31 32 35 36 36 37 38 39
string               : 56
while                : 34 35

Nonterminals, with rules where they appear

ACTION_ADD_OPERATOR  : 15 16 18 19 45 46
ACTION_ADD_QUADRUPLET : 15 16 18 19 45 46
ACTION_DOUBLE_VALUE  : 26
ACTION_DO_WHILE_INDEX : 35
ACTION_FILL_JUMP     : 41 42 43
ACTION_FILL_JUMP_END_IF : 33
ACTION_GENERATE_QUADRUPLET : 36 37
ACTION_INT_VALUE     : 25
ACTION_NEW_IF        : 33
ACTION_QUADRUPLET_EMPTY_JUMP : 33 34 36 41
ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE : 35
ACTION_QUADRUPLET_EMPTY_JUMP_END_IF : 33 41
ACTION_UNARY_ADD_OPERANDS : 23 24
ACTION_UNARY_MINUS   : 24
ACTION_UNARY_PLUS    : 23
ACTION_VAR_VALUE     : 27
ACTION_WHILE_GOTO    : 34 36
arithmeticExpression : 4 6 15 16 22 36 36 37 44 45 45 55
cout                 : 31
dimentions           : 8
elseStatement        : 33 41
func                 : 1 28
logicExpression      : 45 46
mainProgram          : 1
multiplyDivide       : 14 15 16 18 19
program              : 0
statement            : 33 34 35 36 41 46 46
subroutine           : 28 30 31 32 33 33 34 34 35 35 36 36 37 38 39 41 42
type                 : 2
unaryExpression      : 21 38
val                  : 17 18 19
value                : 9 10 10 20
var                  : 1 2
varSequence          : 2 6 7
variable             : 4 5 6 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . var func mainProgram
    (2) var -> . type varSequence semicolon var
    (3) var -> .
    (12) type -> . int
    (13) type -> . double

    function        reduce using rule 3 (var -> .)
    main            reduce using rule 3 (var -> .)
    int             shift and go to state 4
    double          shift and go to state 5

    program                        shift and go to state 1
    var                            shift and go to state 2
    type                           shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> var . func mainProgram
    (28) func -> . function id openParenthesis closeParenthesis openBrace subroutine closeBrace func
    (29) func -> .

    function        shift and go to state 7
    main            reduce using rule 29 (func -> .)

    func                           shift and go to state 6

state 3

    (2) var -> type . varSequence semicolon var
    (4) varSequence -> . variable equal arithmeticExpression
    (5) varSequence -> . variable
    (6) varSequence -> . variable equal arithmeticExpression comma varSequence
    (7) varSequence -> . variable comma varSequence
    (8) variable -> . id dimentions

    id              shift and go to state 10

    varSequence                    shift and go to state 8
    variable                       shift and go to state 9

state 4

    (12) type -> int .

    id              reduce using rule 12 (type -> int .)


state 5

    (13) type -> double .

    id              reduce using rule 13 (type -> double .)


state 6

    (1) program -> var func . mainProgram
    (30) mainProgram -> . main openParenthesis closeParenthesis openBrace subroutine closeBrace

    main            shift and go to state 12

    mainProgram                    shift and go to state 11

state 7

    (28) func -> function . id openParenthesis closeParenthesis openBrace subroutine closeBrace func

    id              shift and go to state 13


state 8

    (2) var -> type varSequence . semicolon var

    semicolon       shift and go to state 14


state 9

    (4) varSequence -> variable . equal arithmeticExpression
    (5) varSequence -> variable .
    (6) varSequence -> variable . equal arithmeticExpression comma varSequence
    (7) varSequence -> variable . comma varSequence

    equal           shift and go to state 15
    semicolon       reduce using rule 5 (varSequence -> variable .)
    comma           shift and go to state 16


state 10

    (8) variable -> id . dimentions
    (9) dimentions -> . openBracket value closeBracket
    (10) dimentions -> . openBracket value closeBracket openBracket value closeBracket
    (11) dimentions -> .

    openBracket     shift and go to state 18
    equal           reduce using rule 11 (dimentions -> .)
    comma           reduce using rule 11 (dimentions -> .)
    semicolon       reduce using rule 11 (dimentions -> .)

    dimentions                     shift and go to state 17

state 11

    (1) program -> var func mainProgram .

    $end            reduce using rule 1 (program -> var func mainProgram .)


state 12

    (30) mainProgram -> main . openParenthesis closeParenthesis openBrace subroutine closeBrace

    openParenthesis shift and go to state 19


state 13

    (28) func -> function id . openParenthesis closeParenthesis openBrace subroutine closeBrace func

    openParenthesis shift and go to state 20


state 14

    (2) var -> type varSequence semicolon . var
    (2) var -> . type varSequence semicolon var
    (3) var -> .
    (12) type -> . int
    (13) type -> . double

    function        reduce using rule 3 (var -> .)
    main            reduce using rule 3 (var -> .)
    int             shift and go to state 4
    double          shift and go to state 5

    type                           shift and go to state 3
    var                            shift and go to state 21

state 15

    (4) varSequence -> variable equal . arithmeticExpression
    (6) varSequence -> variable equal . arithmeticExpression comma varSequence
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30

    arithmeticExpression           shift and go to state 22
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 16

    (7) varSequence -> variable comma . varSequence
    (4) varSequence -> . variable equal arithmeticExpression
    (5) varSequence -> . variable
    (6) varSequence -> . variable equal arithmeticExpression comma varSequence
    (7) varSequence -> . variable comma varSequence
    (8) variable -> . id dimentions

    id              shift and go to state 10

    variable                       shift and go to state 9
    varSequence                    shift and go to state 31

state 17

    (8) variable -> id dimentions .

    equal           reduce using rule 8 (variable -> id dimentions .)
    comma           reduce using rule 8 (variable -> id dimentions .)
    semicolon       reduce using rule 8 (variable -> id dimentions .)


state 18

    (9) dimentions -> openBracket . value closeBracket
    (10) dimentions -> openBracket . value closeBracket openBracket value closeBracket
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE

    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 33

    value                          shift and go to state 32

state 19

    (30) mainProgram -> main openParenthesis . closeParenthesis openBrace subroutine closeBrace

    closeParenthesis shift and go to state 34


state 20

    (28) func -> function id openParenthesis . closeParenthesis openBrace subroutine closeBrace func

    closeParenthesis shift and go to state 35


state 21

    (2) var -> type varSequence semicolon var .

    function        reduce using rule 2 (var -> type varSequence semicolon var .)
    main            reduce using rule 2 (var -> type varSequence semicolon var .)


state 22

    (4) varSequence -> variable equal arithmeticExpression .
    (6) varSequence -> variable equal arithmeticExpression . comma varSequence
    (15) arithmeticExpression -> arithmeticExpression . plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> arithmeticExpression . minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET

    semicolon       reduce using rule 4 (varSequence -> variable equal arithmeticExpression .)
    comma           shift and go to state 36
    plus            shift and go to state 37
    minus           shift and go to state 38


state 23

    (14) arithmeticExpression -> multiplyDivide .
    (18) multiplyDivide -> multiplyDivide . multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> multiplyDivide . divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET

    comma           reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    plus            reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    minus           reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    semicolon       reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    closeParenthesis reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    greaterThan     reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    lessThan        reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    isEqual         reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    notEqual        reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    greaterOrEqual  reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    lessOrEqual     reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    and             reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    or              reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    multiply        shift and go to state 39
    divide          shift and go to state 40


state 24

    (17) multiplyDivide -> val .

    multiply        reduce using rule 17 (multiplyDivide -> val .)
    divide          reduce using rule 17 (multiplyDivide -> val .)
    comma           reduce using rule 17 (multiplyDivide -> val .)
    plus            reduce using rule 17 (multiplyDivide -> val .)
    minus           reduce using rule 17 (multiplyDivide -> val .)
    semicolon       reduce using rule 17 (multiplyDivide -> val .)
    closeParenthesis reduce using rule 17 (multiplyDivide -> val .)
    greaterThan     reduce using rule 17 (multiplyDivide -> val .)
    lessThan        reduce using rule 17 (multiplyDivide -> val .)
    isEqual         reduce using rule 17 (multiplyDivide -> val .)
    notEqual        reduce using rule 17 (multiplyDivide -> val .)
    greaterOrEqual  reduce using rule 17 (multiplyDivide -> val .)
    lessOrEqual     reduce using rule 17 (multiplyDivide -> val .)
    and             reduce using rule 17 (multiplyDivide -> val .)
    or              reduce using rule 17 (multiplyDivide -> val .)


state 25

    (20) val -> value .

    multiply        reduce using rule 20 (val -> value .)
    divide          reduce using rule 20 (val -> value .)
    comma           reduce using rule 20 (val -> value .)
    plus            reduce using rule 20 (val -> value .)
    minus           reduce using rule 20 (val -> value .)
    semicolon       reduce using rule 20 (val -> value .)
    closeParenthesis reduce using rule 20 (val -> value .)
    greaterThan     reduce using rule 20 (val -> value .)
    lessThan        reduce using rule 20 (val -> value .)
    isEqual         reduce using rule 20 (val -> value .)
    notEqual        reduce using rule 20 (val -> value .)
    greaterOrEqual  reduce using rule 20 (val -> value .)
    lessOrEqual     reduce using rule 20 (val -> value .)
    and             reduce using rule 20 (val -> value .)
    or              reduce using rule 20 (val -> value .)


state 26

    (21) val -> unaryExpression .

    multiply        reduce using rule 21 (val -> unaryExpression .)
    divide          reduce using rule 21 (val -> unaryExpression .)
    comma           reduce using rule 21 (val -> unaryExpression .)
    plus            reduce using rule 21 (val -> unaryExpression .)
    minus           reduce using rule 21 (val -> unaryExpression .)
    semicolon       reduce using rule 21 (val -> unaryExpression .)
    closeParenthesis reduce using rule 21 (val -> unaryExpression .)
    greaterThan     reduce using rule 21 (val -> unaryExpression .)
    lessThan        reduce using rule 21 (val -> unaryExpression .)
    isEqual         reduce using rule 21 (val -> unaryExpression .)
    notEqual        reduce using rule 21 (val -> unaryExpression .)
    greaterOrEqual  reduce using rule 21 (val -> unaryExpression .)
    lessOrEqual     reduce using rule 21 (val -> unaryExpression .)
    and             reduce using rule 21 (val -> unaryExpression .)
    or              reduce using rule 21 (val -> unaryExpression .)


state 27

    (22) val -> openParenthesis . arithmeticExpression closeParenthesis
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30

    arithmeticExpression           shift and go to state 41
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 28

    (25) value -> intValue . ACTION_INT_VALUE
    (58) ACTION_INT_VALUE -> .

    multiply        reduce using rule 58 (ACTION_INT_VALUE -> .)
    divide          reduce using rule 58 (ACTION_INT_VALUE -> .)
    comma           reduce using rule 58 (ACTION_INT_VALUE -> .)
    plus            reduce using rule 58 (ACTION_INT_VALUE -> .)
    minus           reduce using rule 58 (ACTION_INT_VALUE -> .)
    semicolon       reduce using rule 58 (ACTION_INT_VALUE -> .)
    closeBracket    reduce using rule 58 (ACTION_INT_VALUE -> .)
    closeParenthesis reduce using rule 58 (ACTION_INT_VALUE -> .)
    greaterThan     reduce using rule 58 (ACTION_INT_VALUE -> .)
    lessThan        reduce using rule 58 (ACTION_INT_VALUE -> .)
    isEqual         reduce using rule 58 (ACTION_INT_VALUE -> .)
    notEqual        reduce using rule 58 (ACTION_INT_VALUE -> .)
    greaterOrEqual  reduce using rule 58 (ACTION_INT_VALUE -> .)
    lessOrEqual     reduce using rule 58 (ACTION_INT_VALUE -> .)
    and             reduce using rule 58 (ACTION_INT_VALUE -> .)
    or              reduce using rule 58 (ACTION_INT_VALUE -> .)

    ACTION_INT_VALUE               shift and go to state 42

state 29

    (26) value -> doubleValue . ACTION_DOUBLE_VALUE
    (59) ACTION_DOUBLE_VALUE -> .

    multiply        reduce using rule 59 (ACTION_DOUBLE_VALUE -> .)
    divide          reduce using rule 59 (ACTION_DOUBLE_VALUE -> .)
    comma           reduce using rule 59 (ACTION_DOUBLE_VALUE -> .)
    plus            reduce using rule 59 (ACTION_DOUBLE_VALUE -> .)
    minus           reduce using rule 59 (ACTION_DOUBLE_VALUE -> .)
    semicolon       reduce using rule 59 (ACTION_DOUBLE_VALUE -> .)
    closeBracket    reduce using rule 59 (ACTION_DOUBLE_VALUE -> .)
    closeParenthesis reduce using rule 59 (ACTION_DOUBLE_VALUE -> .)
    greaterThan     reduce using rule 59 (ACTION_DOUBLE_VALUE -> .)
    lessThan        reduce using rule 59 (ACTION_DOUBLE_VALUE -> .)
    isEqual         reduce using rule 59 (ACTION_DOUBLE_VALUE -> .)
    notEqual        reduce using rule 59 (ACTION_DOUBLE_VALUE -> .)
    greaterOrEqual  reduce using rule 59 (ACTION_DOUBLE_VALUE -> .)
    lessOrEqual     reduce using rule 59 (ACTION_DOUBLE_VALUE -> .)
    and             reduce using rule 59 (ACTION_DOUBLE_VALUE -> .)
    or              reduce using rule 59 (ACTION_DOUBLE_VALUE -> .)

    ACTION_DOUBLE_VALUE            shift and go to state 43

state 30

    (27) value -> id . ACTION_VAR_VALUE
    (23) unaryExpression -> id . ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> id . ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS
    (57) ACTION_VAR_VALUE -> .
    (60) ACTION_UNARY_ADD_OPERANDS -> .

    multiply        reduce using rule 57 (ACTION_VAR_VALUE -> .)
    divide          reduce using rule 57 (ACTION_VAR_VALUE -> .)
    comma           reduce using rule 57 (ACTION_VAR_VALUE -> .)
    plus            reduce using rule 57 (ACTION_VAR_VALUE -> .)
    minus           reduce using rule 57 (ACTION_VAR_VALUE -> .)
    semicolon       reduce using rule 57 (ACTION_VAR_VALUE -> .)
    closeParenthesis reduce using rule 57 (ACTION_VAR_VALUE -> .)
    greaterThan     reduce using rule 57 (ACTION_VAR_VALUE -> .)
    lessThan        reduce using rule 57 (ACTION_VAR_VALUE -> .)
    isEqual         reduce using rule 57 (ACTION_VAR_VALUE -> .)
    notEqual        reduce using rule 57 (ACTION_VAR_VALUE -> .)
    greaterOrEqual  reduce using rule 57 (ACTION_VAR_VALUE -> .)
    lessOrEqual     reduce using rule 57 (ACTION_VAR_VALUE -> .)
    and             reduce using rule 57 (ACTION_VAR_VALUE -> .)
    or              reduce using rule 57 (ACTION_VAR_VALUE -> .)
    plusPlus        reduce using rule 60 (ACTION_UNARY_ADD_OPERANDS -> .)
    minusMinus      reduce using rule 60 (ACTION_UNARY_ADD_OPERANDS -> .)

    ACTION_VAR_VALUE               shift and go to state 44
    ACTION_UNARY_ADD_OPERANDS      shift and go to state 45

state 31

    (7) varSequence -> variable comma varSequence .

    semicolon       reduce using rule 7 (varSequence -> variable comma varSequence .)


state 32

    (9) dimentions -> openBracket value . closeBracket
    (10) dimentions -> openBracket value . closeBracket openBracket value closeBracket

    closeBracket    shift and go to state 46


state 33

    (27) value -> id . ACTION_VAR_VALUE
    (57) ACTION_VAR_VALUE -> .

    closeBracket    reduce using rule 57 (ACTION_VAR_VALUE -> .)

    ACTION_VAR_VALUE               shift and go to state 44

state 34

    (30) mainProgram -> main openParenthesis closeParenthesis . openBrace subroutine closeBrace

    openBrace       shift and go to state 47


state 35

    (28) func -> function id openParenthesis closeParenthesis . openBrace subroutine closeBrace func

    openBrace       shift and go to state 48


state 36

    (6) varSequence -> variable equal arithmeticExpression comma . varSequence
    (4) varSequence -> . variable equal arithmeticExpression
    (5) varSequence -> . variable
    (6) varSequence -> . variable equal arithmeticExpression comma varSequence
    (7) varSequence -> . variable comma varSequence
    (8) variable -> . id dimentions

    id              shift and go to state 10

    variable                       shift and go to state 9
    varSequence                    shift and go to state 49

state 37

    (15) arithmeticExpression -> arithmeticExpression plus . ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (63) ACTION_ADD_OPERATOR -> .

    openParenthesis reduce using rule 63 (ACTION_ADD_OPERATOR -> .)
    intValue        reduce using rule 63 (ACTION_ADD_OPERATOR -> .)
    doubleValue     reduce using rule 63 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 63 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 50

state 38

    (16) arithmeticExpression -> arithmeticExpression minus . ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (63) ACTION_ADD_OPERATOR -> .

    openParenthesis reduce using rule 63 (ACTION_ADD_OPERATOR -> .)
    intValue        reduce using rule 63 (ACTION_ADD_OPERATOR -> .)
    doubleValue     reduce using rule 63 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 63 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 51

state 39

    (18) multiplyDivide -> multiplyDivide multiply . ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (63) ACTION_ADD_OPERATOR -> .

    openParenthesis reduce using rule 63 (ACTION_ADD_OPERATOR -> .)
    intValue        reduce using rule 63 (ACTION_ADD_OPERATOR -> .)
    doubleValue     reduce using rule 63 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 63 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 52

state 40

    (19) multiplyDivide -> multiplyDivide divide . ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (63) ACTION_ADD_OPERATOR -> .

    openParenthesis reduce using rule 63 (ACTION_ADD_OPERATOR -> .)
    intValue        reduce using rule 63 (ACTION_ADD_OPERATOR -> .)
    doubleValue     reduce using rule 63 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 63 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 53

state 41

    (22) val -> openParenthesis arithmeticExpression . closeParenthesis
    (15) arithmeticExpression -> arithmeticExpression . plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> arithmeticExpression . minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET

    closeParenthesis shift and go to state 54
    plus            shift and go to state 37
    minus           shift and go to state 38


state 42

    (25) value -> intValue ACTION_INT_VALUE .

    multiply        reduce using rule 25 (value -> intValue ACTION_INT_VALUE .)
    divide          reduce using rule 25 (value -> intValue ACTION_INT_VALUE .)
    comma           reduce using rule 25 (value -> intValue ACTION_INT_VALUE .)
    plus            reduce using rule 25 (value -> intValue ACTION_INT_VALUE .)
    minus           reduce using rule 25 (value -> intValue ACTION_INT_VALUE .)
    semicolon       reduce using rule 25 (value -> intValue ACTION_INT_VALUE .)
    closeBracket    reduce using rule 25 (value -> intValue ACTION_INT_VALUE .)
    closeParenthesis reduce using rule 25 (value -> intValue ACTION_INT_VALUE .)
    greaterThan     reduce using rule 25 (value -> intValue ACTION_INT_VALUE .)
    lessThan        reduce using rule 25 (value -> intValue ACTION_INT_VALUE .)
    isEqual         reduce using rule 25 (value -> intValue ACTION_INT_VALUE .)
    notEqual        reduce using rule 25 (value -> intValue ACTION_INT_VALUE .)
    greaterOrEqual  reduce using rule 25 (value -> intValue ACTION_INT_VALUE .)
    lessOrEqual     reduce using rule 25 (value -> intValue ACTION_INT_VALUE .)
    and             reduce using rule 25 (value -> intValue ACTION_INT_VALUE .)
    or              reduce using rule 25 (value -> intValue ACTION_INT_VALUE .)


state 43

    (26) value -> doubleValue ACTION_DOUBLE_VALUE .

    multiply        reduce using rule 26 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    divide          reduce using rule 26 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    comma           reduce using rule 26 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    plus            reduce using rule 26 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    minus           reduce using rule 26 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    semicolon       reduce using rule 26 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    closeBracket    reduce using rule 26 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    closeParenthesis reduce using rule 26 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    greaterThan     reduce using rule 26 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    lessThan        reduce using rule 26 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    isEqual         reduce using rule 26 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    notEqual        reduce using rule 26 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    greaterOrEqual  reduce using rule 26 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    lessOrEqual     reduce using rule 26 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    and             reduce using rule 26 (value -> doubleValue ACTION_DOUBLE_VALUE .)
    or              reduce using rule 26 (value -> doubleValue ACTION_DOUBLE_VALUE .)


state 44

    (27) value -> id ACTION_VAR_VALUE .

    multiply        reduce using rule 27 (value -> id ACTION_VAR_VALUE .)
    divide          reduce using rule 27 (value -> id ACTION_VAR_VALUE .)
    comma           reduce using rule 27 (value -> id ACTION_VAR_VALUE .)
    plus            reduce using rule 27 (value -> id ACTION_VAR_VALUE .)
    minus           reduce using rule 27 (value -> id ACTION_VAR_VALUE .)
    semicolon       reduce using rule 27 (value -> id ACTION_VAR_VALUE .)
    closeBracket    reduce using rule 27 (value -> id ACTION_VAR_VALUE .)
    closeParenthesis reduce using rule 27 (value -> id ACTION_VAR_VALUE .)
    greaterThan     reduce using rule 27 (value -> id ACTION_VAR_VALUE .)
    lessThan        reduce using rule 27 (value -> id ACTION_VAR_VALUE .)
    isEqual         reduce using rule 27 (value -> id ACTION_VAR_VALUE .)
    notEqual        reduce using rule 27 (value -> id ACTION_VAR_VALUE .)
    greaterOrEqual  reduce using rule 27 (value -> id ACTION_VAR_VALUE .)
    lessOrEqual     reduce using rule 27 (value -> id ACTION_VAR_VALUE .)
    and             reduce using rule 27 (value -> id ACTION_VAR_VALUE .)
    or              reduce using rule 27 (value -> id ACTION_VAR_VALUE .)


state 45

    (23) unaryExpression -> id ACTION_UNARY_ADD_OPERANDS . plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> id ACTION_UNARY_ADD_OPERANDS . minusMinus ACTION_UNARY_MINUS

    plusPlus        shift and go to state 55
    minusMinus      shift and go to state 56


state 46

    (9) dimentions -> openBracket value closeBracket .
    (10) dimentions -> openBracket value closeBracket . openBracket value closeBracket

    equal           reduce using rule 9 (dimentions -> openBracket value closeBracket .)
    comma           reduce using rule 9 (dimentions -> openBracket value closeBracket .)
    semicolon       reduce using rule 9 (dimentions -> openBracket value closeBracket .)
    openBracket     shift and go to state 57


state 47

    (30) mainProgram -> main openParenthesis closeParenthesis openBrace . subroutine closeBrace
    (31) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (32) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (33) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (34) subroutine -> . while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (35) subroutine -> . do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (36) subroutine -> . for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (37) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    consoleWrite    shift and go to state 59
    consoleRead     shift and go to state 60
    if              shift and go to state 62
    while           shift and go to state 63
    do              shift and go to state 64
    for             shift and go to state 65
    id              shift and go to state 61
    call            shift and go to state 67
    closeBrace      reduce using rule 40 (subroutine -> .)

    subroutine                     shift and go to state 58
    unaryExpression                shift and go to state 66

state 48

    (28) func -> function id openParenthesis closeParenthesis openBrace . subroutine closeBrace func
    (31) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (32) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (33) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (34) subroutine -> . while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (35) subroutine -> . do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (36) subroutine -> . for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (37) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    consoleWrite    shift and go to state 59
    consoleRead     shift and go to state 60
    if              shift and go to state 62
    while           shift and go to state 63
    do              shift and go to state 64
    for             shift and go to state 65
    id              shift and go to state 61
    call            shift and go to state 67
    closeBrace      reduce using rule 40 (subroutine -> .)

    subroutine                     shift and go to state 68
    unaryExpression                shift and go to state 66

state 49

    (6) varSequence -> variable equal arithmeticExpression comma varSequence .

    semicolon       reduce using rule 6 (varSequence -> variable equal arithmeticExpression comma varSequence .)


state 50

    (15) arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR . multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30

    multiplyDivide                 shift and go to state 69
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 51

    (16) arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR . multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30

    multiplyDivide                 shift and go to state 70
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 52

    (18) multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR . val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30

    val                            shift and go to state 71
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 53

    (19) multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR . val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30

    val                            shift and go to state 72
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 54

    (22) val -> openParenthesis arithmeticExpression closeParenthesis .

    multiply        reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    divide          reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    comma           reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    plus            reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    minus           reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    semicolon       reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    closeParenthesis reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    greaterThan     reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    lessThan        reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    isEqual         reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    notEqual        reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    greaterOrEqual  reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    lessOrEqual     reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    and             reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    or              reduce using rule 22 (val -> openParenthesis arithmeticExpression closeParenthesis .)


state 55

    (23) unaryExpression -> id ACTION_UNARY_ADD_OPERANDS plusPlus . ACTION_UNARY_PLUS
    (61) ACTION_UNARY_PLUS -> .

    multiply        reduce using rule 61 (ACTION_UNARY_PLUS -> .)
    divide          reduce using rule 61 (ACTION_UNARY_PLUS -> .)
    comma           reduce using rule 61 (ACTION_UNARY_PLUS -> .)
    plus            reduce using rule 61 (ACTION_UNARY_PLUS -> .)
    minus           reduce using rule 61 (ACTION_UNARY_PLUS -> .)
    semicolon       reduce using rule 61 (ACTION_UNARY_PLUS -> .)
    closeParenthesis reduce using rule 61 (ACTION_UNARY_PLUS -> .)
    greaterThan     reduce using rule 61 (ACTION_UNARY_PLUS -> .)
    lessThan        reduce using rule 61 (ACTION_UNARY_PLUS -> .)
    isEqual         reduce using rule 61 (ACTION_UNARY_PLUS -> .)
    notEqual        reduce using rule 61 (ACTION_UNARY_PLUS -> .)
    greaterOrEqual  reduce using rule 61 (ACTION_UNARY_PLUS -> .)
    lessOrEqual     reduce using rule 61 (ACTION_UNARY_PLUS -> .)
    and             reduce using rule 61 (ACTION_UNARY_PLUS -> .)
    or              reduce using rule 61 (ACTION_UNARY_PLUS -> .)

    ACTION_UNARY_PLUS              shift and go to state 73

state 56

    (24) unaryExpression -> id ACTION_UNARY_ADD_OPERANDS minusMinus . ACTION_UNARY_MINUS
    (62) ACTION_UNARY_MINUS -> .

    multiply        reduce using rule 62 (ACTION_UNARY_MINUS -> .)
    divide          reduce using rule 62 (ACTION_UNARY_MINUS -> .)
    comma           reduce using rule 62 (ACTION_UNARY_MINUS -> .)
    plus            reduce using rule 62 (ACTION_UNARY_MINUS -> .)
    minus           reduce using rule 62 (ACTION_UNARY_MINUS -> .)
    semicolon       reduce using rule 62 (ACTION_UNARY_MINUS -> .)
    closeParenthesis reduce using rule 62 (ACTION_UNARY_MINUS -> .)
    greaterThan     reduce using rule 62 (ACTION_UNARY_MINUS -> .)
    lessThan        reduce using rule 62 (ACTION_UNARY_MINUS -> .)
    isEqual         reduce using rule 62 (ACTION_UNARY_MINUS -> .)
    notEqual        reduce using rule 62 (ACTION_UNARY_MINUS -> .)
    greaterOrEqual  reduce using rule 62 (ACTION_UNARY_MINUS -> .)
    lessOrEqual     reduce using rule 62 (ACTION_UNARY_MINUS -> .)
    and             reduce using rule 62 (ACTION_UNARY_MINUS -> .)
    or              reduce using rule 62 (ACTION_UNARY_MINUS -> .)

    ACTION_UNARY_MINUS             shift and go to state 74

state 57

    (10) dimentions -> openBracket value closeBracket openBracket . value closeBracket
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE

    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 33

    value                          shift and go to state 75

state 58

    (30) mainProgram -> main openParenthesis closeParenthesis openBrace subroutine . closeBrace

    closeBrace      shift and go to state 76


state 59

    (31) subroutine -> consoleWrite . openParenthesis cout closeParenthesis semicolon subroutine

    openParenthesis shift and go to state 77


state 60

    (32) subroutine -> consoleRead . openParenthesis id closeParenthesis semicolon subroutine

    openParenthesis shift and go to state 78


state 61

    (37) subroutine -> id . equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (23) unaryExpression -> id . ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> id . ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS
    (60) ACTION_UNARY_ADD_OPERANDS -> .

    equal           shift and go to state 79
    plusPlus        reduce using rule 60 (ACTION_UNARY_ADD_OPERANDS -> .)
    minusMinus      reduce using rule 60 (ACTION_UNARY_ADD_OPERANDS -> .)

    ACTION_UNARY_ADD_OPERANDS      shift and go to state 45

state 62

    (33) subroutine -> if . openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine

    openParenthesis shift and go to state 80


state 63

    (34) subroutine -> while . openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine

    openParenthesis shift and go to state 81


state 64

    (35) subroutine -> do . ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (72) ACTION_DO_WHILE_INDEX -> .

    openBrace       reduce using rule 72 (ACTION_DO_WHILE_INDEX -> .)

    ACTION_DO_WHILE_INDEX          shift and go to state 82

state 65

    (36) subroutine -> for . openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine

    openParenthesis shift and go to state 83


state 66

    (38) subroutine -> unaryExpression . semicolon subroutine

    semicolon       shift and go to state 84


state 67

    (39) subroutine -> call . id openParenthesis closeParenthesis semicolon subroutine

    id              shift and go to state 85


state 68

    (28) func -> function id openParenthesis closeParenthesis openBrace subroutine . closeBrace func

    closeBrace      shift and go to state 86


state 69

    (15) arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide . ACTION_ADD_QUADRUPLET
    (18) multiplyDivide -> multiplyDivide . multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> multiplyDivide . divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (65) ACTION_ADD_QUADRUPLET -> .

    multiply        shift and go to state 39
    divide          shift and go to state 40
    comma           reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    plus            reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    minus           reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    semicolon       reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    closeParenthesis reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    greaterThan     reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    lessThan        reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    isEqual         reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    notEqual        reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    greaterOrEqual  reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    lessOrEqual     reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    and             reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    or              reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)

    ACTION_ADD_QUADRUPLET          shift and go to state 87

state 70

    (16) arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide . ACTION_ADD_QUADRUPLET
    (18) multiplyDivide -> multiplyDivide . multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> multiplyDivide . divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (65) ACTION_ADD_QUADRUPLET -> .

    multiply        shift and go to state 39
    divide          shift and go to state 40
    comma           reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    plus            reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    minus           reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    semicolon       reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    closeParenthesis reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    greaterThan     reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    lessThan        reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    isEqual         reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    notEqual        reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    greaterOrEqual  reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    lessOrEqual     reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    and             reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    or              reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)

    ACTION_ADD_QUADRUPLET          shift and go to state 88

state 71

    (18) multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val . ACTION_ADD_QUADRUPLET
    (65) ACTION_ADD_QUADRUPLET -> .

    multiply        reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    divide          reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    comma           reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    plus            reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    minus           reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    semicolon       reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    closeParenthesis reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    greaterThan     reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    lessThan        reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    isEqual         reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    notEqual        reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    greaterOrEqual  reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    lessOrEqual     reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    and             reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    or              reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)

    ACTION_ADD_QUADRUPLET          shift and go to state 89

state 72

    (19) multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val . ACTION_ADD_QUADRUPLET
    (65) ACTION_ADD_QUADRUPLET -> .

    multiply        reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    divide          reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    comma           reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    plus            reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    minus           reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    semicolon       reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    closeParenthesis reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    greaterThan     reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    lessThan        reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    isEqual         reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    notEqual        reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    greaterOrEqual  reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    lessOrEqual     reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    and             reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    or              reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)

    ACTION_ADD_QUADRUPLET          shift and go to state 90

state 73

    (23) unaryExpression -> id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS .

    multiply        reduce using rule 23 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS .)
    divide          reduce using rule 23 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS .)
    comma           reduce using rule 23 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS .)
    plus            reduce using rule 23 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS .)
    minus           reduce using rule 23 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS .)
    semicolon       reduce using rule 23 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS .)
    closeParenthesis reduce using rule 23 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS .)
    greaterThan     reduce using rule 23 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS .)
    lessThan        reduce using rule 23 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS .)
    isEqual         reduce using rule 23 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS .)
    notEqual        reduce using rule 23 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS .)
    greaterOrEqual  reduce using rule 23 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS .)
    lessOrEqual     reduce using rule 23 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS .)
    and             reduce using rule 23 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS .)
    or              reduce using rule 23 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS .)


state 74

    (24) unaryExpression -> id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS .

    multiply        reduce using rule 24 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS .)
    divide          reduce using rule 24 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS .)
    comma           reduce using rule 24 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS .)
    plus            reduce using rule 24 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS .)
    minus           reduce using rule 24 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS .)
    semicolon       reduce using rule 24 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS .)
    closeParenthesis reduce using rule 24 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS .)
    greaterThan     reduce using rule 24 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS .)
    lessThan        reduce using rule 24 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS .)
    isEqual         reduce using rule 24 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS .)
    notEqual        reduce using rule 24 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS .)
    greaterOrEqual  reduce using rule 24 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS .)
    lessOrEqual     reduce using rule 24 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS .)
    and             reduce using rule 24 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS .)
    or              reduce using rule 24 (unaryExpression -> id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS .)


state 75

    (10) dimentions -> openBracket value closeBracket openBracket value . closeBracket

    closeBracket    shift and go to state 91


state 76

    (30) mainProgram -> main openParenthesis closeParenthesis openBrace subroutine closeBrace .

    $end            reduce using rule 30 (mainProgram -> main openParenthesis closeParenthesis openBrace subroutine closeBrace .)


state 77

    (31) subroutine -> consoleWrite openParenthesis . cout closeParenthesis semicolon subroutine
    (55) cout -> . arithmeticExpression
    (56) cout -> . string
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    string          shift and go to state 94
    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30

    cout                           shift and go to state 92
    arithmeticExpression           shift and go to state 93
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 78

    (32) subroutine -> consoleRead openParenthesis . id closeParenthesis semicolon subroutine

    id              shift and go to state 95


state 79

    (37) subroutine -> id equal . arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30

    arithmeticExpression           shift and go to state 96
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 80

    (33) subroutine -> if openParenthesis . statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (44) statement -> . arithmeticExpression
    (45) statement -> . arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET
    (46) statement -> . statement logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30

    statement                      shift and go to state 97
    arithmeticExpression           shift and go to state 98
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 81

    (34) subroutine -> while openParenthesis . statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (44) statement -> . arithmeticExpression
    (45) statement -> . arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET
    (46) statement -> . statement logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30

    statement                      shift and go to state 99
    arithmeticExpression           shift and go to state 98
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 82

    (35) subroutine -> do ACTION_DO_WHILE_INDEX . openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine

    openBrace       shift and go to state 100


state 83

    (36) subroutine -> for openParenthesis . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine

    id              shift and go to state 101


state 84

    (38) subroutine -> unaryExpression semicolon . subroutine
    (31) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (32) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (33) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (34) subroutine -> . while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (35) subroutine -> . do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (36) subroutine -> . for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (37) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    consoleWrite    shift and go to state 59
    consoleRead     shift and go to state 60
    if              shift and go to state 62
    while           shift and go to state 63
    do              shift and go to state 64
    for             shift and go to state 65
    id              shift and go to state 61
    call            shift and go to state 67
    closeBrace      reduce using rule 40 (subroutine -> .)

    unaryExpression                shift and go to state 66
    subroutine                     shift and go to state 102

state 85

    (39) subroutine -> call id . openParenthesis closeParenthesis semicolon subroutine

    openParenthesis shift and go to state 103


state 86

    (28) func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace . func
    (28) func -> . function id openParenthesis closeParenthesis openBrace subroutine closeBrace func
    (29) func -> .

    function        shift and go to state 7
    main            reduce using rule 29 (func -> .)

    func                           shift and go to state 104

state 87

    (15) arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .

    comma           reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    plus            reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    minus           reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    semicolon       reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    closeParenthesis reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    greaterThan     reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    lessThan        reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    isEqual         reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    notEqual        reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    greaterOrEqual  reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    lessOrEqual     reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)


state 88

    (16) arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .

    comma           reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    plus            reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    minus           reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    semicolon       reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    closeParenthesis reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    greaterThan     reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    lessThan        reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    isEqual         reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    notEqual        reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    greaterOrEqual  reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    lessOrEqual     reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET .)


state 89

    (18) multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .

    multiply        reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    divide          reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    comma           reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    plus            reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    minus           reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    semicolon       reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    closeParenthesis reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    greaterThan     reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    lessThan        reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    isEqual         reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    notEqual        reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    greaterOrEqual  reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    lessOrEqual     reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 18 (multiplyDivide -> multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)


state 90

    (19) multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .

    multiply        reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    divide          reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    comma           reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    plus            reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    minus           reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    semicolon       reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    closeParenthesis reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    greaterThan     reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    lessThan        reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    isEqual         reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    notEqual        reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    greaterOrEqual  reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    lessOrEqual     reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 19 (multiplyDivide -> multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET .)


state 91

    (10) dimentions -> openBracket value closeBracket openBracket value closeBracket .

    equal           reduce using rule 10 (dimentions -> openBracket value closeBracket openBracket value closeBracket .)
    comma           reduce using rule 10 (dimentions -> openBracket value closeBracket openBracket value closeBracket .)
    semicolon       reduce using rule 10 (dimentions -> openBracket value closeBracket openBracket value closeBracket .)


state 92

    (31) subroutine -> consoleWrite openParenthesis cout . closeParenthesis semicolon subroutine

    closeParenthesis shift and go to state 105


state 93

    (55) cout -> arithmeticExpression .
    (15) arithmeticExpression -> arithmeticExpression . plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> arithmeticExpression . minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET

    closeParenthesis reduce using rule 55 (cout -> arithmeticExpression .)
    plus            shift and go to state 37
    minus           shift and go to state 38


state 94

    (56) cout -> string .

    closeParenthesis reduce using rule 56 (cout -> string .)


state 95

    (32) subroutine -> consoleRead openParenthesis id . closeParenthesis semicolon subroutine

    closeParenthesis shift and go to state 106


state 96

    (37) subroutine -> id equal arithmeticExpression . ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (15) arithmeticExpression -> arithmeticExpression . plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> arithmeticExpression . minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (64) ACTION_GENERATE_QUADRUPLET -> .

    plus            shift and go to state 37
    minus           shift and go to state 38
    semicolon       reduce using rule 64 (ACTION_GENERATE_QUADRUPLET -> .)

    ACTION_GENERATE_QUADRUPLET     shift and go to state 107

state 97

    (33) subroutine -> if openParenthesis statement . closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (46) statement -> statement . logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET
    (47) logicExpression -> . greaterThan
    (48) logicExpression -> . lessThan
    (49) logicExpression -> . isEqual
    (50) logicExpression -> . notEqual
    (51) logicExpression -> . greaterOrEqual
    (52) logicExpression -> . lessOrEqual
    (53) logicExpression -> . and
    (54) logicExpression -> . or

    closeParenthesis shift and go to state 108
    greaterThan     shift and go to state 110
    lessThan        shift and go to state 111
    isEqual         shift and go to state 112
    notEqual        shift and go to state 113
    greaterOrEqual  shift and go to state 114
    lessOrEqual     shift and go to state 115
    and             shift and go to state 116
    or              shift and go to state 117

    logicExpression                shift and go to state 109

state 98

    (44) statement -> arithmeticExpression .
    (45) statement -> arithmeticExpression . logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET
    (15) arithmeticExpression -> arithmeticExpression . plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> arithmeticExpression . minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (47) logicExpression -> . greaterThan
    (48) logicExpression -> . lessThan
    (49) logicExpression -> . isEqual
    (50) logicExpression -> . notEqual
    (51) logicExpression -> . greaterOrEqual
    (52) logicExpression -> . lessOrEqual
    (53) logicExpression -> . and
    (54) logicExpression -> . or

  ! shift/reduce conflict for greaterThan resolved as shift
  ! shift/reduce conflict for lessThan resolved as shift
  ! shift/reduce conflict for isEqual resolved as shift
  ! shift/reduce conflict for notEqual resolved as shift
  ! shift/reduce conflict for greaterOrEqual resolved as shift
  ! shift/reduce conflict for lessOrEqual resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    closeParenthesis reduce using rule 44 (statement -> arithmeticExpression .)
    semicolon       reduce using rule 44 (statement -> arithmeticExpression .)
    plus            shift and go to state 37
    minus           shift and go to state 38
    greaterThan     shift and go to state 110
    lessThan        shift and go to state 111
    isEqual         shift and go to state 112
    notEqual        shift and go to state 113
    greaterOrEqual  shift and go to state 114
    lessOrEqual     shift and go to state 115
    and             shift and go to state 116
    or              shift and go to state 117

  ! greaterThan     [ reduce using rule 44 (statement -> arithmeticExpression .) ]
  ! lessThan        [ reduce using rule 44 (statement -> arithmeticExpression .) ]
  ! isEqual         [ reduce using rule 44 (statement -> arithmeticExpression .) ]
  ! notEqual        [ reduce using rule 44 (statement -> arithmeticExpression .) ]
  ! greaterOrEqual  [ reduce using rule 44 (statement -> arithmeticExpression .) ]
  ! lessOrEqual     [ reduce using rule 44 (statement -> arithmeticExpression .) ]
  ! and             [ reduce using rule 44 (statement -> arithmeticExpression .) ]
  ! or              [ reduce using rule 44 (statement -> arithmeticExpression .) ]

    logicExpression                shift and go to state 118

state 99

    (34) subroutine -> while openParenthesis statement . closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (46) statement -> statement . logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET
    (47) logicExpression -> . greaterThan
    (48) logicExpression -> . lessThan
    (49) logicExpression -> . isEqual
    (50) logicExpression -> . notEqual
    (51) logicExpression -> . greaterOrEqual
    (52) logicExpression -> . lessOrEqual
    (53) logicExpression -> . and
    (54) logicExpression -> . or

    closeParenthesis shift and go to state 119
    greaterThan     shift and go to state 110
    lessThan        shift and go to state 111
    isEqual         shift and go to state 112
    notEqual        shift and go to state 113
    greaterOrEqual  shift and go to state 114
    lessOrEqual     shift and go to state 115
    and             shift and go to state 116
    or              shift and go to state 117

    logicExpression                shift and go to state 109

state 100

    (35) subroutine -> do ACTION_DO_WHILE_INDEX openBrace . subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (31) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (32) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (33) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (34) subroutine -> . while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (35) subroutine -> . do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (36) subroutine -> . for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (37) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    consoleWrite    shift and go to state 59
    consoleRead     shift and go to state 60
    if              shift and go to state 62
    while           shift and go to state 63
    do              shift and go to state 64
    for             shift and go to state 65
    id              shift and go to state 61
    call            shift and go to state 67
    closeBrace      reduce using rule 40 (subroutine -> .)

    subroutine                     shift and go to state 120
    unaryExpression                shift and go to state 66

state 101

    (36) subroutine -> for openParenthesis id . equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine

    equal           shift and go to state 121


state 102

    (38) subroutine -> unaryExpression semicolon subroutine .

    closeBrace      reduce using rule 38 (subroutine -> unaryExpression semicolon subroutine .)


state 103

    (39) subroutine -> call id openParenthesis . closeParenthesis semicolon subroutine

    closeParenthesis shift and go to state 122


state 104

    (28) func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace func .

    main            reduce using rule 28 (func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace func .)


state 105

    (31) subroutine -> consoleWrite openParenthesis cout closeParenthesis . semicolon subroutine

    semicolon       shift and go to state 123


state 106

    (32) subroutine -> consoleRead openParenthesis id closeParenthesis . semicolon subroutine

    semicolon       shift and go to state 124


state 107

    (37) subroutine -> id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET . semicolon subroutine

    semicolon       shift and go to state 125


state 108

    (33) subroutine -> if openParenthesis statement closeParenthesis . ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (66) ACTION_QUADRUPLET_EMPTY_JUMP -> .

    openBrace       reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP -> .)

    ACTION_QUADRUPLET_EMPTY_JUMP   shift and go to state 126

state 109

    (46) statement -> statement logicExpression . ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET
    (63) ACTION_ADD_OPERATOR -> .

    openParenthesis reduce using rule 63 (ACTION_ADD_OPERATOR -> .)
    intValue        reduce using rule 63 (ACTION_ADD_OPERATOR -> .)
    doubleValue     reduce using rule 63 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 63 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 127

state 110

    (47) logicExpression -> greaterThan .

    openParenthesis reduce using rule 47 (logicExpression -> greaterThan .)
    intValue        reduce using rule 47 (logicExpression -> greaterThan .)
    doubleValue     reduce using rule 47 (logicExpression -> greaterThan .)
    id              reduce using rule 47 (logicExpression -> greaterThan .)


state 111

    (48) logicExpression -> lessThan .

    openParenthesis reduce using rule 48 (logicExpression -> lessThan .)
    intValue        reduce using rule 48 (logicExpression -> lessThan .)
    doubleValue     reduce using rule 48 (logicExpression -> lessThan .)
    id              reduce using rule 48 (logicExpression -> lessThan .)


state 112

    (49) logicExpression -> isEqual .

    openParenthesis reduce using rule 49 (logicExpression -> isEqual .)
    intValue        reduce using rule 49 (logicExpression -> isEqual .)
    doubleValue     reduce using rule 49 (logicExpression -> isEqual .)
    id              reduce using rule 49 (logicExpression -> isEqual .)


state 113

    (50) logicExpression -> notEqual .

    openParenthesis reduce using rule 50 (logicExpression -> notEqual .)
    intValue        reduce using rule 50 (logicExpression -> notEqual .)
    doubleValue     reduce using rule 50 (logicExpression -> notEqual .)
    id              reduce using rule 50 (logicExpression -> notEqual .)


state 114

    (51) logicExpression -> greaterOrEqual .

    openParenthesis reduce using rule 51 (logicExpression -> greaterOrEqual .)
    intValue        reduce using rule 51 (logicExpression -> greaterOrEqual .)
    doubleValue     reduce using rule 51 (logicExpression -> greaterOrEqual .)
    id              reduce using rule 51 (logicExpression -> greaterOrEqual .)


state 115

    (52) logicExpression -> lessOrEqual .

    openParenthesis reduce using rule 52 (logicExpression -> lessOrEqual .)
    intValue        reduce using rule 52 (logicExpression -> lessOrEqual .)
    doubleValue     reduce using rule 52 (logicExpression -> lessOrEqual .)
    id              reduce using rule 52 (logicExpression -> lessOrEqual .)


state 116

    (53) logicExpression -> and .

    openParenthesis reduce using rule 53 (logicExpression -> and .)
    intValue        reduce using rule 53 (logicExpression -> and .)
    doubleValue     reduce using rule 53 (logicExpression -> and .)
    id              reduce using rule 53 (logicExpression -> and .)


state 117

    (54) logicExpression -> or .

    openParenthesis reduce using rule 54 (logicExpression -> or .)
    intValue        reduce using rule 54 (logicExpression -> or .)
    doubleValue     reduce using rule 54 (logicExpression -> or .)
    id              reduce using rule 54 (logicExpression -> or .)


state 118

    (45) statement -> arithmeticExpression logicExpression . ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET
    (63) ACTION_ADD_OPERATOR -> .

    openParenthesis reduce using rule 63 (ACTION_ADD_OPERATOR -> .)
    intValue        reduce using rule 63 (ACTION_ADD_OPERATOR -> .)
    doubleValue     reduce using rule 63 (ACTION_ADD_OPERATOR -> .)
    id              reduce using rule 63 (ACTION_ADD_OPERATOR -> .)

    ACTION_ADD_OPERATOR            shift and go to state 128

state 119

    (34) subroutine -> while openParenthesis statement closeParenthesis . ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (66) ACTION_QUADRUPLET_EMPTY_JUMP -> .

    openBrace       reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP -> .)

    ACTION_QUADRUPLET_EMPTY_JUMP   shift and go to state 129

state 120

    (35) subroutine -> do ACTION_DO_WHILE_INDEX openBrace subroutine . closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine

    closeBrace      shift and go to state 130


state 121

    (36) subroutine -> for openParenthesis id equal . arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30

    arithmeticExpression           shift and go to state 131
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 122

    (39) subroutine -> call id openParenthesis closeParenthesis . semicolon subroutine

    semicolon       shift and go to state 132


state 123

    (31) subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon . subroutine
    (31) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (32) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (33) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (34) subroutine -> . while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (35) subroutine -> . do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (36) subroutine -> . for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (37) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    consoleWrite    shift and go to state 59
    consoleRead     shift and go to state 60
    if              shift and go to state 62
    while           shift and go to state 63
    do              shift and go to state 64
    for             shift and go to state 65
    id              shift and go to state 61
    call            shift and go to state 67
    closeBrace      reduce using rule 40 (subroutine -> .)

    subroutine                     shift and go to state 133
    unaryExpression                shift and go to state 66

state 124

    (32) subroutine -> consoleRead openParenthesis id closeParenthesis semicolon . subroutine
    (31) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (32) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (33) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (34) subroutine -> . while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (35) subroutine -> . do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (36) subroutine -> . for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (37) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    consoleWrite    shift and go to state 59
    consoleRead     shift and go to state 60
    if              shift and go to state 62
    while           shift and go to state 63
    do              shift and go to state 64
    for             shift and go to state 65
    id              shift and go to state 61
    call            shift and go to state 67
    closeBrace      reduce using rule 40 (subroutine -> .)

    subroutine                     shift and go to state 134
    unaryExpression                shift and go to state 66

state 125

    (37) subroutine -> id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon . subroutine
    (31) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (32) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (33) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (34) subroutine -> . while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (35) subroutine -> . do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (36) subroutine -> . for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (37) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    consoleWrite    shift and go to state 59
    consoleRead     shift and go to state 60
    if              shift and go to state 62
    while           shift and go to state 63
    do              shift and go to state 64
    for             shift and go to state 65
    id              shift and go to state 61
    call            shift and go to state 67
    closeBrace      reduce using rule 40 (subroutine -> .)

    subroutine                     shift and go to state 135
    unaryExpression                shift and go to state 66

state 126

    (33) subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP . openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine

    openBrace       shift and go to state 136


state 127

    (46) statement -> statement logicExpression ACTION_ADD_OPERATOR . statement ACTION_ADD_QUADRUPLET
    (44) statement -> . arithmeticExpression
    (45) statement -> . arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET
    (46) statement -> . statement logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30

    statement                      shift and go to state 137
    arithmeticExpression           shift and go to state 98
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 128

    (45) statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR . arithmeticExpression ACTION_ADD_QUADRUPLET
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30

    arithmeticExpression           shift and go to state 138
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 129

    (34) subroutine -> while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP . openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine

    openBrace       shift and go to state 139


state 130

    (35) subroutine -> do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace . while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine

    while           shift and go to state 140


state 131

    (36) subroutine -> for openParenthesis id equal arithmeticExpression . ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (15) arithmeticExpression -> arithmeticExpression . plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> arithmeticExpression . minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (64) ACTION_GENERATE_QUADRUPLET -> .

    plus            shift and go to state 37
    minus           shift and go to state 38
    semicolon       reduce using rule 64 (ACTION_GENERATE_QUADRUPLET -> .)

    ACTION_GENERATE_QUADRUPLET     shift and go to state 141

state 132

    (39) subroutine -> call id openParenthesis closeParenthesis semicolon . subroutine
    (31) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (32) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (33) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (34) subroutine -> . while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (35) subroutine -> . do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (36) subroutine -> . for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (37) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    consoleWrite    shift and go to state 59
    consoleRead     shift and go to state 60
    if              shift and go to state 62
    while           shift and go to state 63
    do              shift and go to state 64
    for             shift and go to state 65
    id              shift and go to state 61
    call            shift and go to state 67
    closeBrace      reduce using rule 40 (subroutine -> .)

    subroutine                     shift and go to state 142
    unaryExpression                shift and go to state 66

state 133

    (31) subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon subroutine .

    closeBrace      reduce using rule 31 (subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon subroutine .)


state 134

    (32) subroutine -> consoleRead openParenthesis id closeParenthesis semicolon subroutine .

    closeBrace      reduce using rule 32 (subroutine -> consoleRead openParenthesis id closeParenthesis semicolon subroutine .)


state 135

    (37) subroutine -> id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine .

    closeBrace      reduce using rule 37 (subroutine -> id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine .)


state 136

    (33) subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace . subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (31) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (32) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (33) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (34) subroutine -> . while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (35) subroutine -> . do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (36) subroutine -> . for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (37) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    consoleWrite    shift and go to state 59
    consoleRead     shift and go to state 60
    if              shift and go to state 62
    while           shift and go to state 63
    do              shift and go to state 64
    for             shift and go to state 65
    id              shift and go to state 61
    call            shift and go to state 67
    closeBrace      reduce using rule 40 (subroutine -> .)

    subroutine                     shift and go to state 143
    unaryExpression                shift and go to state 66

state 137

    (46) statement -> statement logicExpression ACTION_ADD_OPERATOR statement . ACTION_ADD_QUADRUPLET
    (46) statement -> statement . logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET
    (65) ACTION_ADD_QUADRUPLET -> .
    (47) logicExpression -> . greaterThan
    (48) logicExpression -> . lessThan
    (49) logicExpression -> . isEqual
    (50) logicExpression -> . notEqual
    (51) logicExpression -> . greaterOrEqual
    (52) logicExpression -> . lessOrEqual
    (53) logicExpression -> . and
    (54) logicExpression -> . or

  ! shift/reduce conflict for greaterThan resolved as shift
  ! shift/reduce conflict for lessThan resolved as shift
  ! shift/reduce conflict for isEqual resolved as shift
  ! shift/reduce conflict for notEqual resolved as shift
  ! shift/reduce conflict for greaterOrEqual resolved as shift
  ! shift/reduce conflict for lessOrEqual resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    closeParenthesis reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    semicolon       reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    greaterThan     shift and go to state 110
    lessThan        shift and go to state 111
    isEqual         shift and go to state 112
    notEqual        shift and go to state 113
    greaterOrEqual  shift and go to state 114
    lessOrEqual     shift and go to state 115
    and             shift and go to state 116
    or              shift and go to state 117

  ! greaterThan     [ reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .) ]
  ! lessThan        [ reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .) ]
  ! isEqual         [ reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .) ]
  ! notEqual        [ reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .) ]
  ! greaterOrEqual  [ reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .) ]
  ! lessOrEqual     [ reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .) ]
  ! and             [ reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .) ]
  ! or              [ reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .) ]

    logicExpression                shift and go to state 109
    ACTION_ADD_QUADRUPLET          shift and go to state 144

state 138

    (45) statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression . ACTION_ADD_QUADRUPLET
    (15) arithmeticExpression -> arithmeticExpression . plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> arithmeticExpression . minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (65) ACTION_ADD_QUADRUPLET -> .

    plus            shift and go to state 37
    minus           shift and go to state 38
    closeParenthesis reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    greaterThan     reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    lessThan        reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    isEqual         reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    notEqual        reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    greaterOrEqual  reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    lessOrEqual     reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    and             reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    or              reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)
    semicolon       reduce using rule 65 (ACTION_ADD_QUADRUPLET -> .)

    ACTION_ADD_QUADRUPLET          shift and go to state 145

state 139

    (34) subroutine -> while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace . subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (31) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (32) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (33) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (34) subroutine -> . while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (35) subroutine -> . do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (36) subroutine -> . for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (37) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    consoleWrite    shift and go to state 59
    consoleRead     shift and go to state 60
    if              shift and go to state 62
    while           shift and go to state 63
    do              shift and go to state 64
    for             shift and go to state 65
    id              shift and go to state 61
    call            shift and go to state 67
    closeBrace      reduce using rule 40 (subroutine -> .)

    subroutine                     shift and go to state 146
    unaryExpression                shift and go to state 66

state 140

    (35) subroutine -> do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while . openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine

    openParenthesis shift and go to state 147


state 141

    (36) subroutine -> for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET . semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine

    semicolon       shift and go to state 148


state 142

    (39) subroutine -> call id openParenthesis closeParenthesis semicolon subroutine .

    closeBrace      reduce using rule 39 (subroutine -> call id openParenthesis closeParenthesis semicolon subroutine .)


state 143

    (33) subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine . closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine

    closeBrace      shift and go to state 149


state 144

    (46) statement -> statement logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET .

    closeParenthesis reduce using rule 46 (statement -> statement logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET .)
    greaterThan     reduce using rule 46 (statement -> statement logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET .)
    lessThan        reduce using rule 46 (statement -> statement logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET .)
    isEqual         reduce using rule 46 (statement -> statement logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET .)
    notEqual        reduce using rule 46 (statement -> statement logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET .)
    greaterOrEqual  reduce using rule 46 (statement -> statement logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET .)
    lessOrEqual     reduce using rule 46 (statement -> statement logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 46 (statement -> statement logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 46 (statement -> statement logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET .)
    semicolon       reduce using rule 46 (statement -> statement logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET .)


state 145

    (45) statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .

    closeParenthesis reduce using rule 45 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)
    greaterThan     reduce using rule 45 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)
    lessThan        reduce using rule 45 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)
    isEqual         reduce using rule 45 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)
    notEqual        reduce using rule 45 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)
    greaterOrEqual  reduce using rule 45 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)
    lessOrEqual     reduce using rule 45 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)
    and             reduce using rule 45 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)
    or              reduce using rule 45 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)
    semicolon       reduce using rule 45 (statement -> arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET .)


state 146

    (34) subroutine -> while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine . closeBrace ACTION_WHILE_GOTO subroutine

    closeBrace      shift and go to state 150


state 147

    (35) subroutine -> do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis . statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (44) statement -> . arithmeticExpression
    (45) statement -> . arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET
    (46) statement -> . statement logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30

    statement                      shift and go to state 151
    arithmeticExpression           shift and go to state 98
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 148

    (36) subroutine -> for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon . statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (44) statement -> . arithmeticExpression
    (45) statement -> . arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET
    (46) statement -> . statement logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30

    arithmeticExpression           shift and go to state 98
    statement                      shift and go to state 152
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 149

    (33) subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace . ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (67) ACTION_NEW_IF -> .

    elif            reduce using rule 67 (ACTION_NEW_IF -> .)
    else            reduce using rule 67 (ACTION_NEW_IF -> .)
    consoleWrite    reduce using rule 67 (ACTION_NEW_IF -> .)
    consoleRead     reduce using rule 67 (ACTION_NEW_IF -> .)
    if              reduce using rule 67 (ACTION_NEW_IF -> .)
    while           reduce using rule 67 (ACTION_NEW_IF -> .)
    do              reduce using rule 67 (ACTION_NEW_IF -> .)
    for             reduce using rule 67 (ACTION_NEW_IF -> .)
    id              reduce using rule 67 (ACTION_NEW_IF -> .)
    call            reduce using rule 67 (ACTION_NEW_IF -> .)
    closeBrace      reduce using rule 67 (ACTION_NEW_IF -> .)

    ACTION_NEW_IF                  shift and go to state 153

state 150

    (34) subroutine -> while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace . ACTION_WHILE_GOTO subroutine
    (71) ACTION_WHILE_GOTO -> .

    consoleWrite    reduce using rule 71 (ACTION_WHILE_GOTO -> .)
    consoleRead     reduce using rule 71 (ACTION_WHILE_GOTO -> .)
    if              reduce using rule 71 (ACTION_WHILE_GOTO -> .)
    while           reduce using rule 71 (ACTION_WHILE_GOTO -> .)
    do              reduce using rule 71 (ACTION_WHILE_GOTO -> .)
    for             reduce using rule 71 (ACTION_WHILE_GOTO -> .)
    id              reduce using rule 71 (ACTION_WHILE_GOTO -> .)
    call            reduce using rule 71 (ACTION_WHILE_GOTO -> .)
    closeBrace      reduce using rule 71 (ACTION_WHILE_GOTO -> .)

    ACTION_WHILE_GOTO              shift and go to state 154

state 151

    (35) subroutine -> do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement . closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (46) statement -> statement . logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET
    (47) logicExpression -> . greaterThan
    (48) logicExpression -> . lessThan
    (49) logicExpression -> . isEqual
    (50) logicExpression -> . notEqual
    (51) logicExpression -> . greaterOrEqual
    (52) logicExpression -> . lessOrEqual
    (53) logicExpression -> . and
    (54) logicExpression -> . or

    closeParenthesis shift and go to state 155
    greaterThan     shift and go to state 110
    lessThan        shift and go to state 111
    isEqual         shift and go to state 112
    notEqual        shift and go to state 113
    greaterOrEqual  shift and go to state 114
    lessOrEqual     shift and go to state 115
    and             shift and go to state 116
    or              shift and go to state 117

    logicExpression                shift and go to state 109

state 152

    (36) subroutine -> for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement . semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (46) statement -> statement . logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET
    (47) logicExpression -> . greaterThan
    (48) logicExpression -> . lessThan
    (49) logicExpression -> . isEqual
    (50) logicExpression -> . notEqual
    (51) logicExpression -> . greaterOrEqual
    (52) logicExpression -> . lessOrEqual
    (53) logicExpression -> . and
    (54) logicExpression -> . or

    semicolon       shift and go to state 156
    greaterThan     shift and go to state 110
    lessThan        shift and go to state 111
    isEqual         shift and go to state 112
    notEqual        shift and go to state 113
    greaterOrEqual  shift and go to state 114
    lessOrEqual     shift and go to state 115
    and             shift and go to state 116
    or              shift and go to state 117

    logicExpression                shift and go to state 109

state 153

    (33) subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF . ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (68) ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .

    elif            reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    else            reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    consoleWrite    reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    consoleRead     reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    if              reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    while           reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    do              reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    for             reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    id              reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    call            reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    closeBrace      reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)

    ACTION_QUADRUPLET_EMPTY_JUMP_END_IF shift and go to state 157

state 154

    (34) subroutine -> while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO . subroutine
    (31) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (32) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (33) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (34) subroutine -> . while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (35) subroutine -> . do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (36) subroutine -> . for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (37) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    consoleWrite    shift and go to state 59
    consoleRead     shift and go to state 60
    if              shift and go to state 62
    while           shift and go to state 63
    do              shift and go to state 64
    for             shift and go to state 65
    id              shift and go to state 61
    call            shift and go to state 67
    closeBrace      reduce using rule 40 (subroutine -> .)

    subroutine                     shift and go to state 158
    unaryExpression                shift and go to state 66

state 155

    (35) subroutine -> do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis . ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (73) ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .

    semicolon       reduce using rule 73 (ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE -> .)

    ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE shift and go to state 159

state 156

    (36) subroutine -> for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon . ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (66) ACTION_QUADRUPLET_EMPTY_JUMP -> .

    openParenthesis reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP -> .)
    intValue        reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP -> .)
    doubleValue     reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP -> .)
    id              reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP -> .)

    ACTION_QUADRUPLET_EMPTY_JUMP   shift and go to state 160

state 157

    (33) subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF . elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (41) elseStatement -> . elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement
    (42) elseStatement -> . else ACTION_FILL_JUMP openBrace subroutine closeBrace
    (43) elseStatement -> . ACTION_FILL_JUMP
    (70) ACTION_FILL_JUMP -> .

    elif            shift and go to state 162
    else            shift and go to state 164
    consoleWrite    reduce using rule 70 (ACTION_FILL_JUMP -> .)
    consoleRead     reduce using rule 70 (ACTION_FILL_JUMP -> .)
    if              reduce using rule 70 (ACTION_FILL_JUMP -> .)
    while           reduce using rule 70 (ACTION_FILL_JUMP -> .)
    do              reduce using rule 70 (ACTION_FILL_JUMP -> .)
    for             reduce using rule 70 (ACTION_FILL_JUMP -> .)
    id              reduce using rule 70 (ACTION_FILL_JUMP -> .)
    call            reduce using rule 70 (ACTION_FILL_JUMP -> .)
    closeBrace      reduce using rule 70 (ACTION_FILL_JUMP -> .)

    elseStatement                  shift and go to state 161
    ACTION_FILL_JUMP               shift and go to state 163

state 158

    (34) subroutine -> while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine .

    closeBrace      reduce using rule 34 (subroutine -> while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine .)


state 159

    (35) subroutine -> do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE . semicolon subroutine

    semicolon       shift and go to state 165


state 160

    (36) subroutine -> for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP . arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30

    arithmeticExpression           shift and go to state 166
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 161

    (33) subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement . ACTION_FILL_JUMP_END_IF subroutine
    (69) ACTION_FILL_JUMP_END_IF -> .

    consoleWrite    reduce using rule 69 (ACTION_FILL_JUMP_END_IF -> .)
    consoleRead     reduce using rule 69 (ACTION_FILL_JUMP_END_IF -> .)
    if              reduce using rule 69 (ACTION_FILL_JUMP_END_IF -> .)
    while           reduce using rule 69 (ACTION_FILL_JUMP_END_IF -> .)
    do              reduce using rule 69 (ACTION_FILL_JUMP_END_IF -> .)
    for             reduce using rule 69 (ACTION_FILL_JUMP_END_IF -> .)
    id              reduce using rule 69 (ACTION_FILL_JUMP_END_IF -> .)
    call            reduce using rule 69 (ACTION_FILL_JUMP_END_IF -> .)
    closeBrace      reduce using rule 69 (ACTION_FILL_JUMP_END_IF -> .)

    ACTION_FILL_JUMP_END_IF        shift and go to state 167

state 162

    (41) elseStatement -> elif . ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement
    (70) ACTION_FILL_JUMP -> .

    openParenthesis reduce using rule 70 (ACTION_FILL_JUMP -> .)

    ACTION_FILL_JUMP               shift and go to state 168

state 163

    (43) elseStatement -> ACTION_FILL_JUMP .

    consoleWrite    reduce using rule 43 (elseStatement -> ACTION_FILL_JUMP .)
    consoleRead     reduce using rule 43 (elseStatement -> ACTION_FILL_JUMP .)
    if              reduce using rule 43 (elseStatement -> ACTION_FILL_JUMP .)
    while           reduce using rule 43 (elseStatement -> ACTION_FILL_JUMP .)
    do              reduce using rule 43 (elseStatement -> ACTION_FILL_JUMP .)
    for             reduce using rule 43 (elseStatement -> ACTION_FILL_JUMP .)
    id              reduce using rule 43 (elseStatement -> ACTION_FILL_JUMP .)
    call            reduce using rule 43 (elseStatement -> ACTION_FILL_JUMP .)
    closeBrace      reduce using rule 43 (elseStatement -> ACTION_FILL_JUMP .)


state 164

    (42) elseStatement -> else . ACTION_FILL_JUMP openBrace subroutine closeBrace
    (70) ACTION_FILL_JUMP -> .

    openBrace       reduce using rule 70 (ACTION_FILL_JUMP -> .)

    ACTION_FILL_JUMP               shift and go to state 169

state 165

    (35) subroutine -> do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon . subroutine
    (31) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (32) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (33) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (34) subroutine -> . while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (35) subroutine -> . do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (36) subroutine -> . for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (37) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    consoleWrite    shift and go to state 59
    consoleRead     shift and go to state 60
    if              shift and go to state 62
    while           shift and go to state 63
    do              shift and go to state 64
    for             shift and go to state 65
    id              shift and go to state 61
    call            shift and go to state 67
    closeBrace      reduce using rule 40 (subroutine -> .)

    subroutine                     shift and go to state 170
    unaryExpression                shift and go to state 66

state 166

    (36) subroutine -> for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression . closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (15) arithmeticExpression -> arithmeticExpression . plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> arithmeticExpression . minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET

    closeParenthesis shift and go to state 171
    plus            shift and go to state 37
    minus           shift and go to state 38


state 167

    (33) subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF . subroutine
    (31) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (32) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (33) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (34) subroutine -> . while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (35) subroutine -> . do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (36) subroutine -> . for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (37) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    consoleWrite    shift and go to state 59
    consoleRead     shift and go to state 60
    if              shift and go to state 62
    while           shift and go to state 63
    do              shift and go to state 64
    for             shift and go to state 65
    id              shift and go to state 61
    call            shift and go to state 67
    closeBrace      reduce using rule 40 (subroutine -> .)

    subroutine                     shift and go to state 172
    unaryExpression                shift and go to state 66

state 168

    (41) elseStatement -> elif ACTION_FILL_JUMP . openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement

    openParenthesis shift and go to state 173


state 169

    (42) elseStatement -> else ACTION_FILL_JUMP . openBrace subroutine closeBrace

    openBrace       shift and go to state 174


state 170

    (35) subroutine -> do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine .

    closeBrace      reduce using rule 35 (subroutine -> do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine .)


state 171

    (36) subroutine -> for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis . openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine

    openBrace       shift and go to state 175


state 172

    (33) subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine .

    closeBrace      reduce using rule 33 (subroutine -> if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine .)


state 173

    (41) elseStatement -> elif ACTION_FILL_JUMP openParenthesis . statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement
    (44) statement -> . arithmeticExpression
    (45) statement -> . arithmeticExpression logicExpression ACTION_ADD_OPERATOR arithmeticExpression ACTION_ADD_QUADRUPLET
    (46) statement -> . statement logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (16) arithmeticExpression -> . arithmeticExpression minus ACTION_ADD_OPERATOR multiplyDivide ACTION_ADD_QUADRUPLET
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (19) multiplyDivide -> . multiplyDivide divide ACTION_ADD_OPERATOR val ACTION_ADD_QUADRUPLET
    (20) val -> . value
    (21) val -> . unaryExpression
    (22) val -> . openParenthesis arithmeticExpression closeParenthesis
    (25) value -> . intValue ACTION_INT_VALUE
    (26) value -> . doubleValue ACTION_DOUBLE_VALUE
    (27) value -> . id ACTION_VAR_VALUE
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    openParenthesis shift and go to state 27
    intValue        shift and go to state 28
    doubleValue     shift and go to state 29
    id              shift and go to state 30

    statement                      shift and go to state 176
    arithmeticExpression           shift and go to state 98
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25
    unaryExpression                shift and go to state 26

state 174

    (42) elseStatement -> else ACTION_FILL_JUMP openBrace . subroutine closeBrace
    (31) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (32) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (33) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (34) subroutine -> . while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (35) subroutine -> . do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (36) subroutine -> . for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (37) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    consoleWrite    shift and go to state 59
    consoleRead     shift and go to state 60
    if              shift and go to state 62
    while           shift and go to state 63
    do              shift and go to state 64
    for             shift and go to state 65
    id              shift and go to state 61
    call            shift and go to state 67
    closeBrace      reduce using rule 40 (subroutine -> .)

    subroutine                     shift and go to state 177
    unaryExpression                shift and go to state 66

state 175

    (36) subroutine -> for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace . subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (31) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (32) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (33) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (34) subroutine -> . while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (35) subroutine -> . do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (36) subroutine -> . for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (37) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    consoleWrite    shift and go to state 59
    consoleRead     shift and go to state 60
    if              shift and go to state 62
    while           shift and go to state 63
    do              shift and go to state 64
    for             shift and go to state 65
    id              shift and go to state 61
    call            shift and go to state 67
    closeBrace      reduce using rule 40 (subroutine -> .)

    subroutine                     shift and go to state 178
    unaryExpression                shift and go to state 66

state 176

    (41) elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement . closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement
    (46) statement -> statement . logicExpression ACTION_ADD_OPERATOR statement ACTION_ADD_QUADRUPLET
    (47) logicExpression -> . greaterThan
    (48) logicExpression -> . lessThan
    (49) logicExpression -> . isEqual
    (50) logicExpression -> . notEqual
    (51) logicExpression -> . greaterOrEqual
    (52) logicExpression -> . lessOrEqual
    (53) logicExpression -> . and
    (54) logicExpression -> . or

    closeParenthesis shift and go to state 179
    greaterThan     shift and go to state 110
    lessThan        shift and go to state 111
    isEqual         shift and go to state 112
    notEqual        shift and go to state 113
    greaterOrEqual  shift and go to state 114
    lessOrEqual     shift and go to state 115
    and             shift and go to state 116
    or              shift and go to state 117

    logicExpression                shift and go to state 109

state 177

    (42) elseStatement -> else ACTION_FILL_JUMP openBrace subroutine . closeBrace

    closeBrace      shift and go to state 180


state 178

    (36) subroutine -> for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine . closeBrace ACTION_WHILE_GOTO subroutine

    closeBrace      shift and go to state 181


state 179

    (41) elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis . ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement
    (66) ACTION_QUADRUPLET_EMPTY_JUMP -> .

    openBrace       reduce using rule 66 (ACTION_QUADRUPLET_EMPTY_JUMP -> .)

    ACTION_QUADRUPLET_EMPTY_JUMP   shift and go to state 182

state 180

    (42) elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .

    consoleWrite    reduce using rule 42 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)
    consoleRead     reduce using rule 42 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)
    if              reduce using rule 42 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)
    while           reduce using rule 42 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)
    do              reduce using rule 42 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)
    for             reduce using rule 42 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)
    id              reduce using rule 42 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)
    call            reduce using rule 42 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)
    closeBrace      reduce using rule 42 (elseStatement -> else ACTION_FILL_JUMP openBrace subroutine closeBrace .)


state 181

    (36) subroutine -> for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace . ACTION_WHILE_GOTO subroutine
    (71) ACTION_WHILE_GOTO -> .

    consoleWrite    reduce using rule 71 (ACTION_WHILE_GOTO -> .)
    consoleRead     reduce using rule 71 (ACTION_WHILE_GOTO -> .)
    if              reduce using rule 71 (ACTION_WHILE_GOTO -> .)
    while           reduce using rule 71 (ACTION_WHILE_GOTO -> .)
    do              reduce using rule 71 (ACTION_WHILE_GOTO -> .)
    for             reduce using rule 71 (ACTION_WHILE_GOTO -> .)
    id              reduce using rule 71 (ACTION_WHILE_GOTO -> .)
    call            reduce using rule 71 (ACTION_WHILE_GOTO -> .)
    closeBrace      reduce using rule 71 (ACTION_WHILE_GOTO -> .)

    ACTION_WHILE_GOTO              shift and go to state 183

state 182

    (41) elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP . openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement

    openBrace       shift and go to state 184


state 183

    (36) subroutine -> for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO . subroutine
    (31) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (32) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (33) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (34) subroutine -> . while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (35) subroutine -> . do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (36) subroutine -> . for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (37) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    consoleWrite    shift and go to state 59
    consoleRead     shift and go to state 60
    if              shift and go to state 62
    while           shift and go to state 63
    do              shift and go to state 64
    for             shift and go to state 65
    id              shift and go to state 61
    call            shift and go to state 67
    closeBrace      reduce using rule 40 (subroutine -> .)

    subroutine                     shift and go to state 185
    unaryExpression                shift and go to state 66

state 184

    (41) elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace . subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement
    (31) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (32) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (33) subroutine -> . if openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_NEW_IF ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement ACTION_FILL_JUMP_END_IF subroutine
    (34) subroutine -> . while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (35) subroutine -> . do ACTION_DO_WHILE_INDEX openBrace subroutine closeBrace while openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP_DO_WHILE semicolon subroutine
    (36) subroutine -> . for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine
    (37) subroutine -> . id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (23) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS plusPlus ACTION_UNARY_PLUS
    (24) unaryExpression -> . id ACTION_UNARY_ADD_OPERANDS minusMinus ACTION_UNARY_MINUS

    consoleWrite    shift and go to state 59
    consoleRead     shift and go to state 60
    if              shift and go to state 62
    while           shift and go to state 63
    do              shift and go to state 64
    for             shift and go to state 65
    id              shift and go to state 61
    call            shift and go to state 67
    closeBrace      reduce using rule 40 (subroutine -> .)

    subroutine                     shift and go to state 186
    unaryExpression                shift and go to state 66

state 185

    (36) subroutine -> for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine .

    closeBrace      reduce using rule 36 (subroutine -> for openParenthesis id equal arithmeticExpression ACTION_GENERATE_QUADRUPLET semicolon statement semicolon ACTION_QUADRUPLET_EMPTY_JUMP arithmeticExpression closeParenthesis openBrace subroutine closeBrace ACTION_WHILE_GOTO subroutine .)


state 186

    (41) elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine . closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement

    closeBrace      shift and go to state 187


state 187

    (41) elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace . ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement
    (68) ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .

    elif            reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    else            reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    consoleWrite    reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    consoleRead     reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    if              reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    while           reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    do              reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    for             reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    id              reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    call            reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)
    closeBrace      reduce using rule 68 (ACTION_QUADRUPLET_EMPTY_JUMP_END_IF -> .)

    ACTION_QUADRUPLET_EMPTY_JUMP_END_IF shift and go to state 188

state 188

    (41) elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF . elseStatement
    (41) elseStatement -> . elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement
    (42) elseStatement -> . else ACTION_FILL_JUMP openBrace subroutine closeBrace
    (43) elseStatement -> . ACTION_FILL_JUMP
    (70) ACTION_FILL_JUMP -> .

    elif            shift and go to state 162
    else            shift and go to state 164
    consoleWrite    reduce using rule 70 (ACTION_FILL_JUMP -> .)
    consoleRead     reduce using rule 70 (ACTION_FILL_JUMP -> .)
    if              reduce using rule 70 (ACTION_FILL_JUMP -> .)
    while           reduce using rule 70 (ACTION_FILL_JUMP -> .)
    do              reduce using rule 70 (ACTION_FILL_JUMP -> .)
    for             reduce using rule 70 (ACTION_FILL_JUMP -> .)
    id              reduce using rule 70 (ACTION_FILL_JUMP -> .)
    call            reduce using rule 70 (ACTION_FILL_JUMP -> .)
    closeBrace      reduce using rule 70 (ACTION_FILL_JUMP -> .)

    ACTION_FILL_JUMP               shift and go to state 163
    elseStatement                  shift and go to state 189

state 189

    (41) elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .

    consoleWrite    reduce using rule 41 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)
    consoleRead     reduce using rule 41 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)
    if              reduce using rule 41 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)
    while           reduce using rule 41 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)
    do              reduce using rule 41 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)
    for             reduce using rule 41 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)
    id              reduce using rule 41 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)
    call            reduce using rule 41 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)
    closeBrace      reduce using rule 41 (elseStatement -> elif ACTION_FILL_JUMP openParenthesis statement closeParenthesis ACTION_QUADRUPLET_EMPTY_JUMP openBrace subroutine closeBrace ACTION_QUADRUPLET_EMPTY_JUMP_END_IF elseStatement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for greaterThan in state 98 resolved as shift
WARNING: shift/reduce conflict for lessThan in state 98 resolved as shift
WARNING: shift/reduce conflict for isEqual in state 98 resolved as shift
WARNING: shift/reduce conflict for notEqual in state 98 resolved as shift
WARNING: shift/reduce conflict for greaterOrEqual in state 98 resolved as shift
WARNING: shift/reduce conflict for lessOrEqual in state 98 resolved as shift
WARNING: shift/reduce conflict for and in state 98 resolved as shift
WARNING: shift/reduce conflict for or in state 98 resolved as shift
WARNING: shift/reduce conflict for greaterThan in state 137 resolved as shift
WARNING: shift/reduce conflict for lessThan in state 137 resolved as shift
WARNING: shift/reduce conflict for isEqual in state 137 resolved as shift
WARNING: shift/reduce conflict for notEqual in state 137 resolved as shift
WARNING: shift/reduce conflict for greaterOrEqual in state 137 resolved as shift
WARNING: shift/reduce conflict for lessOrEqual in state 137 resolved as shift
WARNING: shift/reduce conflict for and in state 137 resolved as shift
WARNING: shift/reduce conflict for or in state 137 resolved as shift
