Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    and
    while
    consoleWrite
    if
    for
    plusPlus
    openBrace
    main
    closeBrace
    function
    else
    greaterThan
    notEqual
    comment
    or
    lessThan
    isEqual
    consoleRead
    minusMinus

Grammar

Rule 0     S' -> program
Rule 1     program -> var
Rule 2     var -> type varSequence var
Rule 3     var -> <empty>
Rule 4     varSequence -> id equal arithmeticExpression semicolon
Rule 5     varSequence -> id semicolon
Rule 6     varSequence -> matrix semicolon
Rule 7     varSequence -> id equal arithmeticExpression comma varSequence
Rule 8     varSequence -> id comma varSequence
Rule 9     varSequence -> matrix comma varSequence
Rule 10    type -> int
Rule 11    type -> double
Rule 12    arithmeticExpression -> value
Rule 13    arithmeticExpression -> value plus arithmeticExpression
Rule 14    arithmeticExpression -> value minus arithmeticExpression
Rule 15    arithmeticExpression -> value multiply arithmeticExpression
Rule 16    arithmeticExpression -> value divide arithmeticExpression
Rule 17    arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis
Rule 18    arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
Rule 19    arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
Rule 20    arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
Rule 21    arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
Rule 22    value -> intValue
Rule 23    value -> doubleValue
Rule 24    value -> id
Rule 25    matrix -> id openBracket value closeBracket
Rule 26    matrix -> id openBracket value closeBracket openBracket value closeBracket

Terminals, with rules where they appear

and                  : 
closeBrace           : 
closeBracket         : 25 26 26
closeParenthesis     : 17 18 19 20 21
comma                : 7 8 9
comment              : 
consoleRead          : 
consoleWrite         : 
divide               : 16 20
double               : 11
doubleValue          : 23
else                 : 
equal                : 4 7
error                : 
for                  : 
function             : 
greaterThan          : 
id                   : 4 5 7 8 24 25 26
if                   : 
int                  : 10
intValue             : 22
isEqual              : 
lessThan             : 
main                 : 
minus                : 14 19
minusMinus           : 
multiply             : 15 21
notEqual             : 
openBrace            : 
openBracket          : 25 26 26
openParenthesis      : 17 18 19 20 21
or                   : 
plus                 : 13 18
plusPlus             : 
semicolon            : 4 5 6
while                : 

Nonterminals, with rules where they appear

arithmeticExpression : 4 7 13 14 15 16 17 18 18 19 19 20 20 21 21
matrix               : 6 9
program              : 0
type                 : 2
value                : 12 13 14 15 16 25 26 26
var                  : 1 2
varSequence          : 2 7 8 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . var
    (2) var -> . type varSequence var
    (3) var -> .
    (10) type -> . int
    (11) type -> . double

    $end            reduce using rule 3 (var -> .)
    int             shift and go to state 1
    double          shift and go to state 2

    var                            shift and go to state 4
    program                        shift and go to state 3
    type                           shift and go to state 5

state 1

    (10) type -> int .

    id              reduce using rule 10 (type -> int .)


state 2

    (11) type -> double .

    id              reduce using rule 11 (type -> double .)


state 3

    (0) S' -> program .



state 4

    (1) program -> var .

    $end            reduce using rule 1 (program -> var .)


state 5

    (2) var -> type . varSequence var
    (4) varSequence -> . id equal arithmeticExpression semicolon
    (5) varSequence -> . id semicolon
    (6) varSequence -> . matrix semicolon
    (7) varSequence -> . id equal arithmeticExpression comma varSequence
    (8) varSequence -> . id comma varSequence
    (9) varSequence -> . matrix comma varSequence
    (25) matrix -> . id openBracket value closeBracket
    (26) matrix -> . id openBracket value closeBracket openBracket value closeBracket

    id              shift and go to state 8

    matrix                         shift and go to state 6
    varSequence                    shift and go to state 7

state 6

    (6) varSequence -> matrix . semicolon
    (9) varSequence -> matrix . comma varSequence

    semicolon       shift and go to state 10
    comma           shift and go to state 9


state 7

    (2) var -> type varSequence . var
    (2) var -> . type varSequence var
    (3) var -> .
    (10) type -> . int
    (11) type -> . double

    $end            reduce using rule 3 (var -> .)
    int             shift and go to state 1
    double          shift and go to state 2

    var                            shift and go to state 11
    type                           shift and go to state 5

state 8

    (4) varSequence -> id . equal arithmeticExpression semicolon
    (5) varSequence -> id . semicolon
    (7) varSequence -> id . equal arithmeticExpression comma varSequence
    (8) varSequence -> id . comma varSequence
    (25) matrix -> id . openBracket value closeBracket
    (26) matrix -> id . openBracket value closeBracket openBracket value closeBracket

    equal           shift and go to state 14
    semicolon       shift and go to state 12
    comma           shift and go to state 15
    openBracket     shift and go to state 13


state 9

    (9) varSequence -> matrix comma . varSequence
    (4) varSequence -> . id equal arithmeticExpression semicolon
    (5) varSequence -> . id semicolon
    (6) varSequence -> . matrix semicolon
    (7) varSequence -> . id equal arithmeticExpression comma varSequence
    (8) varSequence -> . id comma varSequence
    (9) varSequence -> . matrix comma varSequence
    (25) matrix -> . id openBracket value closeBracket
    (26) matrix -> . id openBracket value closeBracket openBracket value closeBracket

    id              shift and go to state 8

    matrix                         shift and go to state 6
    varSequence                    shift and go to state 16

state 10

    (6) varSequence -> matrix semicolon .

    int             reduce using rule 6 (varSequence -> matrix semicolon .)
    double          reduce using rule 6 (varSequence -> matrix semicolon .)
    $end            reduce using rule 6 (varSequence -> matrix semicolon .)


state 11

    (2) var -> type varSequence var .

    $end            reduce using rule 2 (var -> type varSequence var .)


state 12

    (5) varSequence -> id semicolon .

    int             reduce using rule 5 (varSequence -> id semicolon .)
    double          reduce using rule 5 (varSequence -> id semicolon .)
    $end            reduce using rule 5 (varSequence -> id semicolon .)


state 13

    (25) matrix -> id openBracket . value closeBracket
    (26) matrix -> id openBracket . value closeBracket openBracket value closeBracket
    (22) value -> . intValue
    (23) value -> . doubleValue
    (24) value -> . id

    intValue        shift and go to state 19
    doubleValue     shift and go to state 17
    id              shift and go to state 20

    value                          shift and go to state 18

state 14

    (4) varSequence -> id equal . arithmeticExpression semicolon
    (7) varSequence -> id equal . arithmeticExpression comma varSequence
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) value -> . intValue
    (23) value -> . doubleValue
    (24) value -> . id

    openParenthesis shift and go to state 23
    intValue        shift and go to state 19
    doubleValue     shift and go to state 17
    id              shift and go to state 20

    value                          shift and go to state 22
    arithmeticExpression           shift and go to state 21

state 15

    (8) varSequence -> id comma . varSequence
    (4) varSequence -> . id equal arithmeticExpression semicolon
    (5) varSequence -> . id semicolon
    (6) varSequence -> . matrix semicolon
    (7) varSequence -> . id equal arithmeticExpression comma varSequence
    (8) varSequence -> . id comma varSequence
    (9) varSequence -> . matrix comma varSequence
    (25) matrix -> . id openBracket value closeBracket
    (26) matrix -> . id openBracket value closeBracket openBracket value closeBracket

    id              shift and go to state 8

    matrix                         shift and go to state 6
    varSequence                    shift and go to state 24

state 16

    (9) varSequence -> matrix comma varSequence .

    int             reduce using rule 9 (varSequence -> matrix comma varSequence .)
    double          reduce using rule 9 (varSequence -> matrix comma varSequence .)
    $end            reduce using rule 9 (varSequence -> matrix comma varSequence .)


state 17

    (23) value -> doubleValue .

    plus            reduce using rule 23 (value -> doubleValue .)
    minus           reduce using rule 23 (value -> doubleValue .)
    multiply        reduce using rule 23 (value -> doubleValue .)
    divide          reduce using rule 23 (value -> doubleValue .)
    semicolon       reduce using rule 23 (value -> doubleValue .)
    comma           reduce using rule 23 (value -> doubleValue .)
    closeParenthesis reduce using rule 23 (value -> doubleValue .)
    closeBracket    reduce using rule 23 (value -> doubleValue .)


state 18

    (25) matrix -> id openBracket value . closeBracket
    (26) matrix -> id openBracket value . closeBracket openBracket value closeBracket

    closeBracket    shift and go to state 25


state 19

    (22) value -> intValue .

    plus            reduce using rule 22 (value -> intValue .)
    minus           reduce using rule 22 (value -> intValue .)
    multiply        reduce using rule 22 (value -> intValue .)
    divide          reduce using rule 22 (value -> intValue .)
    semicolon       reduce using rule 22 (value -> intValue .)
    comma           reduce using rule 22 (value -> intValue .)
    closeParenthesis reduce using rule 22 (value -> intValue .)
    closeBracket    reduce using rule 22 (value -> intValue .)


state 20

    (24) value -> id .

    plus            reduce using rule 24 (value -> id .)
    minus           reduce using rule 24 (value -> id .)
    multiply        reduce using rule 24 (value -> id .)
    divide          reduce using rule 24 (value -> id .)
    semicolon       reduce using rule 24 (value -> id .)
    comma           reduce using rule 24 (value -> id .)
    closeParenthesis reduce using rule 24 (value -> id .)
    closeBracket    reduce using rule 24 (value -> id .)


state 21

    (4) varSequence -> id equal arithmeticExpression . semicolon
    (7) varSequence -> id equal arithmeticExpression . comma varSequence

    semicolon       shift and go to state 26
    comma           shift and go to state 27


state 22

    (12) arithmeticExpression -> value .
    (13) arithmeticExpression -> value . plus arithmeticExpression
    (14) arithmeticExpression -> value . minus arithmeticExpression
    (15) arithmeticExpression -> value . multiply arithmeticExpression
    (16) arithmeticExpression -> value . divide arithmeticExpression

    semicolon       reduce using rule 12 (arithmeticExpression -> value .)
    comma           reduce using rule 12 (arithmeticExpression -> value .)
    closeParenthesis reduce using rule 12 (arithmeticExpression -> value .)
    plus            shift and go to state 29
    minus           shift and go to state 31
    multiply        shift and go to state 30
    divide          shift and go to state 28


state 23

    (17) arithmeticExpression -> openParenthesis . arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> openParenthesis . arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> openParenthesis . arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> openParenthesis . arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> openParenthesis . arithmeticExpression closeParenthesis multiply arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) value -> . intValue
    (23) value -> . doubleValue
    (24) value -> . id

    openParenthesis shift and go to state 23
    intValue        shift and go to state 19
    doubleValue     shift and go to state 17
    id              shift and go to state 20

    value                          shift and go to state 22
    arithmeticExpression           shift and go to state 32

state 24

    (8) varSequence -> id comma varSequence .

    int             reduce using rule 8 (varSequence -> id comma varSequence .)
    double          reduce using rule 8 (varSequence -> id comma varSequence .)
    $end            reduce using rule 8 (varSequence -> id comma varSequence .)


state 25

    (25) matrix -> id openBracket value closeBracket .
    (26) matrix -> id openBracket value closeBracket . openBracket value closeBracket

    semicolon       reduce using rule 25 (matrix -> id openBracket value closeBracket .)
    comma           reduce using rule 25 (matrix -> id openBracket value closeBracket .)
    openBracket     shift and go to state 33


state 26

    (4) varSequence -> id equal arithmeticExpression semicolon .

    int             reduce using rule 4 (varSequence -> id equal arithmeticExpression semicolon .)
    double          reduce using rule 4 (varSequence -> id equal arithmeticExpression semicolon .)
    $end            reduce using rule 4 (varSequence -> id equal arithmeticExpression semicolon .)


state 27

    (7) varSequence -> id equal arithmeticExpression comma . varSequence
    (4) varSequence -> . id equal arithmeticExpression semicolon
    (5) varSequence -> . id semicolon
    (6) varSequence -> . matrix semicolon
    (7) varSequence -> . id equal arithmeticExpression comma varSequence
    (8) varSequence -> . id comma varSequence
    (9) varSequence -> . matrix comma varSequence
    (25) matrix -> . id openBracket value closeBracket
    (26) matrix -> . id openBracket value closeBracket openBracket value closeBracket

    id              shift and go to state 8

    matrix                         shift and go to state 6
    varSequence                    shift and go to state 34

state 28

    (16) arithmeticExpression -> value divide . arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) value -> . intValue
    (23) value -> . doubleValue
    (24) value -> . id

    openParenthesis shift and go to state 23
    intValue        shift and go to state 19
    doubleValue     shift and go to state 17
    id              shift and go to state 20

    arithmeticExpression           shift and go to state 35
    value                          shift and go to state 22

state 29

    (13) arithmeticExpression -> value plus . arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) value -> . intValue
    (23) value -> . doubleValue
    (24) value -> . id

    openParenthesis shift and go to state 23
    intValue        shift and go to state 19
    doubleValue     shift and go to state 17
    id              shift and go to state 20

    arithmeticExpression           shift and go to state 36
    value                          shift and go to state 22

state 30

    (15) arithmeticExpression -> value multiply . arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) value -> . intValue
    (23) value -> . doubleValue
    (24) value -> . id

    openParenthesis shift and go to state 23
    intValue        shift and go to state 19
    doubleValue     shift and go to state 17
    id              shift and go to state 20

    arithmeticExpression           shift and go to state 37
    value                          shift and go to state 22

state 31

    (14) arithmeticExpression -> value minus . arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) value -> . intValue
    (23) value -> . doubleValue
    (24) value -> . id

    openParenthesis shift and go to state 23
    intValue        shift and go to state 19
    doubleValue     shift and go to state 17
    id              shift and go to state 20

    arithmeticExpression           shift and go to state 38
    value                          shift and go to state 22

state 32

    (17) arithmeticExpression -> openParenthesis arithmeticExpression . closeParenthesis
    (18) arithmeticExpression -> openParenthesis arithmeticExpression . closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> openParenthesis arithmeticExpression . closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> openParenthesis arithmeticExpression . closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> openParenthesis arithmeticExpression . closeParenthesis multiply arithmeticExpression

    closeParenthesis shift and go to state 39


state 33

    (26) matrix -> id openBracket value closeBracket openBracket . value closeBracket
    (22) value -> . intValue
    (23) value -> . doubleValue
    (24) value -> . id

    intValue        shift and go to state 19
    doubleValue     shift and go to state 17
    id              shift and go to state 20

    value                          shift and go to state 40

state 34

    (7) varSequence -> id equal arithmeticExpression comma varSequence .

    int             reduce using rule 7 (varSequence -> id equal arithmeticExpression comma varSequence .)
    double          reduce using rule 7 (varSequence -> id equal arithmeticExpression comma varSequence .)
    $end            reduce using rule 7 (varSequence -> id equal arithmeticExpression comma varSequence .)


state 35

    (16) arithmeticExpression -> value divide arithmeticExpression .

    semicolon       reduce using rule 16 (arithmeticExpression -> value divide arithmeticExpression .)
    comma           reduce using rule 16 (arithmeticExpression -> value divide arithmeticExpression .)
    closeParenthesis reduce using rule 16 (arithmeticExpression -> value divide arithmeticExpression .)


state 36

    (13) arithmeticExpression -> value plus arithmeticExpression .

    semicolon       reduce using rule 13 (arithmeticExpression -> value plus arithmeticExpression .)
    comma           reduce using rule 13 (arithmeticExpression -> value plus arithmeticExpression .)
    closeParenthesis reduce using rule 13 (arithmeticExpression -> value plus arithmeticExpression .)


state 37

    (15) arithmeticExpression -> value multiply arithmeticExpression .

    semicolon       reduce using rule 15 (arithmeticExpression -> value multiply arithmeticExpression .)
    comma           reduce using rule 15 (arithmeticExpression -> value multiply arithmeticExpression .)
    closeParenthesis reduce using rule 15 (arithmeticExpression -> value multiply arithmeticExpression .)


state 38

    (14) arithmeticExpression -> value minus arithmeticExpression .

    semicolon       reduce using rule 14 (arithmeticExpression -> value minus arithmeticExpression .)
    comma           reduce using rule 14 (arithmeticExpression -> value minus arithmeticExpression .)
    closeParenthesis reduce using rule 14 (arithmeticExpression -> value minus arithmeticExpression .)


state 39

    (17) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .
    (18) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis . plus arithmeticExpression
    (19) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis . minus arithmeticExpression
    (20) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis . divide arithmeticExpression
    (21) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis . multiply arithmeticExpression

    semicolon       reduce using rule 17 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    comma           reduce using rule 17 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    closeParenthesis reduce using rule 17 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    plus            shift and go to state 42
    minus           shift and go to state 44
    divide          shift and go to state 41
    multiply        shift and go to state 43


state 40

    (26) matrix -> id openBracket value closeBracket openBracket value . closeBracket

    closeBracket    shift and go to state 45


state 41

    (20) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide . arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) value -> . intValue
    (23) value -> . doubleValue
    (24) value -> . id

    openParenthesis shift and go to state 23
    intValue        shift and go to state 19
    doubleValue     shift and go to state 17
    id              shift and go to state 20

    value                          shift and go to state 22
    arithmeticExpression           shift and go to state 46

state 42

    (18) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus . arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) value -> . intValue
    (23) value -> . doubleValue
    (24) value -> . id

    openParenthesis shift and go to state 23
    intValue        shift and go to state 19
    doubleValue     shift and go to state 17
    id              shift and go to state 20

    value                          shift and go to state 22
    arithmeticExpression           shift and go to state 47

state 43

    (21) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply . arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) value -> . intValue
    (23) value -> . doubleValue
    (24) value -> . id

    openParenthesis shift and go to state 23
    intValue        shift and go to state 19
    doubleValue     shift and go to state 17
    id              shift and go to state 20

    value                          shift and go to state 22
    arithmeticExpression           shift and go to state 48

state 44

    (19) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus . arithmeticExpression
    (12) arithmeticExpression -> . value
    (13) arithmeticExpression -> . value plus arithmeticExpression
    (14) arithmeticExpression -> . value minus arithmeticExpression
    (15) arithmeticExpression -> . value multiply arithmeticExpression
    (16) arithmeticExpression -> . value divide arithmeticExpression
    (17) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (18) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (22) value -> . intValue
    (23) value -> . doubleValue
    (24) value -> . id

    openParenthesis shift and go to state 23
    intValue        shift and go to state 19
    doubleValue     shift and go to state 17
    id              shift and go to state 20

    value                          shift and go to state 22
    arithmeticExpression           shift and go to state 49

state 45

    (26) matrix -> id openBracket value closeBracket openBracket value closeBracket .

    semicolon       reduce using rule 26 (matrix -> id openBracket value closeBracket openBracket value closeBracket .)
    comma           reduce using rule 26 (matrix -> id openBracket value closeBracket openBracket value closeBracket .)


state 46

    (20) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .

    semicolon       reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    comma           reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    closeParenthesis reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)


state 47

    (18) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .

    semicolon       reduce using rule 18 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    comma           reduce using rule 18 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    closeParenthesis reduce using rule 18 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)


state 48

    (21) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .

    semicolon       reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    comma           reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    closeParenthesis reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)


state 49

    (19) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .

    semicolon       reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    comma           reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    closeParenthesis reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)

