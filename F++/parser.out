Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    not

Grammar

Rule 0     S' -> program
Rule 1     program -> var func mainProgram
Rule 2     var -> type varSequence semicolon var
Rule 3     var -> <empty>
Rule 4     varSequence -> variable equal arithmeticExpression
Rule 5     varSequence -> variable
Rule 6     varSequence -> variable equal arithmeticExpression comma varSequence
Rule 7     varSequence -> variable comma varSequence
Rule 8     variable -> id dimentions
Rule 9     dimentions -> openBracket value closeBracket
Rule 10    dimentions -> openBracket value closeBracket openBracket value closeBracket
Rule 11    dimentions -> <empty>
Rule 12    type -> int
Rule 13    type -> double
Rule 14    arithmeticExpression -> value
Rule 15    arithmeticExpression -> value plus arithmeticExpression
Rule 16    arithmeticExpression -> value minus arithmeticExpression
Rule 17    arithmeticExpression -> value multiply arithmeticExpression
Rule 18    arithmeticExpression -> value divide arithmeticExpression
Rule 19    arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis
Rule 20    arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
Rule 21    arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
Rule 22    arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
Rule 23    arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
Rule 24    arithmeticExpression -> unaryExpression
Rule 25    unaryExpression -> id plusPlus
Rule 26    unaryExpression -> id minusMinus
Rule 27    unaryExpression -> plusPlus id
Rule 28    unaryExpression -> minusMinus id
Rule 29    value -> intValue
Rule 30    value -> doubleValue
Rule 31    value -> id
Rule 32    func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace func
Rule 33    func -> <empty>
Rule 34    mainProgram -> main openParenthesis closeParenthesis openBrace subroutine closeBrace
Rule 35    subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
Rule 36    subroutine -> consoleRead openParenthesis id closeParenthesis semicolon subroutine
Rule 37    subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
Rule 38    subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
Rule 39    subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
Rule 40    subroutine -> id equal arithmeticExpression semicolon subroutine
Rule 41    subroutine -> unaryExpression semicolon subroutine
Rule 42    subroutine -> call id openParenthesis closeParenthesis semicolon subroutine
Rule 43    subroutine -> <empty>
Rule 44    elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement
Rule 45    elseStatement -> else openBrace subroutine closeBrace
Rule 46    elseStatement -> <empty>
Rule 47    statement -> arithmeticExpression
Rule 48    statement -> arithmeticExpression logicExpression arithmeticExpression
Rule 49    statement -> statement logicExpression statement
Rule 50    logicExpression -> greaterThan
Rule 51    logicExpression -> lessThan
Rule 52    logicExpression -> isEqual
Rule 53    logicExpression -> notEqual
Rule 54    logicExpression -> greaterOrEqual
Rule 55    logicExpression -> lessOrEqual
Rule 56    logicExpression -> and
Rule 57    logicExpression -> or
Rule 58    cout -> arithmeticExpression
Rule 59    cout -> string

Terminals, with rules where they appear

and                  : 56
call                 : 42
closeBrace           : 32 34 37 38 39 44 45
closeBracket         : 9 10 10
closeParenthesis     : 19 20 21 22 23 32 34 35 36 37 38 39 42 44
comma                : 6 7
consoleRead          : 36
consoleWrite         : 35
divide               : 18 22
double               : 13
doubleValue          : 30
elif                 : 44
else                 : 45
equal                : 4 6 40
error                : 
for                  : 39
function             : 32
greaterOrEqual       : 54
greaterThan          : 50
id                   : 8 25 26 27 28 31 32 36 40 42
if                   : 37
int                  : 12
intValue             : 29
isEqual              : 52
lessOrEqual          : 55
lessThan             : 51
main                 : 34
minus                : 16 21
minusMinus           : 26 28
multiply             : 17 23
not                  : 
notEqual             : 53
openBrace            : 32 34 37 38 39 44 45
openBracket          : 9 10 10
openParenthesis      : 19 20 21 22 23 32 34 35 36 37 38 39 42 44
or                   : 57
plus                 : 15 20
plusPlus             : 25 27
semicolon            : 2 35 36 39 39 40 41 42
string               : 59
while                : 38

Nonterminals, with rules where they appear

arithmeticExpression : 4 6 15 16 17 18 19 20 20 21 21 22 22 23 23 39 40 47 48 48 58
cout                 : 35
dimentions           : 8
elseStatement        : 37 44
func                 : 1 32
logicExpression      : 48 49
mainProgram          : 1
program              : 0
statement            : 37 38 39 44 49 49
subroutine           : 32 34 35 36 37 37 38 38 39 39 40 41 42 44 45
type                 : 2
unaryExpression      : 24 41
value                : 9 10 10 14 15 16 17 18
var                  : 1 2
varSequence          : 2 6 7 39
variable             : 4 5 6 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . var func mainProgram
    (2) var -> . type varSequence semicolon var
    (3) var -> .
    (12) type -> . int
    (13) type -> . double

    function        reduce using rule 3 (var -> .)
    main            reduce using rule 3 (var -> .)
    int             shift and go to state 4
    double          shift and go to state 5

    program                        shift and go to state 1
    var                            shift and go to state 2
    type                           shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> var . func mainProgram
    (32) func -> . function id openParenthesis closeParenthesis openBrace subroutine closeBrace func
    (33) func -> .

    function        shift and go to state 7
    main            reduce using rule 33 (func -> .)

    func                           shift and go to state 6

state 3

    (2) var -> type . varSequence semicolon var
    (4) varSequence -> . variable equal arithmeticExpression
    (5) varSequence -> . variable
    (6) varSequence -> . variable equal arithmeticExpression comma varSequence
    (7) varSequence -> . variable comma varSequence
    (8) variable -> . id dimentions

    id              shift and go to state 10

    varSequence                    shift and go to state 8
    variable                       shift and go to state 9

state 4

    (12) type -> int .

    id              reduce using rule 12 (type -> int .)


state 5

    (13) type -> double .

    id              reduce using rule 13 (type -> double .)


state 6

    (1) program -> var func . mainProgram
    (34) mainProgram -> . main openParenthesis closeParenthesis openBrace subroutine closeBrace

    main            shift and go to state 12

    mainProgram                    shift and go to state 11

state 7

    (32) func -> function . id openParenthesis closeParenthesis openBrace subroutine closeBrace func

    id              shift and go to state 13


state 8

    (2) var -> type varSequence . semicolon var

    semicolon       shift and go to state 14


state 9

    (4) varSequence -> variable . equal arithmeticExpression
    (5) varSequence -> variable .
    (6) varSequence -> variable . equal arithmeticExpression comma varSequence
    (7) varSequence -> variable . comma varSequence

    equal           shift and go to state 15
    semicolon       reduce using rule 5 (varSequence -> variable .)
    comma           shift and go to state 16


state 10

    (8) variable -> id . dimentions
    (9) dimentions -> . openBracket value closeBracket
    (10) dimentions -> . openBracket value closeBracket openBracket value closeBracket
    (11) dimentions -> .

    openBracket     shift and go to state 18
    equal           reduce using rule 11 (dimentions -> .)
    comma           reduce using rule 11 (dimentions -> .)
    semicolon       reduce using rule 11 (dimentions -> .)

    dimentions                     shift and go to state 17

state 11

    (1) program -> var func mainProgram .

    $end            reduce using rule 1 (program -> var func mainProgram .)


state 12

    (34) mainProgram -> main . openParenthesis closeParenthesis openBrace subroutine closeBrace

    openParenthesis shift and go to state 19


state 13

    (32) func -> function id . openParenthesis closeParenthesis openBrace subroutine closeBrace func

    openParenthesis shift and go to state 20


state 14

    (2) var -> type varSequence semicolon . var
    (2) var -> . type varSequence semicolon var
    (3) var -> .
    (12) type -> . int
    (13) type -> . double

    function        reduce using rule 3 (var -> .)
    main            reduce using rule 3 (var -> .)
    int             shift and go to state 4
    double          shift and go to state 5

    type                           shift and go to state 3
    var                            shift and go to state 21

state 15

    (4) varSequence -> variable equal . arithmeticExpression
    (6) varSequence -> variable equal . arithmeticExpression comma varSequence
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 22
    value                          shift and go to state 23
    unaryExpression                shift and go to state 25

state 16

    (7) varSequence -> variable comma . varSequence
    (4) varSequence -> . variable equal arithmeticExpression
    (5) varSequence -> . variable
    (6) varSequence -> . variable equal arithmeticExpression comma varSequence
    (7) varSequence -> . variable comma varSequence
    (8) variable -> . id dimentions

    id              shift and go to state 10

    variable                       shift and go to state 9
    varSequence                    shift and go to state 31

state 17

    (8) variable -> id dimentions .

    equal           reduce using rule 8 (variable -> id dimentions .)
    comma           reduce using rule 8 (variable -> id dimentions .)
    semicolon       reduce using rule 8 (variable -> id dimentions .)


state 18

    (9) dimentions -> openBracket . value closeBracket
    (10) dimentions -> openBracket . value closeBracket openBracket value closeBracket
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id

    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 33

    value                          shift and go to state 32

state 19

    (34) mainProgram -> main openParenthesis . closeParenthesis openBrace subroutine closeBrace

    closeParenthesis shift and go to state 34


state 20

    (32) func -> function id openParenthesis . closeParenthesis openBrace subroutine closeBrace func

    closeParenthesis shift and go to state 35


state 21

    (2) var -> type varSequence semicolon var .

    function        reduce using rule 2 (var -> type varSequence semicolon var .)
    main            reduce using rule 2 (var -> type varSequence semicolon var .)


state 22

    (4) varSequence -> variable equal arithmeticExpression .
    (6) varSequence -> variable equal arithmeticExpression . comma varSequence

    semicolon       reduce using rule 4 (varSequence -> variable equal arithmeticExpression .)
    comma           shift and go to state 36


state 23

    (14) arithmeticExpression -> value .
    (15) arithmeticExpression -> value . plus arithmeticExpression
    (16) arithmeticExpression -> value . minus arithmeticExpression
    (17) arithmeticExpression -> value . multiply arithmeticExpression
    (18) arithmeticExpression -> value . divide arithmeticExpression

    comma           reduce using rule 14 (arithmeticExpression -> value .)
    semicolon       reduce using rule 14 (arithmeticExpression -> value .)
    closeParenthesis reduce using rule 14 (arithmeticExpression -> value .)
    greaterThan     reduce using rule 14 (arithmeticExpression -> value .)
    lessThan        reduce using rule 14 (arithmeticExpression -> value .)
    isEqual         reduce using rule 14 (arithmeticExpression -> value .)
    notEqual        reduce using rule 14 (arithmeticExpression -> value .)
    greaterOrEqual  reduce using rule 14 (arithmeticExpression -> value .)
    lessOrEqual     reduce using rule 14 (arithmeticExpression -> value .)
    and             reduce using rule 14 (arithmeticExpression -> value .)
    or              reduce using rule 14 (arithmeticExpression -> value .)
    plus            shift and go to state 37
    minus           shift and go to state 38
    multiply        shift and go to state 39
    divide          shift and go to state 40


state 24

    (19) arithmeticExpression -> openParenthesis . arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> openParenthesis . arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> openParenthesis . arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> openParenthesis . arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> openParenthesis . arithmeticExpression closeParenthesis multiply arithmeticExpression
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 41
    value                          shift and go to state 23
    unaryExpression                shift and go to state 25

state 25

    (24) arithmeticExpression -> unaryExpression .

    comma           reduce using rule 24 (arithmeticExpression -> unaryExpression .)
    semicolon       reduce using rule 24 (arithmeticExpression -> unaryExpression .)
    closeParenthesis reduce using rule 24 (arithmeticExpression -> unaryExpression .)
    greaterThan     reduce using rule 24 (arithmeticExpression -> unaryExpression .)
    lessThan        reduce using rule 24 (arithmeticExpression -> unaryExpression .)
    isEqual         reduce using rule 24 (arithmeticExpression -> unaryExpression .)
    notEqual        reduce using rule 24 (arithmeticExpression -> unaryExpression .)
    greaterOrEqual  reduce using rule 24 (arithmeticExpression -> unaryExpression .)
    lessOrEqual     reduce using rule 24 (arithmeticExpression -> unaryExpression .)
    and             reduce using rule 24 (arithmeticExpression -> unaryExpression .)
    or              reduce using rule 24 (arithmeticExpression -> unaryExpression .)


state 26

    (29) value -> intValue .

    plus            reduce using rule 29 (value -> intValue .)
    minus           reduce using rule 29 (value -> intValue .)
    multiply        reduce using rule 29 (value -> intValue .)
    divide          reduce using rule 29 (value -> intValue .)
    comma           reduce using rule 29 (value -> intValue .)
    semicolon       reduce using rule 29 (value -> intValue .)
    closeBracket    reduce using rule 29 (value -> intValue .)
    closeParenthesis reduce using rule 29 (value -> intValue .)
    greaterThan     reduce using rule 29 (value -> intValue .)
    lessThan        reduce using rule 29 (value -> intValue .)
    isEqual         reduce using rule 29 (value -> intValue .)
    notEqual        reduce using rule 29 (value -> intValue .)
    greaterOrEqual  reduce using rule 29 (value -> intValue .)
    lessOrEqual     reduce using rule 29 (value -> intValue .)
    and             reduce using rule 29 (value -> intValue .)
    or              reduce using rule 29 (value -> intValue .)


state 27

    (30) value -> doubleValue .

    plus            reduce using rule 30 (value -> doubleValue .)
    minus           reduce using rule 30 (value -> doubleValue .)
    multiply        reduce using rule 30 (value -> doubleValue .)
    divide          reduce using rule 30 (value -> doubleValue .)
    comma           reduce using rule 30 (value -> doubleValue .)
    semicolon       reduce using rule 30 (value -> doubleValue .)
    closeBracket    reduce using rule 30 (value -> doubleValue .)
    closeParenthesis reduce using rule 30 (value -> doubleValue .)
    greaterThan     reduce using rule 30 (value -> doubleValue .)
    lessThan        reduce using rule 30 (value -> doubleValue .)
    isEqual         reduce using rule 30 (value -> doubleValue .)
    notEqual        reduce using rule 30 (value -> doubleValue .)
    greaterOrEqual  reduce using rule 30 (value -> doubleValue .)
    lessOrEqual     reduce using rule 30 (value -> doubleValue .)
    and             reduce using rule 30 (value -> doubleValue .)
    or              reduce using rule 30 (value -> doubleValue .)


state 28

    (31) value -> id .
    (25) unaryExpression -> id . plusPlus
    (26) unaryExpression -> id . minusMinus

    plus            reduce using rule 31 (value -> id .)
    minus           reduce using rule 31 (value -> id .)
    multiply        reduce using rule 31 (value -> id .)
    divide          reduce using rule 31 (value -> id .)
    comma           reduce using rule 31 (value -> id .)
    semicolon       reduce using rule 31 (value -> id .)
    closeParenthesis reduce using rule 31 (value -> id .)
    greaterThan     reduce using rule 31 (value -> id .)
    lessThan        reduce using rule 31 (value -> id .)
    isEqual         reduce using rule 31 (value -> id .)
    notEqual        reduce using rule 31 (value -> id .)
    greaterOrEqual  reduce using rule 31 (value -> id .)
    lessOrEqual     reduce using rule 31 (value -> id .)
    and             reduce using rule 31 (value -> id .)
    or              reduce using rule 31 (value -> id .)
    plusPlus        shift and go to state 42
    minusMinus      shift and go to state 43


state 29

    (27) unaryExpression -> plusPlus . id

    id              shift and go to state 44


state 30

    (28) unaryExpression -> minusMinus . id

    id              shift and go to state 45


state 31

    (7) varSequence -> variable comma varSequence .

    semicolon       reduce using rule 7 (varSequence -> variable comma varSequence .)


state 32

    (9) dimentions -> openBracket value . closeBracket
    (10) dimentions -> openBracket value . closeBracket openBracket value closeBracket

    closeBracket    shift and go to state 46


state 33

    (31) value -> id .

    closeBracket    reduce using rule 31 (value -> id .)


state 34

    (34) mainProgram -> main openParenthesis closeParenthesis . openBrace subroutine closeBrace

    openBrace       shift and go to state 47


state 35

    (32) func -> function id openParenthesis closeParenthesis . openBrace subroutine closeBrace func

    openBrace       shift and go to state 48


state 36

    (6) varSequence -> variable equal arithmeticExpression comma . varSequence
    (4) varSequence -> . variable equal arithmeticExpression
    (5) varSequence -> . variable
    (6) varSequence -> . variable equal arithmeticExpression comma varSequence
    (7) varSequence -> . variable comma varSequence
    (8) variable -> . id dimentions

    id              shift and go to state 10

    variable                       shift and go to state 9
    varSequence                    shift and go to state 49

state 37

    (15) arithmeticExpression -> value plus . arithmeticExpression
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    value                          shift and go to state 23
    arithmeticExpression           shift and go to state 50
    unaryExpression                shift and go to state 25

state 38

    (16) arithmeticExpression -> value minus . arithmeticExpression
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    value                          shift and go to state 23
    arithmeticExpression           shift and go to state 51
    unaryExpression                shift and go to state 25

state 39

    (17) arithmeticExpression -> value multiply . arithmeticExpression
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    value                          shift and go to state 23
    arithmeticExpression           shift and go to state 52
    unaryExpression                shift and go to state 25

state 40

    (18) arithmeticExpression -> value divide . arithmeticExpression
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    value                          shift and go to state 23
    arithmeticExpression           shift and go to state 53
    unaryExpression                shift and go to state 25

state 41

    (19) arithmeticExpression -> openParenthesis arithmeticExpression . closeParenthesis
    (20) arithmeticExpression -> openParenthesis arithmeticExpression . closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> openParenthesis arithmeticExpression . closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> openParenthesis arithmeticExpression . closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> openParenthesis arithmeticExpression . closeParenthesis multiply arithmeticExpression

    closeParenthesis shift and go to state 54


state 42

    (25) unaryExpression -> id plusPlus .

    comma           reduce using rule 25 (unaryExpression -> id plusPlus .)
    semicolon       reduce using rule 25 (unaryExpression -> id plusPlus .)
    closeParenthesis reduce using rule 25 (unaryExpression -> id plusPlus .)
    greaterThan     reduce using rule 25 (unaryExpression -> id plusPlus .)
    lessThan        reduce using rule 25 (unaryExpression -> id plusPlus .)
    isEqual         reduce using rule 25 (unaryExpression -> id plusPlus .)
    notEqual        reduce using rule 25 (unaryExpression -> id plusPlus .)
    greaterOrEqual  reduce using rule 25 (unaryExpression -> id plusPlus .)
    lessOrEqual     reduce using rule 25 (unaryExpression -> id plusPlus .)
    and             reduce using rule 25 (unaryExpression -> id plusPlus .)
    or              reduce using rule 25 (unaryExpression -> id plusPlus .)


state 43

    (26) unaryExpression -> id minusMinus .

    comma           reduce using rule 26 (unaryExpression -> id minusMinus .)
    semicolon       reduce using rule 26 (unaryExpression -> id minusMinus .)
    closeParenthesis reduce using rule 26 (unaryExpression -> id minusMinus .)
    greaterThan     reduce using rule 26 (unaryExpression -> id minusMinus .)
    lessThan        reduce using rule 26 (unaryExpression -> id minusMinus .)
    isEqual         reduce using rule 26 (unaryExpression -> id minusMinus .)
    notEqual        reduce using rule 26 (unaryExpression -> id minusMinus .)
    greaterOrEqual  reduce using rule 26 (unaryExpression -> id minusMinus .)
    lessOrEqual     reduce using rule 26 (unaryExpression -> id minusMinus .)
    and             reduce using rule 26 (unaryExpression -> id minusMinus .)
    or              reduce using rule 26 (unaryExpression -> id minusMinus .)


state 44

    (27) unaryExpression -> plusPlus id .

    comma           reduce using rule 27 (unaryExpression -> plusPlus id .)
    semicolon       reduce using rule 27 (unaryExpression -> plusPlus id .)
    closeParenthesis reduce using rule 27 (unaryExpression -> plusPlus id .)
    greaterThan     reduce using rule 27 (unaryExpression -> plusPlus id .)
    lessThan        reduce using rule 27 (unaryExpression -> plusPlus id .)
    isEqual         reduce using rule 27 (unaryExpression -> plusPlus id .)
    notEqual        reduce using rule 27 (unaryExpression -> plusPlus id .)
    greaterOrEqual  reduce using rule 27 (unaryExpression -> plusPlus id .)
    lessOrEqual     reduce using rule 27 (unaryExpression -> plusPlus id .)
    and             reduce using rule 27 (unaryExpression -> plusPlus id .)
    or              reduce using rule 27 (unaryExpression -> plusPlus id .)


state 45

    (28) unaryExpression -> minusMinus id .

    comma           reduce using rule 28 (unaryExpression -> minusMinus id .)
    semicolon       reduce using rule 28 (unaryExpression -> minusMinus id .)
    closeParenthesis reduce using rule 28 (unaryExpression -> minusMinus id .)
    greaterThan     reduce using rule 28 (unaryExpression -> minusMinus id .)
    lessThan        reduce using rule 28 (unaryExpression -> minusMinus id .)
    isEqual         reduce using rule 28 (unaryExpression -> minusMinus id .)
    notEqual        reduce using rule 28 (unaryExpression -> minusMinus id .)
    greaterOrEqual  reduce using rule 28 (unaryExpression -> minusMinus id .)
    lessOrEqual     reduce using rule 28 (unaryExpression -> minusMinus id .)
    and             reduce using rule 28 (unaryExpression -> minusMinus id .)
    or              reduce using rule 28 (unaryExpression -> minusMinus id .)


state 46

    (9) dimentions -> openBracket value closeBracket .
    (10) dimentions -> openBracket value closeBracket . openBracket value closeBracket

    equal           reduce using rule 9 (dimentions -> openBracket value closeBracket .)
    comma           reduce using rule 9 (dimentions -> openBracket value closeBracket .)
    semicolon       reduce using rule 9 (dimentions -> openBracket value closeBracket .)
    openBracket     shift and go to state 55


state 47

    (34) mainProgram -> main openParenthesis closeParenthesis openBrace . subroutine closeBrace
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . unaryExpression semicolon subroutine
    (42) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (43) subroutine -> .
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 57
    consoleRead     shift and go to state 58
    if              shift and go to state 60
    while           shift and go to state 61
    for             shift and go to state 62
    id              shift and go to state 59
    call            shift and go to state 64
    closeBrace      reduce using rule 43 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 56
    unaryExpression                shift and go to state 63

state 48

    (32) func -> function id openParenthesis closeParenthesis openBrace . subroutine closeBrace func
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . unaryExpression semicolon subroutine
    (42) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (43) subroutine -> .
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 57
    consoleRead     shift and go to state 58
    if              shift and go to state 60
    while           shift and go to state 61
    for             shift and go to state 62
    id              shift and go to state 59
    call            shift and go to state 64
    closeBrace      reduce using rule 43 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 65
    unaryExpression                shift and go to state 63

state 49

    (6) varSequence -> variable equal arithmeticExpression comma varSequence .

    semicolon       reduce using rule 6 (varSequence -> variable equal arithmeticExpression comma varSequence .)


state 50

    (15) arithmeticExpression -> value plus arithmeticExpression .

    comma           reduce using rule 15 (arithmeticExpression -> value plus arithmeticExpression .)
    semicolon       reduce using rule 15 (arithmeticExpression -> value plus arithmeticExpression .)
    closeParenthesis reduce using rule 15 (arithmeticExpression -> value plus arithmeticExpression .)
    greaterThan     reduce using rule 15 (arithmeticExpression -> value plus arithmeticExpression .)
    lessThan        reduce using rule 15 (arithmeticExpression -> value plus arithmeticExpression .)
    isEqual         reduce using rule 15 (arithmeticExpression -> value plus arithmeticExpression .)
    notEqual        reduce using rule 15 (arithmeticExpression -> value plus arithmeticExpression .)
    greaterOrEqual  reduce using rule 15 (arithmeticExpression -> value plus arithmeticExpression .)
    lessOrEqual     reduce using rule 15 (arithmeticExpression -> value plus arithmeticExpression .)
    and             reduce using rule 15 (arithmeticExpression -> value plus arithmeticExpression .)
    or              reduce using rule 15 (arithmeticExpression -> value plus arithmeticExpression .)


state 51

    (16) arithmeticExpression -> value minus arithmeticExpression .

    comma           reduce using rule 16 (arithmeticExpression -> value minus arithmeticExpression .)
    semicolon       reduce using rule 16 (arithmeticExpression -> value minus arithmeticExpression .)
    closeParenthesis reduce using rule 16 (arithmeticExpression -> value minus arithmeticExpression .)
    greaterThan     reduce using rule 16 (arithmeticExpression -> value minus arithmeticExpression .)
    lessThan        reduce using rule 16 (arithmeticExpression -> value minus arithmeticExpression .)
    isEqual         reduce using rule 16 (arithmeticExpression -> value minus arithmeticExpression .)
    notEqual        reduce using rule 16 (arithmeticExpression -> value minus arithmeticExpression .)
    greaterOrEqual  reduce using rule 16 (arithmeticExpression -> value minus arithmeticExpression .)
    lessOrEqual     reduce using rule 16 (arithmeticExpression -> value minus arithmeticExpression .)
    and             reduce using rule 16 (arithmeticExpression -> value minus arithmeticExpression .)
    or              reduce using rule 16 (arithmeticExpression -> value minus arithmeticExpression .)


state 52

    (17) arithmeticExpression -> value multiply arithmeticExpression .

    comma           reduce using rule 17 (arithmeticExpression -> value multiply arithmeticExpression .)
    semicolon       reduce using rule 17 (arithmeticExpression -> value multiply arithmeticExpression .)
    closeParenthesis reduce using rule 17 (arithmeticExpression -> value multiply arithmeticExpression .)
    greaterThan     reduce using rule 17 (arithmeticExpression -> value multiply arithmeticExpression .)
    lessThan        reduce using rule 17 (arithmeticExpression -> value multiply arithmeticExpression .)
    isEqual         reduce using rule 17 (arithmeticExpression -> value multiply arithmeticExpression .)
    notEqual        reduce using rule 17 (arithmeticExpression -> value multiply arithmeticExpression .)
    greaterOrEqual  reduce using rule 17 (arithmeticExpression -> value multiply arithmeticExpression .)
    lessOrEqual     reduce using rule 17 (arithmeticExpression -> value multiply arithmeticExpression .)
    and             reduce using rule 17 (arithmeticExpression -> value multiply arithmeticExpression .)
    or              reduce using rule 17 (arithmeticExpression -> value multiply arithmeticExpression .)


state 53

    (18) arithmeticExpression -> value divide arithmeticExpression .

    comma           reduce using rule 18 (arithmeticExpression -> value divide arithmeticExpression .)
    semicolon       reduce using rule 18 (arithmeticExpression -> value divide arithmeticExpression .)
    closeParenthesis reduce using rule 18 (arithmeticExpression -> value divide arithmeticExpression .)
    greaterThan     reduce using rule 18 (arithmeticExpression -> value divide arithmeticExpression .)
    lessThan        reduce using rule 18 (arithmeticExpression -> value divide arithmeticExpression .)
    isEqual         reduce using rule 18 (arithmeticExpression -> value divide arithmeticExpression .)
    notEqual        reduce using rule 18 (arithmeticExpression -> value divide arithmeticExpression .)
    greaterOrEqual  reduce using rule 18 (arithmeticExpression -> value divide arithmeticExpression .)
    lessOrEqual     reduce using rule 18 (arithmeticExpression -> value divide arithmeticExpression .)
    and             reduce using rule 18 (arithmeticExpression -> value divide arithmeticExpression .)
    or              reduce using rule 18 (arithmeticExpression -> value divide arithmeticExpression .)


state 54

    (19) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .
    (20) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis . plus arithmeticExpression
    (21) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis . minus arithmeticExpression
    (22) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis . divide arithmeticExpression
    (23) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis . multiply arithmeticExpression

    comma           reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    semicolon       reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    closeParenthesis reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    greaterThan     reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    lessThan        reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    isEqual         reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    notEqual        reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    greaterOrEqual  reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    lessOrEqual     reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    and             reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    or              reduce using rule 19 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis .)
    plus            shift and go to state 66
    minus           shift and go to state 67
    divide          shift and go to state 68
    multiply        shift and go to state 69


state 55

    (10) dimentions -> openBracket value closeBracket openBracket . value closeBracket
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id

    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 33

    value                          shift and go to state 70

state 56

    (34) mainProgram -> main openParenthesis closeParenthesis openBrace subroutine . closeBrace

    closeBrace      shift and go to state 71


state 57

    (35) subroutine -> consoleWrite . openParenthesis cout closeParenthesis semicolon subroutine

    openParenthesis shift and go to state 72


state 58

    (36) subroutine -> consoleRead . openParenthesis id closeParenthesis semicolon subroutine

    openParenthesis shift and go to state 73


state 59

    (40) subroutine -> id . equal arithmeticExpression semicolon subroutine
    (25) unaryExpression -> id . plusPlus
    (26) unaryExpression -> id . minusMinus

    equal           shift and go to state 74
    plusPlus        shift and go to state 42
    minusMinus      shift and go to state 43


state 60

    (37) subroutine -> if . openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine

    openParenthesis shift and go to state 75


state 61

    (38) subroutine -> while . openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine

    openParenthesis shift and go to state 76


state 62

    (39) subroutine -> for . openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine

    openParenthesis shift and go to state 77


state 63

    (41) subroutine -> unaryExpression . semicolon subroutine

    semicolon       shift and go to state 78


state 64

    (42) subroutine -> call . id openParenthesis closeParenthesis semicolon subroutine

    id              shift and go to state 79


state 65

    (32) func -> function id openParenthesis closeParenthesis openBrace subroutine . closeBrace func

    closeBrace      shift and go to state 80


state 66

    (20) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus . arithmeticExpression
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 81
    value                          shift and go to state 23
    unaryExpression                shift and go to state 25

state 67

    (21) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus . arithmeticExpression
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 82
    value                          shift and go to state 23
    unaryExpression                shift and go to state 25

state 68

    (22) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide . arithmeticExpression
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 83
    value                          shift and go to state 23
    unaryExpression                shift and go to state 25

state 69

    (23) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply . arithmeticExpression
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 84
    value                          shift and go to state 23
    unaryExpression                shift and go to state 25

state 70

    (10) dimentions -> openBracket value closeBracket openBracket value . closeBracket

    closeBracket    shift and go to state 85


state 71

    (34) mainProgram -> main openParenthesis closeParenthesis openBrace subroutine closeBrace .

    $end            reduce using rule 34 (mainProgram -> main openParenthesis closeParenthesis openBrace subroutine closeBrace .)


state 72

    (35) subroutine -> consoleWrite openParenthesis . cout closeParenthesis semicolon subroutine
    (58) cout -> . arithmeticExpression
    (59) cout -> . string
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    string          shift and go to state 88
    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    cout                           shift and go to state 86
    arithmeticExpression           shift and go to state 87
    value                          shift and go to state 23
    unaryExpression                shift and go to state 25

state 73

    (36) subroutine -> consoleRead openParenthesis . id closeParenthesis semicolon subroutine

    id              shift and go to state 89


state 74

    (40) subroutine -> id equal . arithmeticExpression semicolon subroutine
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 90
    value                          shift and go to state 23
    unaryExpression                shift and go to state 25

state 75

    (37) subroutine -> if openParenthesis . statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (47) statement -> . arithmeticExpression
    (48) statement -> . arithmeticExpression logicExpression arithmeticExpression
    (49) statement -> . statement logicExpression statement
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    statement                      shift and go to state 91
    arithmeticExpression           shift and go to state 92
    value                          shift and go to state 23
    unaryExpression                shift and go to state 25

state 76

    (38) subroutine -> while openParenthesis . statement closeParenthesis openBrace subroutine closeBrace subroutine
    (47) statement -> . arithmeticExpression
    (48) statement -> . arithmeticExpression logicExpression arithmeticExpression
    (49) statement -> . statement logicExpression statement
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    statement                      shift and go to state 93
    arithmeticExpression           shift and go to state 92
    value                          shift and go to state 23
    unaryExpression                shift and go to state 25

state 77

    (39) subroutine -> for openParenthesis . varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (4) varSequence -> . variable equal arithmeticExpression
    (5) varSequence -> . variable
    (6) varSequence -> . variable equal arithmeticExpression comma varSequence
    (7) varSequence -> . variable comma varSequence
    (8) variable -> . id dimentions

    id              shift and go to state 10

    varSequence                    shift and go to state 94
    variable                       shift and go to state 9

state 78

    (41) subroutine -> unaryExpression semicolon . subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . unaryExpression semicolon subroutine
    (42) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (43) subroutine -> .
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 57
    consoleRead     shift and go to state 58
    if              shift and go to state 60
    while           shift and go to state 61
    for             shift and go to state 62
    id              shift and go to state 59
    call            shift and go to state 64
    closeBrace      reduce using rule 43 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    unaryExpression                shift and go to state 63
    subroutine                     shift and go to state 95

state 79

    (42) subroutine -> call id . openParenthesis closeParenthesis semicolon subroutine

    openParenthesis shift and go to state 96


state 80

    (32) func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace . func
    (32) func -> . function id openParenthesis closeParenthesis openBrace subroutine closeBrace func
    (33) func -> .

    function        shift and go to state 7
    main            reduce using rule 33 (func -> .)

    func                           shift and go to state 97

state 81

    (20) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .

    comma           reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    semicolon       reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    closeParenthesis reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    greaterThan     reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    lessThan        reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    isEqual         reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    notEqual        reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    greaterOrEqual  reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    lessOrEqual     reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    and             reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)
    or              reduce using rule 20 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression .)


state 82

    (21) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .

    comma           reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    semicolon       reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    closeParenthesis reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    greaterThan     reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    lessThan        reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    isEqual         reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    notEqual        reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    greaterOrEqual  reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    lessOrEqual     reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    and             reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)
    or              reduce using rule 21 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression .)


state 83

    (22) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .

    comma           reduce using rule 22 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    semicolon       reduce using rule 22 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    closeParenthesis reduce using rule 22 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    greaterThan     reduce using rule 22 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    lessThan        reduce using rule 22 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    isEqual         reduce using rule 22 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    notEqual        reduce using rule 22 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    greaterOrEqual  reduce using rule 22 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    lessOrEqual     reduce using rule 22 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    and             reduce using rule 22 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)
    or              reduce using rule 22 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression .)


state 84

    (23) arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .

    comma           reduce using rule 23 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    semicolon       reduce using rule 23 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    closeParenthesis reduce using rule 23 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    greaterThan     reduce using rule 23 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    lessThan        reduce using rule 23 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    isEqual         reduce using rule 23 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    notEqual        reduce using rule 23 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    greaterOrEqual  reduce using rule 23 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    lessOrEqual     reduce using rule 23 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    and             reduce using rule 23 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)
    or              reduce using rule 23 (arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression .)


state 85

    (10) dimentions -> openBracket value closeBracket openBracket value closeBracket .

    equal           reduce using rule 10 (dimentions -> openBracket value closeBracket openBracket value closeBracket .)
    comma           reduce using rule 10 (dimentions -> openBracket value closeBracket openBracket value closeBracket .)
    semicolon       reduce using rule 10 (dimentions -> openBracket value closeBracket openBracket value closeBracket .)


state 86

    (35) subroutine -> consoleWrite openParenthesis cout . closeParenthesis semicolon subroutine

    closeParenthesis shift and go to state 98


state 87

    (58) cout -> arithmeticExpression .

    closeParenthesis reduce using rule 58 (cout -> arithmeticExpression .)


state 88

    (59) cout -> string .

    closeParenthesis reduce using rule 59 (cout -> string .)


state 89

    (36) subroutine -> consoleRead openParenthesis id . closeParenthesis semicolon subroutine

    closeParenthesis shift and go to state 99


state 90

    (40) subroutine -> id equal arithmeticExpression . semicolon subroutine

    semicolon       shift and go to state 100


state 91

    (37) subroutine -> if openParenthesis statement . closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (49) statement -> statement . logicExpression statement
    (50) logicExpression -> . greaterThan
    (51) logicExpression -> . lessThan
    (52) logicExpression -> . isEqual
    (53) logicExpression -> . notEqual
    (54) logicExpression -> . greaterOrEqual
    (55) logicExpression -> . lessOrEqual
    (56) logicExpression -> . and
    (57) logicExpression -> . or

    closeParenthesis shift and go to state 101
    greaterThan     shift and go to state 103
    lessThan        shift and go to state 104
    isEqual         shift and go to state 105
    notEqual        shift and go to state 106
    greaterOrEqual  shift and go to state 107
    lessOrEqual     shift and go to state 108
    and             shift and go to state 109
    or              shift and go to state 110

    logicExpression                shift and go to state 102

state 92

    (47) statement -> arithmeticExpression .
    (48) statement -> arithmeticExpression . logicExpression arithmeticExpression
    (50) logicExpression -> . greaterThan
    (51) logicExpression -> . lessThan
    (52) logicExpression -> . isEqual
    (53) logicExpression -> . notEqual
    (54) logicExpression -> . greaterOrEqual
    (55) logicExpression -> . lessOrEqual
    (56) logicExpression -> . and
    (57) logicExpression -> . or

  ! shift/reduce conflict for greaterThan resolved as shift
  ! shift/reduce conflict for lessThan resolved as shift
  ! shift/reduce conflict for isEqual resolved as shift
  ! shift/reduce conflict for notEqual resolved as shift
  ! shift/reduce conflict for greaterOrEqual resolved as shift
  ! shift/reduce conflict for lessOrEqual resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    closeParenthesis reduce using rule 47 (statement -> arithmeticExpression .)
    semicolon       reduce using rule 47 (statement -> arithmeticExpression .)
    greaterThan     shift and go to state 103
    lessThan        shift and go to state 104
    isEqual         shift and go to state 105
    notEqual        shift and go to state 106
    greaterOrEqual  shift and go to state 107
    lessOrEqual     shift and go to state 108
    and             shift and go to state 109
    or              shift and go to state 110

  ! greaterThan     [ reduce using rule 47 (statement -> arithmeticExpression .) ]
  ! lessThan        [ reduce using rule 47 (statement -> arithmeticExpression .) ]
  ! isEqual         [ reduce using rule 47 (statement -> arithmeticExpression .) ]
  ! notEqual        [ reduce using rule 47 (statement -> arithmeticExpression .) ]
  ! greaterOrEqual  [ reduce using rule 47 (statement -> arithmeticExpression .) ]
  ! lessOrEqual     [ reduce using rule 47 (statement -> arithmeticExpression .) ]
  ! and             [ reduce using rule 47 (statement -> arithmeticExpression .) ]
  ! or              [ reduce using rule 47 (statement -> arithmeticExpression .) ]

    logicExpression                shift and go to state 111

state 93

    (38) subroutine -> while openParenthesis statement . closeParenthesis openBrace subroutine closeBrace subroutine
    (49) statement -> statement . logicExpression statement
    (50) logicExpression -> . greaterThan
    (51) logicExpression -> . lessThan
    (52) logicExpression -> . isEqual
    (53) logicExpression -> . notEqual
    (54) logicExpression -> . greaterOrEqual
    (55) logicExpression -> . lessOrEqual
    (56) logicExpression -> . and
    (57) logicExpression -> . or

    closeParenthesis shift and go to state 112
    greaterThan     shift and go to state 103
    lessThan        shift and go to state 104
    isEqual         shift and go to state 105
    notEqual        shift and go to state 106
    greaterOrEqual  shift and go to state 107
    lessOrEqual     shift and go to state 108
    and             shift and go to state 109
    or              shift and go to state 110

    logicExpression                shift and go to state 102

state 94

    (39) subroutine -> for openParenthesis varSequence . semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine

    semicolon       shift and go to state 113


state 95

    (41) subroutine -> unaryExpression semicolon subroutine .

    closeBrace      reduce using rule 41 (subroutine -> unaryExpression semicolon subroutine .)


state 96

    (42) subroutine -> call id openParenthesis . closeParenthesis semicolon subroutine

    closeParenthesis shift and go to state 114


state 97

    (32) func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace func .

    main            reduce using rule 32 (func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace func .)


state 98

    (35) subroutine -> consoleWrite openParenthesis cout closeParenthesis . semicolon subroutine

    semicolon       shift and go to state 115


state 99

    (36) subroutine -> consoleRead openParenthesis id closeParenthesis . semicolon subroutine

    semicolon       shift and go to state 116


state 100

    (40) subroutine -> id equal arithmeticExpression semicolon . subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . unaryExpression semicolon subroutine
    (42) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (43) subroutine -> .
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 57
    consoleRead     shift and go to state 58
    if              shift and go to state 60
    while           shift and go to state 61
    for             shift and go to state 62
    id              shift and go to state 59
    call            shift and go to state 64
    closeBrace      reduce using rule 43 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 117
    unaryExpression                shift and go to state 63

state 101

    (37) subroutine -> if openParenthesis statement closeParenthesis . openBrace subroutine closeBrace elseStatement subroutine

    openBrace       shift and go to state 118


state 102

    (49) statement -> statement logicExpression . statement
    (47) statement -> . arithmeticExpression
    (48) statement -> . arithmeticExpression logicExpression arithmeticExpression
    (49) statement -> . statement logicExpression statement
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    statement                      shift and go to state 119
    arithmeticExpression           shift and go to state 92
    value                          shift and go to state 23
    unaryExpression                shift and go to state 25

state 103

    (50) logicExpression -> greaterThan .

    openParenthesis reduce using rule 50 (logicExpression -> greaterThan .)
    intValue        reduce using rule 50 (logicExpression -> greaterThan .)
    doubleValue     reduce using rule 50 (logicExpression -> greaterThan .)
    id              reduce using rule 50 (logicExpression -> greaterThan .)
    plusPlus        reduce using rule 50 (logicExpression -> greaterThan .)
    minusMinus      reduce using rule 50 (logicExpression -> greaterThan .)


state 104

    (51) logicExpression -> lessThan .

    openParenthesis reduce using rule 51 (logicExpression -> lessThan .)
    intValue        reduce using rule 51 (logicExpression -> lessThan .)
    doubleValue     reduce using rule 51 (logicExpression -> lessThan .)
    id              reduce using rule 51 (logicExpression -> lessThan .)
    plusPlus        reduce using rule 51 (logicExpression -> lessThan .)
    minusMinus      reduce using rule 51 (logicExpression -> lessThan .)


state 105

    (52) logicExpression -> isEqual .

    openParenthesis reduce using rule 52 (logicExpression -> isEqual .)
    intValue        reduce using rule 52 (logicExpression -> isEqual .)
    doubleValue     reduce using rule 52 (logicExpression -> isEqual .)
    id              reduce using rule 52 (logicExpression -> isEqual .)
    plusPlus        reduce using rule 52 (logicExpression -> isEqual .)
    minusMinus      reduce using rule 52 (logicExpression -> isEqual .)


state 106

    (53) logicExpression -> notEqual .

    openParenthesis reduce using rule 53 (logicExpression -> notEqual .)
    intValue        reduce using rule 53 (logicExpression -> notEqual .)
    doubleValue     reduce using rule 53 (logicExpression -> notEqual .)
    id              reduce using rule 53 (logicExpression -> notEqual .)
    plusPlus        reduce using rule 53 (logicExpression -> notEqual .)
    minusMinus      reduce using rule 53 (logicExpression -> notEqual .)


state 107

    (54) logicExpression -> greaterOrEqual .

    openParenthesis reduce using rule 54 (logicExpression -> greaterOrEqual .)
    intValue        reduce using rule 54 (logicExpression -> greaterOrEqual .)
    doubleValue     reduce using rule 54 (logicExpression -> greaterOrEqual .)
    id              reduce using rule 54 (logicExpression -> greaterOrEqual .)
    plusPlus        reduce using rule 54 (logicExpression -> greaterOrEqual .)
    minusMinus      reduce using rule 54 (logicExpression -> greaterOrEqual .)


state 108

    (55) logicExpression -> lessOrEqual .

    openParenthesis reduce using rule 55 (logicExpression -> lessOrEqual .)
    intValue        reduce using rule 55 (logicExpression -> lessOrEqual .)
    doubleValue     reduce using rule 55 (logicExpression -> lessOrEqual .)
    id              reduce using rule 55 (logicExpression -> lessOrEqual .)
    plusPlus        reduce using rule 55 (logicExpression -> lessOrEqual .)
    minusMinus      reduce using rule 55 (logicExpression -> lessOrEqual .)


state 109

    (56) logicExpression -> and .

    openParenthesis reduce using rule 56 (logicExpression -> and .)
    intValue        reduce using rule 56 (logicExpression -> and .)
    doubleValue     reduce using rule 56 (logicExpression -> and .)
    id              reduce using rule 56 (logicExpression -> and .)
    plusPlus        reduce using rule 56 (logicExpression -> and .)
    minusMinus      reduce using rule 56 (logicExpression -> and .)


state 110

    (57) logicExpression -> or .

    openParenthesis reduce using rule 57 (logicExpression -> or .)
    intValue        reduce using rule 57 (logicExpression -> or .)
    doubleValue     reduce using rule 57 (logicExpression -> or .)
    id              reduce using rule 57 (logicExpression -> or .)
    plusPlus        reduce using rule 57 (logicExpression -> or .)
    minusMinus      reduce using rule 57 (logicExpression -> or .)


state 111

    (48) statement -> arithmeticExpression logicExpression . arithmeticExpression
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 120
    value                          shift and go to state 23
    unaryExpression                shift and go to state 25

state 112

    (38) subroutine -> while openParenthesis statement closeParenthesis . openBrace subroutine closeBrace subroutine

    openBrace       shift and go to state 121


state 113

    (39) subroutine -> for openParenthesis varSequence semicolon . statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (47) statement -> . arithmeticExpression
    (48) statement -> . arithmeticExpression logicExpression arithmeticExpression
    (49) statement -> . statement logicExpression statement
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    statement                      shift and go to state 122
    arithmeticExpression           shift and go to state 92
    value                          shift and go to state 23
    unaryExpression                shift and go to state 25

state 114

    (42) subroutine -> call id openParenthesis closeParenthesis . semicolon subroutine

    semicolon       shift and go to state 123


state 115

    (35) subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon . subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . unaryExpression semicolon subroutine
    (42) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (43) subroutine -> .
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 57
    consoleRead     shift and go to state 58
    if              shift and go to state 60
    while           shift and go to state 61
    for             shift and go to state 62
    id              shift and go to state 59
    call            shift and go to state 64
    closeBrace      reduce using rule 43 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 124
    unaryExpression                shift and go to state 63

state 116

    (36) subroutine -> consoleRead openParenthesis id closeParenthesis semicolon . subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . unaryExpression semicolon subroutine
    (42) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (43) subroutine -> .
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 57
    consoleRead     shift and go to state 58
    if              shift and go to state 60
    while           shift and go to state 61
    for             shift and go to state 62
    id              shift and go to state 59
    call            shift and go to state 64
    closeBrace      reduce using rule 43 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 125
    unaryExpression                shift and go to state 63

state 117

    (40) subroutine -> id equal arithmeticExpression semicolon subroutine .

    closeBrace      reduce using rule 40 (subroutine -> id equal arithmeticExpression semicolon subroutine .)


state 118

    (37) subroutine -> if openParenthesis statement closeParenthesis openBrace . subroutine closeBrace elseStatement subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . unaryExpression semicolon subroutine
    (42) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (43) subroutine -> .
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 57
    consoleRead     shift and go to state 58
    if              shift and go to state 60
    while           shift and go to state 61
    for             shift and go to state 62
    id              shift and go to state 59
    call            shift and go to state 64
    closeBrace      reduce using rule 43 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 126
    unaryExpression                shift and go to state 63

state 119

    (49) statement -> statement logicExpression statement .
    (49) statement -> statement . logicExpression statement
    (50) logicExpression -> . greaterThan
    (51) logicExpression -> . lessThan
    (52) logicExpression -> . isEqual
    (53) logicExpression -> . notEqual
    (54) logicExpression -> . greaterOrEqual
    (55) logicExpression -> . lessOrEqual
    (56) logicExpression -> . and
    (57) logicExpression -> . or

  ! shift/reduce conflict for greaterThan resolved as shift
  ! shift/reduce conflict for lessThan resolved as shift
  ! shift/reduce conflict for isEqual resolved as shift
  ! shift/reduce conflict for notEqual resolved as shift
  ! shift/reduce conflict for greaterOrEqual resolved as shift
  ! shift/reduce conflict for lessOrEqual resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    closeParenthesis reduce using rule 49 (statement -> statement logicExpression statement .)
    semicolon       reduce using rule 49 (statement -> statement logicExpression statement .)
    greaterThan     shift and go to state 103
    lessThan        shift and go to state 104
    isEqual         shift and go to state 105
    notEqual        shift and go to state 106
    greaterOrEqual  shift and go to state 107
    lessOrEqual     shift and go to state 108
    and             shift and go to state 109
    or              shift and go to state 110

  ! greaterThan     [ reduce using rule 49 (statement -> statement logicExpression statement .) ]
  ! lessThan        [ reduce using rule 49 (statement -> statement logicExpression statement .) ]
  ! isEqual         [ reduce using rule 49 (statement -> statement logicExpression statement .) ]
  ! notEqual        [ reduce using rule 49 (statement -> statement logicExpression statement .) ]
  ! greaterOrEqual  [ reduce using rule 49 (statement -> statement logicExpression statement .) ]
  ! lessOrEqual     [ reduce using rule 49 (statement -> statement logicExpression statement .) ]
  ! and             [ reduce using rule 49 (statement -> statement logicExpression statement .) ]
  ! or              [ reduce using rule 49 (statement -> statement logicExpression statement .) ]

    logicExpression                shift and go to state 102

state 120

    (48) statement -> arithmeticExpression logicExpression arithmeticExpression .

    closeParenthesis reduce using rule 48 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    greaterThan     reduce using rule 48 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    lessThan        reduce using rule 48 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    isEqual         reduce using rule 48 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    notEqual        reduce using rule 48 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    greaterOrEqual  reduce using rule 48 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    lessOrEqual     reduce using rule 48 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    and             reduce using rule 48 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    or              reduce using rule 48 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    semicolon       reduce using rule 48 (statement -> arithmeticExpression logicExpression arithmeticExpression .)


state 121

    (38) subroutine -> while openParenthesis statement closeParenthesis openBrace . subroutine closeBrace subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . unaryExpression semicolon subroutine
    (42) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (43) subroutine -> .
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 57
    consoleRead     shift and go to state 58
    if              shift and go to state 60
    while           shift and go to state 61
    for             shift and go to state 62
    id              shift and go to state 59
    call            shift and go to state 64
    closeBrace      reduce using rule 43 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 127
    unaryExpression                shift and go to state 63

state 122

    (39) subroutine -> for openParenthesis varSequence semicolon statement . semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (49) statement -> statement . logicExpression statement
    (50) logicExpression -> . greaterThan
    (51) logicExpression -> . lessThan
    (52) logicExpression -> . isEqual
    (53) logicExpression -> . notEqual
    (54) logicExpression -> . greaterOrEqual
    (55) logicExpression -> . lessOrEqual
    (56) logicExpression -> . and
    (57) logicExpression -> . or

    semicolon       shift and go to state 128
    greaterThan     shift and go to state 103
    lessThan        shift and go to state 104
    isEqual         shift and go to state 105
    notEqual        shift and go to state 106
    greaterOrEqual  shift and go to state 107
    lessOrEqual     shift and go to state 108
    and             shift and go to state 109
    or              shift and go to state 110

    logicExpression                shift and go to state 102

state 123

    (42) subroutine -> call id openParenthesis closeParenthesis semicolon . subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . unaryExpression semicolon subroutine
    (42) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (43) subroutine -> .
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 57
    consoleRead     shift and go to state 58
    if              shift and go to state 60
    while           shift and go to state 61
    for             shift and go to state 62
    id              shift and go to state 59
    call            shift and go to state 64
    closeBrace      reduce using rule 43 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 129
    unaryExpression                shift and go to state 63

state 124

    (35) subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon subroutine .

    closeBrace      reduce using rule 35 (subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon subroutine .)


state 125

    (36) subroutine -> consoleRead openParenthesis id closeParenthesis semicolon subroutine .

    closeBrace      reduce using rule 36 (subroutine -> consoleRead openParenthesis id closeParenthesis semicolon subroutine .)


state 126

    (37) subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine . closeBrace elseStatement subroutine

    closeBrace      shift and go to state 130


state 127

    (38) subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine . closeBrace subroutine

    closeBrace      shift and go to state 131


state 128

    (39) subroutine -> for openParenthesis varSequence semicolon statement semicolon . arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    arithmeticExpression           shift and go to state 132
    value                          shift and go to state 23
    unaryExpression                shift and go to state 25

state 129

    (42) subroutine -> call id openParenthesis closeParenthesis semicolon subroutine .

    closeBrace      reduce using rule 42 (subroutine -> call id openParenthesis closeParenthesis semicolon subroutine .)


state 130

    (37) subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine closeBrace . elseStatement subroutine
    (44) elseStatement -> . elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement
    (45) elseStatement -> . else openBrace subroutine closeBrace
    (46) elseStatement -> .

    elif            shift and go to state 134
    else            shift and go to state 135
    consoleWrite    reduce using rule 46 (elseStatement -> .)
    consoleRead     reduce using rule 46 (elseStatement -> .)
    if              reduce using rule 46 (elseStatement -> .)
    while           reduce using rule 46 (elseStatement -> .)
    for             reduce using rule 46 (elseStatement -> .)
    id              reduce using rule 46 (elseStatement -> .)
    call            reduce using rule 46 (elseStatement -> .)
    plusPlus        reduce using rule 46 (elseStatement -> .)
    minusMinus      reduce using rule 46 (elseStatement -> .)
    closeBrace      reduce using rule 46 (elseStatement -> .)

    elseStatement                  shift and go to state 133

state 131

    (38) subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine closeBrace . subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . unaryExpression semicolon subroutine
    (42) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (43) subroutine -> .
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 57
    consoleRead     shift and go to state 58
    if              shift and go to state 60
    while           shift and go to state 61
    for             shift and go to state 62
    id              shift and go to state 59
    call            shift and go to state 64
    closeBrace      reduce using rule 43 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 136
    unaryExpression                shift and go to state 63

state 132

    (39) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression . closeParenthesis openBrace subroutine closeBrace subroutine

    closeParenthesis shift and go to state 137


state 133

    (37) subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement . subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . unaryExpression semicolon subroutine
    (42) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (43) subroutine -> .
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 57
    consoleRead     shift and go to state 58
    if              shift and go to state 60
    while           shift and go to state 61
    for             shift and go to state 62
    id              shift and go to state 59
    call            shift and go to state 64
    closeBrace      reduce using rule 43 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 138
    unaryExpression                shift and go to state 63

state 134

    (44) elseStatement -> elif . openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement

    openParenthesis shift and go to state 139


state 135

    (45) elseStatement -> else . openBrace subroutine closeBrace

    openBrace       shift and go to state 140


state 136

    (38) subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine .

    closeBrace      reduce using rule 38 (subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine .)


state 137

    (39) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis . openBrace subroutine closeBrace subroutine

    openBrace       shift and go to state 141


state 138

    (37) subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine .

    closeBrace      reduce using rule 37 (subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine .)


state 139

    (44) elseStatement -> elif openParenthesis . statement closeParenthesis openBrace subroutine closeBrace elseStatement
    (47) statement -> . arithmeticExpression
    (48) statement -> . arithmeticExpression logicExpression arithmeticExpression
    (49) statement -> . statement logicExpression statement
    (14) arithmeticExpression -> . value
    (15) arithmeticExpression -> . value plus arithmeticExpression
    (16) arithmeticExpression -> . value minus arithmeticExpression
    (17) arithmeticExpression -> . value multiply arithmeticExpression
    (18) arithmeticExpression -> . value divide arithmeticExpression
    (19) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis
    (20) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression
    (21) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression
    (22) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression
    (23) arithmeticExpression -> . openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression
    (24) arithmeticExpression -> . unaryExpression
    (29) value -> . intValue
    (30) value -> . doubleValue
    (31) value -> . id
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    openParenthesis shift and go to state 24
    intValue        shift and go to state 26
    doubleValue     shift and go to state 27
    id              shift and go to state 28
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    statement                      shift and go to state 142
    arithmeticExpression           shift and go to state 92
    value                          shift and go to state 23
    unaryExpression                shift and go to state 25

state 140

    (45) elseStatement -> else openBrace . subroutine closeBrace
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . unaryExpression semicolon subroutine
    (42) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (43) subroutine -> .
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 57
    consoleRead     shift and go to state 58
    if              shift and go to state 60
    while           shift and go to state 61
    for             shift and go to state 62
    id              shift and go to state 59
    call            shift and go to state 64
    closeBrace      reduce using rule 43 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 143
    unaryExpression                shift and go to state 63

state 141

    (39) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace . subroutine closeBrace subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . unaryExpression semicolon subroutine
    (42) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (43) subroutine -> .
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 57
    consoleRead     shift and go to state 58
    if              shift and go to state 60
    while           shift and go to state 61
    for             shift and go to state 62
    id              shift and go to state 59
    call            shift and go to state 64
    closeBrace      reduce using rule 43 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 144
    unaryExpression                shift and go to state 63

state 142

    (44) elseStatement -> elif openParenthesis statement . closeParenthesis openBrace subroutine closeBrace elseStatement
    (49) statement -> statement . logicExpression statement
    (50) logicExpression -> . greaterThan
    (51) logicExpression -> . lessThan
    (52) logicExpression -> . isEqual
    (53) logicExpression -> . notEqual
    (54) logicExpression -> . greaterOrEqual
    (55) logicExpression -> . lessOrEqual
    (56) logicExpression -> . and
    (57) logicExpression -> . or

    closeParenthesis shift and go to state 145
    greaterThan     shift and go to state 103
    lessThan        shift and go to state 104
    isEqual         shift and go to state 105
    notEqual        shift and go to state 106
    greaterOrEqual  shift and go to state 107
    lessOrEqual     shift and go to state 108
    and             shift and go to state 109
    or              shift and go to state 110

    logicExpression                shift and go to state 102

state 143

    (45) elseStatement -> else openBrace subroutine . closeBrace

    closeBrace      shift and go to state 146


state 144

    (39) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine . closeBrace subroutine

    closeBrace      shift and go to state 147


state 145

    (44) elseStatement -> elif openParenthesis statement closeParenthesis . openBrace subroutine closeBrace elseStatement

    openBrace       shift and go to state 148


state 146

    (45) elseStatement -> else openBrace subroutine closeBrace .

    consoleWrite    reduce using rule 45 (elseStatement -> else openBrace subroutine closeBrace .)
    consoleRead     reduce using rule 45 (elseStatement -> else openBrace subroutine closeBrace .)
    if              reduce using rule 45 (elseStatement -> else openBrace subroutine closeBrace .)
    while           reduce using rule 45 (elseStatement -> else openBrace subroutine closeBrace .)
    for             reduce using rule 45 (elseStatement -> else openBrace subroutine closeBrace .)
    id              reduce using rule 45 (elseStatement -> else openBrace subroutine closeBrace .)
    call            reduce using rule 45 (elseStatement -> else openBrace subroutine closeBrace .)
    plusPlus        reduce using rule 45 (elseStatement -> else openBrace subroutine closeBrace .)
    minusMinus      reduce using rule 45 (elseStatement -> else openBrace subroutine closeBrace .)
    closeBrace      reduce using rule 45 (elseStatement -> else openBrace subroutine closeBrace .)


state 147

    (39) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace . subroutine
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . unaryExpression semicolon subroutine
    (42) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (43) subroutine -> .
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 57
    consoleRead     shift and go to state 58
    if              shift and go to state 60
    while           shift and go to state 61
    for             shift and go to state 62
    id              shift and go to state 59
    call            shift and go to state 64
    closeBrace      reduce using rule 43 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 149
    unaryExpression                shift and go to state 63

state 148

    (44) elseStatement -> elif openParenthesis statement closeParenthesis openBrace . subroutine closeBrace elseStatement
    (35) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (36) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (37) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (38) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (39) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (40) subroutine -> . id equal arithmeticExpression semicolon subroutine
    (41) subroutine -> . unaryExpression semicolon subroutine
    (42) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (43) subroutine -> .
    (25) unaryExpression -> . id plusPlus
    (26) unaryExpression -> . id minusMinus
    (27) unaryExpression -> . plusPlus id
    (28) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 57
    consoleRead     shift and go to state 58
    if              shift and go to state 60
    while           shift and go to state 61
    for             shift and go to state 62
    id              shift and go to state 59
    call            shift and go to state 64
    closeBrace      reduce using rule 43 (subroutine -> .)
    plusPlus        shift and go to state 29
    minusMinus      shift and go to state 30

    subroutine                     shift and go to state 150
    unaryExpression                shift and go to state 63

state 149

    (39) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine .

    closeBrace      reduce using rule 39 (subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine .)


state 150

    (44) elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine . closeBrace elseStatement

    closeBrace      shift and go to state 151


state 151

    (44) elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace . elseStatement
    (44) elseStatement -> . elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement
    (45) elseStatement -> . else openBrace subroutine closeBrace
    (46) elseStatement -> .

    elif            shift and go to state 134
    else            shift and go to state 135
    consoleWrite    reduce using rule 46 (elseStatement -> .)
    consoleRead     reduce using rule 46 (elseStatement -> .)
    if              reduce using rule 46 (elseStatement -> .)
    while           reduce using rule 46 (elseStatement -> .)
    for             reduce using rule 46 (elseStatement -> .)
    id              reduce using rule 46 (elseStatement -> .)
    call            reduce using rule 46 (elseStatement -> .)
    plusPlus        reduce using rule 46 (elseStatement -> .)
    minusMinus      reduce using rule 46 (elseStatement -> .)
    closeBrace      reduce using rule 46 (elseStatement -> .)

    elseStatement                  shift and go to state 152

state 152

    (44) elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .

    consoleWrite    reduce using rule 44 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    consoleRead     reduce using rule 44 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    if              reduce using rule 44 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    while           reduce using rule 44 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    for             reduce using rule 44 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    id              reduce using rule 44 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    call            reduce using rule 44 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    plusPlus        reduce using rule 44 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    minusMinus      reduce using rule 44 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    closeBrace      reduce using rule 44 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for greaterThan in state 92 resolved as shift
WARNING: shift/reduce conflict for lessThan in state 92 resolved as shift
WARNING: shift/reduce conflict for isEqual in state 92 resolved as shift
WARNING: shift/reduce conflict for notEqual in state 92 resolved as shift
WARNING: shift/reduce conflict for greaterOrEqual in state 92 resolved as shift
WARNING: shift/reduce conflict for lessOrEqual in state 92 resolved as shift
WARNING: shift/reduce conflict for and in state 92 resolved as shift
WARNING: shift/reduce conflict for or in state 92 resolved as shift
WARNING: shift/reduce conflict for greaterThan in state 119 resolved as shift
WARNING: shift/reduce conflict for lessThan in state 119 resolved as shift
WARNING: shift/reduce conflict for isEqual in state 119 resolved as shift
WARNING: shift/reduce conflict for notEqual in state 119 resolved as shift
WARNING: shift/reduce conflict for greaterOrEqual in state 119 resolved as shift
WARNING: shift/reduce conflict for lessOrEqual in state 119 resolved as shift
WARNING: shift/reduce conflict for and in state 119 resolved as shift
WARNING: shift/reduce conflict for or in state 119 resolved as shift
