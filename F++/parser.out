Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    not

Grammar

Rule 0     S' -> program
Rule 1     program -> var func mainProgram
Rule 2     var -> type varSequence semicolon var
Rule 3     var -> <empty>
Rule 4     varSequence -> variable equal arithmeticExpression
Rule 5     varSequence -> variable
Rule 6     varSequence -> variable equal arithmeticExpression comma varSequence
Rule 7     varSequence -> variable comma varSequence
Rule 8     variable -> id dimentions
Rule 9     dimentions -> openBracket value closeBracket
Rule 10    dimentions -> openBracket value closeBracket openBracket value closeBracket
Rule 11    dimentions -> <empty>
Rule 12    type -> int
Rule 13    type -> double
Rule 14    arithmeticExpression -> multiplyDivide
Rule 15    arithmeticExpression -> arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
Rule 16    arithmeticExpression -> arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
Rule 17    multiplyDivide -> val
Rule 18    multiplyDivide -> multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide
Rule 19    multiplyDivide -> multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide
Rule 20    val -> value
Rule 21    val -> openParenthesis arithmeticExpression closeParenthesis
Rule 22    unaryExpression -> id plusPlus
Rule 23    unaryExpression -> id minusMinus
Rule 24    unaryExpression -> plusPlus id
Rule 25    unaryExpression -> minusMinus id
Rule 26    value -> intValue action_int_value
Rule 27    value -> doubleValue action_double_value
Rule 28    value -> id action_var_value
Rule 29    func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace func
Rule 30    func -> <empty>
Rule 31    mainProgram -> main openParenthesis closeParenthesis openBrace subroutine closeBrace
Rule 32    subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
Rule 33    subroutine -> consoleRead openParenthesis id closeParenthesis semicolon subroutine
Rule 34    subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
Rule 35    subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
Rule 36    subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
Rule 37    subroutine -> id equal arithmeticExpression action_generate_quadruplet semicolon subroutine
Rule 38    subroutine -> unaryExpression semicolon subroutine
Rule 39    subroutine -> call id openParenthesis closeParenthesis semicolon subroutine
Rule 40    subroutine -> <empty>
Rule 41    elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement
Rule 42    elseStatement -> else openBrace subroutine closeBrace
Rule 43    elseStatement -> <empty>
Rule 44    statement -> arithmeticExpression
Rule 45    statement -> arithmeticExpression logicExpression arithmeticExpression
Rule 46    statement -> statement logicExpression statement
Rule 47    logicExpression -> greaterThan
Rule 48    logicExpression -> lessThan
Rule 49    logicExpression -> isEqual
Rule 50    logicExpression -> notEqual
Rule 51    logicExpression -> greaterOrEqual
Rule 52    logicExpression -> lessOrEqual
Rule 53    logicExpression -> and
Rule 54    logicExpression -> or
Rule 55    cout -> arithmeticExpression
Rule 56    cout -> string
Rule 57    action_var_value -> <empty>
Rule 58    action_int_value -> <empty>
Rule 59    action_double_value -> <empty>
Rule 60    action_add_operator -> <empty>
Rule 61    action_generate_quadruplet -> <empty>
Rule 62    action_quadruplet_arithmetic_expression -> <empty>
Rule 63    action_quadruplet_multiply_divide -> <empty>

Terminals, with rules where they appear

and                  : 53
call                 : 39
closeBrace           : 29 31 34 35 36 41 42
closeBracket         : 9 10 10
closeParenthesis     : 21 29 31 32 33 34 35 36 39 41
comma                : 6 7
consoleRead          : 33
consoleWrite         : 32
divide               : 19
double               : 13
doubleValue          : 27
elif                 : 41
else                 : 42
equal                : 4 6 37
error                : 
for                  : 36
function             : 29
greaterOrEqual       : 51
greaterThan          : 47
id                   : 8 22 23 24 25 28 29 33 37 39
if                   : 34
int                  : 12
intValue             : 26
isEqual              : 49
lessOrEqual          : 52
lessThan             : 48
main                 : 31
minus                : 16
minusMinus           : 23 25
multiply             : 18
not                  : 
notEqual             : 50
openBrace            : 29 31 34 35 36 41 42
openBracket          : 9 10 10
openParenthesis      : 21 29 31 32 33 34 35 36 39 41
or                   : 54
plus                 : 15
plusPlus             : 22 24
semicolon            : 2 32 33 36 36 37 38 39
string               : 56
while                : 35

Nonterminals, with rules where they appear

action_add_operator  : 15 16 18 19
action_double_value  : 27
action_generate_quadruplet : 37
action_int_value     : 26
action_quadruplet_arithmetic_expression : 15 16
action_quadruplet_multiply_divide : 18 19
action_var_value     : 28
arithmeticExpression : 4 6 15 16 21 36 37 44 45 45 55
cout                 : 32
dimentions           : 8
elseStatement        : 34 41
func                 : 1 29
logicExpression      : 45 46
mainProgram          : 1
multiplyDivide       : 14 15 16 18 19
program              : 0
statement            : 34 35 36 41 46 46
subroutine           : 29 31 32 33 34 34 35 35 36 36 37 38 39 41 42
type                 : 2
unaryExpression      : 38
val                  : 17 18 19
value                : 9 10 10 20
var                  : 1 2
varSequence          : 2 6 7 36
variable             : 4 5 6 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . var func mainProgram
    (2) var -> . type varSequence semicolon var
    (3) var -> .
    (12) type -> . int
    (13) type -> . double

    function        reduce using rule 3 (var -> .)
    main            reduce using rule 3 (var -> .)
    int             shift and go to state 4
    double          shift and go to state 5

    program                        shift and go to state 1
    var                            shift and go to state 2
    type                           shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> var . func mainProgram
    (29) func -> . function id openParenthesis closeParenthesis openBrace subroutine closeBrace func
    (30) func -> .

    function        shift and go to state 7
    main            reduce using rule 30 (func -> .)

    func                           shift and go to state 6

state 3

    (2) var -> type . varSequence semicolon var
    (4) varSequence -> . variable equal arithmeticExpression
    (5) varSequence -> . variable
    (6) varSequence -> . variable equal arithmeticExpression comma varSequence
    (7) varSequence -> . variable comma varSequence
    (8) variable -> . id dimentions

    id              shift and go to state 10

    varSequence                    shift and go to state 8
    variable                       shift and go to state 9

state 4

    (12) type -> int .

    id              reduce using rule 12 (type -> int .)


state 5

    (13) type -> double .

    id              reduce using rule 13 (type -> double .)


state 6

    (1) program -> var func . mainProgram
    (31) mainProgram -> . main openParenthesis closeParenthesis openBrace subroutine closeBrace

    main            shift and go to state 12

    mainProgram                    shift and go to state 11

state 7

    (29) func -> function . id openParenthesis closeParenthesis openBrace subroutine closeBrace func

    id              shift and go to state 13


state 8

    (2) var -> type varSequence . semicolon var

    semicolon       shift and go to state 14


state 9

    (4) varSequence -> variable . equal arithmeticExpression
    (5) varSequence -> variable .
    (6) varSequence -> variable . equal arithmeticExpression comma varSequence
    (7) varSequence -> variable . comma varSequence

    equal           shift and go to state 15
    semicolon       reduce using rule 5 (varSequence -> variable .)
    comma           shift and go to state 16


state 10

    (8) variable -> id . dimentions
    (9) dimentions -> . openBracket value closeBracket
    (10) dimentions -> . openBracket value closeBracket openBracket value closeBracket
    (11) dimentions -> .

    openBracket     shift and go to state 18
    equal           reduce using rule 11 (dimentions -> .)
    comma           reduce using rule 11 (dimentions -> .)
    semicolon       reduce using rule 11 (dimentions -> .)

    dimentions                     shift and go to state 17

state 11

    (1) program -> var func mainProgram .

    $end            reduce using rule 1 (program -> var func mainProgram .)


state 12

    (31) mainProgram -> main . openParenthesis closeParenthesis openBrace subroutine closeBrace

    openParenthesis shift and go to state 19


state 13

    (29) func -> function id . openParenthesis closeParenthesis openBrace subroutine closeBrace func

    openParenthesis shift and go to state 20


state 14

    (2) var -> type varSequence semicolon . var
    (2) var -> . type varSequence semicolon var
    (3) var -> .
    (12) type -> . int
    (13) type -> . double

    function        reduce using rule 3 (var -> .)
    main            reduce using rule 3 (var -> .)
    int             shift and go to state 4
    double          shift and go to state 5

    type                           shift and go to state 3
    var                            shift and go to state 21

state 15

    (4) varSequence -> variable equal . arithmeticExpression
    (6) varSequence -> variable equal . arithmeticExpression comma varSequence
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (16) arithmeticExpression -> . arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide
    (19) multiplyDivide -> . multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide
    (20) val -> . value
    (21) val -> . openParenthesis arithmeticExpression closeParenthesis
    (26) value -> . intValue action_int_value
    (27) value -> . doubleValue action_double_value
    (28) value -> . id action_var_value

    openParenthesis shift and go to state 26
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 29

    arithmeticExpression           shift and go to state 22
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25

state 16

    (7) varSequence -> variable comma . varSequence
    (4) varSequence -> . variable equal arithmeticExpression
    (5) varSequence -> . variable
    (6) varSequence -> . variable equal arithmeticExpression comma varSequence
    (7) varSequence -> . variable comma varSequence
    (8) variable -> . id dimentions

    id              shift and go to state 10

    variable                       shift and go to state 9
    varSequence                    shift and go to state 30

state 17

    (8) variable -> id dimentions .

    equal           reduce using rule 8 (variable -> id dimentions .)
    comma           reduce using rule 8 (variable -> id dimentions .)
    semicolon       reduce using rule 8 (variable -> id dimentions .)


state 18

    (9) dimentions -> openBracket . value closeBracket
    (10) dimentions -> openBracket . value closeBracket openBracket value closeBracket
    (26) value -> . intValue action_int_value
    (27) value -> . doubleValue action_double_value
    (28) value -> . id action_var_value

    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 29

    value                          shift and go to state 31

state 19

    (31) mainProgram -> main openParenthesis . closeParenthesis openBrace subroutine closeBrace

    closeParenthesis shift and go to state 32


state 20

    (29) func -> function id openParenthesis . closeParenthesis openBrace subroutine closeBrace func

    closeParenthesis shift and go to state 33


state 21

    (2) var -> type varSequence semicolon var .

    function        reduce using rule 2 (var -> type varSequence semicolon var .)
    main            reduce using rule 2 (var -> type varSequence semicolon var .)


state 22

    (4) varSequence -> variable equal arithmeticExpression .
    (6) varSequence -> variable equal arithmeticExpression . comma varSequence
    (15) arithmeticExpression -> arithmeticExpression . plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (16) arithmeticExpression -> arithmeticExpression . minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression

    semicolon       reduce using rule 4 (varSequence -> variable equal arithmeticExpression .)
    comma           shift and go to state 34
    plus            shift and go to state 35
    minus           shift and go to state 36


state 23

    (14) arithmeticExpression -> multiplyDivide .
    (18) multiplyDivide -> multiplyDivide . multiply action_add_operator val action_quadruplet_multiply_divide
    (19) multiplyDivide -> multiplyDivide . divide action_add_operator val action_quadruplet_multiply_divide

    comma           reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    plus            reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    minus           reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    semicolon       reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    closeParenthesis reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    greaterThan     reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    lessThan        reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    isEqual         reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    notEqual        reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    greaterOrEqual  reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    lessOrEqual     reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    and             reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    or              reduce using rule 14 (arithmeticExpression -> multiplyDivide .)
    multiply        shift and go to state 37
    divide          shift and go to state 38


state 24

    (17) multiplyDivide -> val .

    multiply        reduce using rule 17 (multiplyDivide -> val .)
    divide          reduce using rule 17 (multiplyDivide -> val .)
    comma           reduce using rule 17 (multiplyDivide -> val .)
    plus            reduce using rule 17 (multiplyDivide -> val .)
    minus           reduce using rule 17 (multiplyDivide -> val .)
    semicolon       reduce using rule 17 (multiplyDivide -> val .)
    closeParenthesis reduce using rule 17 (multiplyDivide -> val .)
    greaterThan     reduce using rule 17 (multiplyDivide -> val .)
    lessThan        reduce using rule 17 (multiplyDivide -> val .)
    isEqual         reduce using rule 17 (multiplyDivide -> val .)
    notEqual        reduce using rule 17 (multiplyDivide -> val .)
    greaterOrEqual  reduce using rule 17 (multiplyDivide -> val .)
    lessOrEqual     reduce using rule 17 (multiplyDivide -> val .)
    and             reduce using rule 17 (multiplyDivide -> val .)
    or              reduce using rule 17 (multiplyDivide -> val .)


state 25

    (20) val -> value .

    multiply        reduce using rule 20 (val -> value .)
    divide          reduce using rule 20 (val -> value .)
    comma           reduce using rule 20 (val -> value .)
    plus            reduce using rule 20 (val -> value .)
    minus           reduce using rule 20 (val -> value .)
    semicolon       reduce using rule 20 (val -> value .)
    closeParenthesis reduce using rule 20 (val -> value .)
    greaterThan     reduce using rule 20 (val -> value .)
    lessThan        reduce using rule 20 (val -> value .)
    isEqual         reduce using rule 20 (val -> value .)
    notEqual        reduce using rule 20 (val -> value .)
    greaterOrEqual  reduce using rule 20 (val -> value .)
    lessOrEqual     reduce using rule 20 (val -> value .)
    and             reduce using rule 20 (val -> value .)
    or              reduce using rule 20 (val -> value .)


state 26

    (21) val -> openParenthesis . arithmeticExpression closeParenthesis
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (16) arithmeticExpression -> . arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide
    (19) multiplyDivide -> . multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide
    (20) val -> . value
    (21) val -> . openParenthesis arithmeticExpression closeParenthesis
    (26) value -> . intValue action_int_value
    (27) value -> . doubleValue action_double_value
    (28) value -> . id action_var_value

    openParenthesis shift and go to state 26
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 29

    arithmeticExpression           shift and go to state 39
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25

state 27

    (26) value -> intValue . action_int_value
    (58) action_int_value -> .

    multiply        reduce using rule 58 (action_int_value -> .)
    divide          reduce using rule 58 (action_int_value -> .)
    comma           reduce using rule 58 (action_int_value -> .)
    plus            reduce using rule 58 (action_int_value -> .)
    minus           reduce using rule 58 (action_int_value -> .)
    semicolon       reduce using rule 58 (action_int_value -> .)
    closeBracket    reduce using rule 58 (action_int_value -> .)
    closeParenthesis reduce using rule 58 (action_int_value -> .)
    greaterThan     reduce using rule 58 (action_int_value -> .)
    lessThan        reduce using rule 58 (action_int_value -> .)
    isEqual         reduce using rule 58 (action_int_value -> .)
    notEqual        reduce using rule 58 (action_int_value -> .)
    greaterOrEqual  reduce using rule 58 (action_int_value -> .)
    lessOrEqual     reduce using rule 58 (action_int_value -> .)
    and             reduce using rule 58 (action_int_value -> .)
    or              reduce using rule 58 (action_int_value -> .)

    action_int_value               shift and go to state 40

state 28

    (27) value -> doubleValue . action_double_value
    (59) action_double_value -> .

    multiply        reduce using rule 59 (action_double_value -> .)
    divide          reduce using rule 59 (action_double_value -> .)
    comma           reduce using rule 59 (action_double_value -> .)
    plus            reduce using rule 59 (action_double_value -> .)
    minus           reduce using rule 59 (action_double_value -> .)
    semicolon       reduce using rule 59 (action_double_value -> .)
    closeBracket    reduce using rule 59 (action_double_value -> .)
    closeParenthesis reduce using rule 59 (action_double_value -> .)
    greaterThan     reduce using rule 59 (action_double_value -> .)
    lessThan        reduce using rule 59 (action_double_value -> .)
    isEqual         reduce using rule 59 (action_double_value -> .)
    notEqual        reduce using rule 59 (action_double_value -> .)
    greaterOrEqual  reduce using rule 59 (action_double_value -> .)
    lessOrEqual     reduce using rule 59 (action_double_value -> .)
    and             reduce using rule 59 (action_double_value -> .)
    or              reduce using rule 59 (action_double_value -> .)

    action_double_value            shift and go to state 41

state 29

    (28) value -> id . action_var_value
    (57) action_var_value -> .

    multiply        reduce using rule 57 (action_var_value -> .)
    divide          reduce using rule 57 (action_var_value -> .)
    comma           reduce using rule 57 (action_var_value -> .)
    plus            reduce using rule 57 (action_var_value -> .)
    minus           reduce using rule 57 (action_var_value -> .)
    semicolon       reduce using rule 57 (action_var_value -> .)
    closeBracket    reduce using rule 57 (action_var_value -> .)
    closeParenthesis reduce using rule 57 (action_var_value -> .)
    greaterThan     reduce using rule 57 (action_var_value -> .)
    lessThan        reduce using rule 57 (action_var_value -> .)
    isEqual         reduce using rule 57 (action_var_value -> .)
    notEqual        reduce using rule 57 (action_var_value -> .)
    greaterOrEqual  reduce using rule 57 (action_var_value -> .)
    lessOrEqual     reduce using rule 57 (action_var_value -> .)
    and             reduce using rule 57 (action_var_value -> .)
    or              reduce using rule 57 (action_var_value -> .)

    action_var_value               shift and go to state 42

state 30

    (7) varSequence -> variable comma varSequence .

    semicolon       reduce using rule 7 (varSequence -> variable comma varSequence .)


state 31

    (9) dimentions -> openBracket value . closeBracket
    (10) dimentions -> openBracket value . closeBracket openBracket value closeBracket

    closeBracket    shift and go to state 43


state 32

    (31) mainProgram -> main openParenthesis closeParenthesis . openBrace subroutine closeBrace

    openBrace       shift and go to state 44


state 33

    (29) func -> function id openParenthesis closeParenthesis . openBrace subroutine closeBrace func

    openBrace       shift and go to state 45


state 34

    (6) varSequence -> variable equal arithmeticExpression comma . varSequence
    (4) varSequence -> . variable equal arithmeticExpression
    (5) varSequence -> . variable
    (6) varSequence -> . variable equal arithmeticExpression comma varSequence
    (7) varSequence -> . variable comma varSequence
    (8) variable -> . id dimentions

    id              shift and go to state 10

    variable                       shift and go to state 9
    varSequence                    shift and go to state 46

state 35

    (15) arithmeticExpression -> arithmeticExpression plus . action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (60) action_add_operator -> .

    openParenthesis reduce using rule 60 (action_add_operator -> .)
    intValue        reduce using rule 60 (action_add_operator -> .)
    doubleValue     reduce using rule 60 (action_add_operator -> .)
    id              reduce using rule 60 (action_add_operator -> .)

    action_add_operator            shift and go to state 47

state 36

    (16) arithmeticExpression -> arithmeticExpression minus . action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (60) action_add_operator -> .

    openParenthesis reduce using rule 60 (action_add_operator -> .)
    intValue        reduce using rule 60 (action_add_operator -> .)
    doubleValue     reduce using rule 60 (action_add_operator -> .)
    id              reduce using rule 60 (action_add_operator -> .)

    action_add_operator            shift and go to state 48

state 37

    (18) multiplyDivide -> multiplyDivide multiply . action_add_operator val action_quadruplet_multiply_divide
    (60) action_add_operator -> .

    openParenthesis reduce using rule 60 (action_add_operator -> .)
    intValue        reduce using rule 60 (action_add_operator -> .)
    doubleValue     reduce using rule 60 (action_add_operator -> .)
    id              reduce using rule 60 (action_add_operator -> .)

    action_add_operator            shift and go to state 49

state 38

    (19) multiplyDivide -> multiplyDivide divide . action_add_operator val action_quadruplet_multiply_divide
    (60) action_add_operator -> .

    openParenthesis reduce using rule 60 (action_add_operator -> .)
    intValue        reduce using rule 60 (action_add_operator -> .)
    doubleValue     reduce using rule 60 (action_add_operator -> .)
    id              reduce using rule 60 (action_add_operator -> .)

    action_add_operator            shift and go to state 50

state 39

    (21) val -> openParenthesis arithmeticExpression . closeParenthesis
    (15) arithmeticExpression -> arithmeticExpression . plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (16) arithmeticExpression -> arithmeticExpression . minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression

    closeParenthesis shift and go to state 51
    plus            shift and go to state 35
    minus           shift and go to state 36


state 40

    (26) value -> intValue action_int_value .

    multiply        reduce using rule 26 (value -> intValue action_int_value .)
    divide          reduce using rule 26 (value -> intValue action_int_value .)
    comma           reduce using rule 26 (value -> intValue action_int_value .)
    plus            reduce using rule 26 (value -> intValue action_int_value .)
    minus           reduce using rule 26 (value -> intValue action_int_value .)
    semicolon       reduce using rule 26 (value -> intValue action_int_value .)
    closeBracket    reduce using rule 26 (value -> intValue action_int_value .)
    closeParenthesis reduce using rule 26 (value -> intValue action_int_value .)
    greaterThan     reduce using rule 26 (value -> intValue action_int_value .)
    lessThan        reduce using rule 26 (value -> intValue action_int_value .)
    isEqual         reduce using rule 26 (value -> intValue action_int_value .)
    notEqual        reduce using rule 26 (value -> intValue action_int_value .)
    greaterOrEqual  reduce using rule 26 (value -> intValue action_int_value .)
    lessOrEqual     reduce using rule 26 (value -> intValue action_int_value .)
    and             reduce using rule 26 (value -> intValue action_int_value .)
    or              reduce using rule 26 (value -> intValue action_int_value .)


state 41

    (27) value -> doubleValue action_double_value .

    multiply        reduce using rule 27 (value -> doubleValue action_double_value .)
    divide          reduce using rule 27 (value -> doubleValue action_double_value .)
    comma           reduce using rule 27 (value -> doubleValue action_double_value .)
    plus            reduce using rule 27 (value -> doubleValue action_double_value .)
    minus           reduce using rule 27 (value -> doubleValue action_double_value .)
    semicolon       reduce using rule 27 (value -> doubleValue action_double_value .)
    closeBracket    reduce using rule 27 (value -> doubleValue action_double_value .)
    closeParenthesis reduce using rule 27 (value -> doubleValue action_double_value .)
    greaterThan     reduce using rule 27 (value -> doubleValue action_double_value .)
    lessThan        reduce using rule 27 (value -> doubleValue action_double_value .)
    isEqual         reduce using rule 27 (value -> doubleValue action_double_value .)
    notEqual        reduce using rule 27 (value -> doubleValue action_double_value .)
    greaterOrEqual  reduce using rule 27 (value -> doubleValue action_double_value .)
    lessOrEqual     reduce using rule 27 (value -> doubleValue action_double_value .)
    and             reduce using rule 27 (value -> doubleValue action_double_value .)
    or              reduce using rule 27 (value -> doubleValue action_double_value .)


state 42

    (28) value -> id action_var_value .

    multiply        reduce using rule 28 (value -> id action_var_value .)
    divide          reduce using rule 28 (value -> id action_var_value .)
    comma           reduce using rule 28 (value -> id action_var_value .)
    plus            reduce using rule 28 (value -> id action_var_value .)
    minus           reduce using rule 28 (value -> id action_var_value .)
    semicolon       reduce using rule 28 (value -> id action_var_value .)
    closeBracket    reduce using rule 28 (value -> id action_var_value .)
    closeParenthesis reduce using rule 28 (value -> id action_var_value .)
    greaterThan     reduce using rule 28 (value -> id action_var_value .)
    lessThan        reduce using rule 28 (value -> id action_var_value .)
    isEqual         reduce using rule 28 (value -> id action_var_value .)
    notEqual        reduce using rule 28 (value -> id action_var_value .)
    greaterOrEqual  reduce using rule 28 (value -> id action_var_value .)
    lessOrEqual     reduce using rule 28 (value -> id action_var_value .)
    and             reduce using rule 28 (value -> id action_var_value .)
    or              reduce using rule 28 (value -> id action_var_value .)


state 43

    (9) dimentions -> openBracket value closeBracket .
    (10) dimentions -> openBracket value closeBracket . openBracket value closeBracket

    equal           reduce using rule 9 (dimentions -> openBracket value closeBracket .)
    comma           reduce using rule 9 (dimentions -> openBracket value closeBracket .)
    semicolon       reduce using rule 9 (dimentions -> openBracket value closeBracket .)
    openBracket     shift and go to state 52


state 44

    (31) mainProgram -> main openParenthesis closeParenthesis openBrace . subroutine closeBrace
    (32) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (33) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (34) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (35) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (36) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . id equal arithmeticExpression action_generate_quadruplet semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (22) unaryExpression -> . id plusPlus
    (23) unaryExpression -> . id minusMinus
    (24) unaryExpression -> . plusPlus id
    (25) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 54
    consoleRead     shift and go to state 55
    if              shift and go to state 57
    while           shift and go to state 58
    for             shift and go to state 59
    id              shift and go to state 56
    call            shift and go to state 61
    closeBrace      reduce using rule 40 (subroutine -> .)
    plusPlus        shift and go to state 62
    minusMinus      shift and go to state 63

    subroutine                     shift and go to state 53
    unaryExpression                shift and go to state 60

state 45

    (29) func -> function id openParenthesis closeParenthesis openBrace . subroutine closeBrace func
    (32) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (33) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (34) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (35) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (36) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . id equal arithmeticExpression action_generate_quadruplet semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (22) unaryExpression -> . id plusPlus
    (23) unaryExpression -> . id minusMinus
    (24) unaryExpression -> . plusPlus id
    (25) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 54
    consoleRead     shift and go to state 55
    if              shift and go to state 57
    while           shift and go to state 58
    for             shift and go to state 59
    id              shift and go to state 56
    call            shift and go to state 61
    closeBrace      reduce using rule 40 (subroutine -> .)
    plusPlus        shift and go to state 62
    minusMinus      shift and go to state 63

    subroutine                     shift and go to state 64
    unaryExpression                shift and go to state 60

state 46

    (6) varSequence -> variable equal arithmeticExpression comma varSequence .

    semicolon       reduce using rule 6 (varSequence -> variable equal arithmeticExpression comma varSequence .)


state 47

    (15) arithmeticExpression -> arithmeticExpression plus action_add_operator . multiplyDivide action_quadruplet_arithmetic_expression
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide
    (19) multiplyDivide -> . multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide
    (20) val -> . value
    (21) val -> . openParenthesis arithmeticExpression closeParenthesis
    (26) value -> . intValue action_int_value
    (27) value -> . doubleValue action_double_value
    (28) value -> . id action_var_value

    openParenthesis shift and go to state 26
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 29

    multiplyDivide                 shift and go to state 65
    val                            shift and go to state 24
    value                          shift and go to state 25

state 48

    (16) arithmeticExpression -> arithmeticExpression minus action_add_operator . multiplyDivide action_quadruplet_arithmetic_expression
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide
    (19) multiplyDivide -> . multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide
    (20) val -> . value
    (21) val -> . openParenthesis arithmeticExpression closeParenthesis
    (26) value -> . intValue action_int_value
    (27) value -> . doubleValue action_double_value
    (28) value -> . id action_var_value

    openParenthesis shift and go to state 26
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 29

    multiplyDivide                 shift and go to state 66
    val                            shift and go to state 24
    value                          shift and go to state 25

state 49

    (18) multiplyDivide -> multiplyDivide multiply action_add_operator . val action_quadruplet_multiply_divide
    (20) val -> . value
    (21) val -> . openParenthesis arithmeticExpression closeParenthesis
    (26) value -> . intValue action_int_value
    (27) value -> . doubleValue action_double_value
    (28) value -> . id action_var_value

    openParenthesis shift and go to state 26
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 29

    val                            shift and go to state 67
    value                          shift and go to state 25

state 50

    (19) multiplyDivide -> multiplyDivide divide action_add_operator . val action_quadruplet_multiply_divide
    (20) val -> . value
    (21) val -> . openParenthesis arithmeticExpression closeParenthesis
    (26) value -> . intValue action_int_value
    (27) value -> . doubleValue action_double_value
    (28) value -> . id action_var_value

    openParenthesis shift and go to state 26
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 29

    val                            shift and go to state 68
    value                          shift and go to state 25

state 51

    (21) val -> openParenthesis arithmeticExpression closeParenthesis .

    multiply        reduce using rule 21 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    divide          reduce using rule 21 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    comma           reduce using rule 21 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    plus            reduce using rule 21 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    minus           reduce using rule 21 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    semicolon       reduce using rule 21 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    closeParenthesis reduce using rule 21 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    greaterThan     reduce using rule 21 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    lessThan        reduce using rule 21 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    isEqual         reduce using rule 21 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    notEqual        reduce using rule 21 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    greaterOrEqual  reduce using rule 21 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    lessOrEqual     reduce using rule 21 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    and             reduce using rule 21 (val -> openParenthesis arithmeticExpression closeParenthesis .)
    or              reduce using rule 21 (val -> openParenthesis arithmeticExpression closeParenthesis .)


state 52

    (10) dimentions -> openBracket value closeBracket openBracket . value closeBracket
    (26) value -> . intValue action_int_value
    (27) value -> . doubleValue action_double_value
    (28) value -> . id action_var_value

    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 29

    value                          shift and go to state 69

state 53

    (31) mainProgram -> main openParenthesis closeParenthesis openBrace subroutine . closeBrace

    closeBrace      shift and go to state 70


state 54

    (32) subroutine -> consoleWrite . openParenthesis cout closeParenthesis semicolon subroutine

    openParenthesis shift and go to state 71


state 55

    (33) subroutine -> consoleRead . openParenthesis id closeParenthesis semicolon subroutine

    openParenthesis shift and go to state 72


state 56

    (37) subroutine -> id . equal arithmeticExpression action_generate_quadruplet semicolon subroutine
    (22) unaryExpression -> id . plusPlus
    (23) unaryExpression -> id . minusMinus

    equal           shift and go to state 73
    plusPlus        shift and go to state 74
    minusMinus      shift and go to state 75


state 57

    (34) subroutine -> if . openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine

    openParenthesis shift and go to state 76


state 58

    (35) subroutine -> while . openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine

    openParenthesis shift and go to state 77


state 59

    (36) subroutine -> for . openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine

    openParenthesis shift and go to state 78


state 60

    (38) subroutine -> unaryExpression . semicolon subroutine

    semicolon       shift and go to state 79


state 61

    (39) subroutine -> call . id openParenthesis closeParenthesis semicolon subroutine

    id              shift and go to state 80


state 62

    (24) unaryExpression -> plusPlus . id

    id              shift and go to state 81


state 63

    (25) unaryExpression -> minusMinus . id

    id              shift and go to state 82


state 64

    (29) func -> function id openParenthesis closeParenthesis openBrace subroutine . closeBrace func

    closeBrace      shift and go to state 83


state 65

    (15) arithmeticExpression -> arithmeticExpression plus action_add_operator multiplyDivide . action_quadruplet_arithmetic_expression
    (18) multiplyDivide -> multiplyDivide . multiply action_add_operator val action_quadruplet_multiply_divide
    (19) multiplyDivide -> multiplyDivide . divide action_add_operator val action_quadruplet_multiply_divide
    (62) action_quadruplet_arithmetic_expression -> .

    multiply        shift and go to state 37
    divide          shift and go to state 38
    comma           reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    plus            reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    minus           reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    semicolon       reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    closeParenthesis reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    greaterThan     reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    lessThan        reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    isEqual         reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    notEqual        reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    greaterOrEqual  reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    lessOrEqual     reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    and             reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    or              reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)

    action_quadruplet_arithmetic_expression shift and go to state 84

state 66

    (16) arithmeticExpression -> arithmeticExpression minus action_add_operator multiplyDivide . action_quadruplet_arithmetic_expression
    (18) multiplyDivide -> multiplyDivide . multiply action_add_operator val action_quadruplet_multiply_divide
    (19) multiplyDivide -> multiplyDivide . divide action_add_operator val action_quadruplet_multiply_divide
    (62) action_quadruplet_arithmetic_expression -> .

    multiply        shift and go to state 37
    divide          shift and go to state 38
    comma           reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    plus            reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    minus           reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    semicolon       reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    closeParenthesis reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    greaterThan     reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    lessThan        reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    isEqual         reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    notEqual        reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    greaterOrEqual  reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    lessOrEqual     reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    and             reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)
    or              reduce using rule 62 (action_quadruplet_arithmetic_expression -> .)

    action_quadruplet_arithmetic_expression shift and go to state 85

state 67

    (18) multiplyDivide -> multiplyDivide multiply action_add_operator val . action_quadruplet_multiply_divide
    (63) action_quadruplet_multiply_divide -> .

    multiply        reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    divide          reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    comma           reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    plus            reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    minus           reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    semicolon       reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    closeParenthesis reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    greaterThan     reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    lessThan        reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    isEqual         reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    notEqual        reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    greaterOrEqual  reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    lessOrEqual     reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    and             reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    or              reduce using rule 63 (action_quadruplet_multiply_divide -> .)

    action_quadruplet_multiply_divide shift and go to state 86

state 68

    (19) multiplyDivide -> multiplyDivide divide action_add_operator val . action_quadruplet_multiply_divide
    (63) action_quadruplet_multiply_divide -> .

    multiply        reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    divide          reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    comma           reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    plus            reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    minus           reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    semicolon       reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    closeParenthesis reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    greaterThan     reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    lessThan        reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    isEqual         reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    notEqual        reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    greaterOrEqual  reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    lessOrEqual     reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    and             reduce using rule 63 (action_quadruplet_multiply_divide -> .)
    or              reduce using rule 63 (action_quadruplet_multiply_divide -> .)

    action_quadruplet_multiply_divide shift and go to state 87

state 69

    (10) dimentions -> openBracket value closeBracket openBracket value . closeBracket

    closeBracket    shift and go to state 88


state 70

    (31) mainProgram -> main openParenthesis closeParenthesis openBrace subroutine closeBrace .

    $end            reduce using rule 31 (mainProgram -> main openParenthesis closeParenthesis openBrace subroutine closeBrace .)


state 71

    (32) subroutine -> consoleWrite openParenthesis . cout closeParenthesis semicolon subroutine
    (55) cout -> . arithmeticExpression
    (56) cout -> . string
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (16) arithmeticExpression -> . arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide
    (19) multiplyDivide -> . multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide
    (20) val -> . value
    (21) val -> . openParenthesis arithmeticExpression closeParenthesis
    (26) value -> . intValue action_int_value
    (27) value -> . doubleValue action_double_value
    (28) value -> . id action_var_value

    string          shift and go to state 91
    openParenthesis shift and go to state 26
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 29

    cout                           shift and go to state 89
    arithmeticExpression           shift and go to state 90
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25

state 72

    (33) subroutine -> consoleRead openParenthesis . id closeParenthesis semicolon subroutine

    id              shift and go to state 92


state 73

    (37) subroutine -> id equal . arithmeticExpression action_generate_quadruplet semicolon subroutine
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (16) arithmeticExpression -> . arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide
    (19) multiplyDivide -> . multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide
    (20) val -> . value
    (21) val -> . openParenthesis arithmeticExpression closeParenthesis
    (26) value -> . intValue action_int_value
    (27) value -> . doubleValue action_double_value
    (28) value -> . id action_var_value

    openParenthesis shift and go to state 26
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 29

    arithmeticExpression           shift and go to state 93
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25

state 74

    (22) unaryExpression -> id plusPlus .

    semicolon       reduce using rule 22 (unaryExpression -> id plusPlus .)


state 75

    (23) unaryExpression -> id minusMinus .

    semicolon       reduce using rule 23 (unaryExpression -> id minusMinus .)


state 76

    (34) subroutine -> if openParenthesis . statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (44) statement -> . arithmeticExpression
    (45) statement -> . arithmeticExpression logicExpression arithmeticExpression
    (46) statement -> . statement logicExpression statement
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (16) arithmeticExpression -> . arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide
    (19) multiplyDivide -> . multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide
    (20) val -> . value
    (21) val -> . openParenthesis arithmeticExpression closeParenthesis
    (26) value -> . intValue action_int_value
    (27) value -> . doubleValue action_double_value
    (28) value -> . id action_var_value

    openParenthesis shift and go to state 26
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 29

    statement                      shift and go to state 94
    arithmeticExpression           shift and go to state 95
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25

state 77

    (35) subroutine -> while openParenthesis . statement closeParenthesis openBrace subroutine closeBrace subroutine
    (44) statement -> . arithmeticExpression
    (45) statement -> . arithmeticExpression logicExpression arithmeticExpression
    (46) statement -> . statement logicExpression statement
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (16) arithmeticExpression -> . arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide
    (19) multiplyDivide -> . multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide
    (20) val -> . value
    (21) val -> . openParenthesis arithmeticExpression closeParenthesis
    (26) value -> . intValue action_int_value
    (27) value -> . doubleValue action_double_value
    (28) value -> . id action_var_value

    openParenthesis shift and go to state 26
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 29

    statement                      shift and go to state 96
    arithmeticExpression           shift and go to state 95
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25

state 78

    (36) subroutine -> for openParenthesis . varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (4) varSequence -> . variable equal arithmeticExpression
    (5) varSequence -> . variable
    (6) varSequence -> . variable equal arithmeticExpression comma varSequence
    (7) varSequence -> . variable comma varSequence
    (8) variable -> . id dimentions

    id              shift and go to state 10

    varSequence                    shift and go to state 97
    variable                       shift and go to state 9

state 79

    (38) subroutine -> unaryExpression semicolon . subroutine
    (32) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (33) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (34) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (35) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (36) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . id equal arithmeticExpression action_generate_quadruplet semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (22) unaryExpression -> . id plusPlus
    (23) unaryExpression -> . id minusMinus
    (24) unaryExpression -> . plusPlus id
    (25) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 54
    consoleRead     shift and go to state 55
    if              shift and go to state 57
    while           shift and go to state 58
    for             shift and go to state 59
    id              shift and go to state 56
    call            shift and go to state 61
    closeBrace      reduce using rule 40 (subroutine -> .)
    plusPlus        shift and go to state 62
    minusMinus      shift and go to state 63

    unaryExpression                shift and go to state 60
    subroutine                     shift and go to state 98

state 80

    (39) subroutine -> call id . openParenthesis closeParenthesis semicolon subroutine

    openParenthesis shift and go to state 99


state 81

    (24) unaryExpression -> plusPlus id .

    semicolon       reduce using rule 24 (unaryExpression -> plusPlus id .)


state 82

    (25) unaryExpression -> minusMinus id .

    semicolon       reduce using rule 25 (unaryExpression -> minusMinus id .)


state 83

    (29) func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace . func
    (29) func -> . function id openParenthesis closeParenthesis openBrace subroutine closeBrace func
    (30) func -> .

    function        shift and go to state 7
    main            reduce using rule 30 (func -> .)

    func                           shift and go to state 100

state 84

    (15) arithmeticExpression -> arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .

    comma           reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    plus            reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    minus           reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    semicolon       reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    closeParenthesis reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    greaterThan     reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    lessThan        reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    isEqual         reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    notEqual        reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    greaterOrEqual  reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    lessOrEqual     reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    and             reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    or              reduce using rule 15 (arithmeticExpression -> arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)


state 85

    (16) arithmeticExpression -> arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .

    comma           reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    plus            reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    minus           reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    semicolon       reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    closeParenthesis reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    greaterThan     reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    lessThan        reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    isEqual         reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    notEqual        reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    greaterOrEqual  reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    lessOrEqual     reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    and             reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)
    or              reduce using rule 16 (arithmeticExpression -> arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression .)


state 86

    (18) multiplyDivide -> multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide .

    multiply        reduce using rule 18 (multiplyDivide -> multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide .)
    divide          reduce using rule 18 (multiplyDivide -> multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide .)
    comma           reduce using rule 18 (multiplyDivide -> multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide .)
    plus            reduce using rule 18 (multiplyDivide -> multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide .)
    minus           reduce using rule 18 (multiplyDivide -> multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide .)
    semicolon       reduce using rule 18 (multiplyDivide -> multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide .)
    closeParenthesis reduce using rule 18 (multiplyDivide -> multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide .)
    greaterThan     reduce using rule 18 (multiplyDivide -> multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide .)
    lessThan        reduce using rule 18 (multiplyDivide -> multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide .)
    isEqual         reduce using rule 18 (multiplyDivide -> multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide .)
    notEqual        reduce using rule 18 (multiplyDivide -> multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide .)
    greaterOrEqual  reduce using rule 18 (multiplyDivide -> multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide .)
    lessOrEqual     reduce using rule 18 (multiplyDivide -> multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide .)
    and             reduce using rule 18 (multiplyDivide -> multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide .)
    or              reduce using rule 18 (multiplyDivide -> multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide .)


state 87

    (19) multiplyDivide -> multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide .

    multiply        reduce using rule 19 (multiplyDivide -> multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide .)
    divide          reduce using rule 19 (multiplyDivide -> multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide .)
    comma           reduce using rule 19 (multiplyDivide -> multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide .)
    plus            reduce using rule 19 (multiplyDivide -> multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide .)
    minus           reduce using rule 19 (multiplyDivide -> multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide .)
    semicolon       reduce using rule 19 (multiplyDivide -> multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide .)
    closeParenthesis reduce using rule 19 (multiplyDivide -> multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide .)
    greaterThan     reduce using rule 19 (multiplyDivide -> multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide .)
    lessThan        reduce using rule 19 (multiplyDivide -> multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide .)
    isEqual         reduce using rule 19 (multiplyDivide -> multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide .)
    notEqual        reduce using rule 19 (multiplyDivide -> multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide .)
    greaterOrEqual  reduce using rule 19 (multiplyDivide -> multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide .)
    lessOrEqual     reduce using rule 19 (multiplyDivide -> multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide .)
    and             reduce using rule 19 (multiplyDivide -> multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide .)
    or              reduce using rule 19 (multiplyDivide -> multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide .)


state 88

    (10) dimentions -> openBracket value closeBracket openBracket value closeBracket .

    equal           reduce using rule 10 (dimentions -> openBracket value closeBracket openBracket value closeBracket .)
    comma           reduce using rule 10 (dimentions -> openBracket value closeBracket openBracket value closeBracket .)
    semicolon       reduce using rule 10 (dimentions -> openBracket value closeBracket openBracket value closeBracket .)


state 89

    (32) subroutine -> consoleWrite openParenthesis cout . closeParenthesis semicolon subroutine

    closeParenthesis shift and go to state 101


state 90

    (55) cout -> arithmeticExpression .
    (15) arithmeticExpression -> arithmeticExpression . plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (16) arithmeticExpression -> arithmeticExpression . minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression

    closeParenthesis reduce using rule 55 (cout -> arithmeticExpression .)
    plus            shift and go to state 35
    minus           shift and go to state 36


state 91

    (56) cout -> string .

    closeParenthesis reduce using rule 56 (cout -> string .)


state 92

    (33) subroutine -> consoleRead openParenthesis id . closeParenthesis semicolon subroutine

    closeParenthesis shift and go to state 102


state 93

    (37) subroutine -> id equal arithmeticExpression . action_generate_quadruplet semicolon subroutine
    (15) arithmeticExpression -> arithmeticExpression . plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (16) arithmeticExpression -> arithmeticExpression . minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (61) action_generate_quadruplet -> .

    plus            shift and go to state 35
    minus           shift and go to state 36
    semicolon       reduce using rule 61 (action_generate_quadruplet -> .)

    action_generate_quadruplet     shift and go to state 103

state 94

    (34) subroutine -> if openParenthesis statement . closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (46) statement -> statement . logicExpression statement
    (47) logicExpression -> . greaterThan
    (48) logicExpression -> . lessThan
    (49) logicExpression -> . isEqual
    (50) logicExpression -> . notEqual
    (51) logicExpression -> . greaterOrEqual
    (52) logicExpression -> . lessOrEqual
    (53) logicExpression -> . and
    (54) logicExpression -> . or

    closeParenthesis shift and go to state 104
    greaterThan     shift and go to state 106
    lessThan        shift and go to state 107
    isEqual         shift and go to state 108
    notEqual        shift and go to state 109
    greaterOrEqual  shift and go to state 110
    lessOrEqual     shift and go to state 111
    and             shift and go to state 112
    or              shift and go to state 113

    logicExpression                shift and go to state 105

state 95

    (44) statement -> arithmeticExpression .
    (45) statement -> arithmeticExpression . logicExpression arithmeticExpression
    (15) arithmeticExpression -> arithmeticExpression . plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (16) arithmeticExpression -> arithmeticExpression . minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (47) logicExpression -> . greaterThan
    (48) logicExpression -> . lessThan
    (49) logicExpression -> . isEqual
    (50) logicExpression -> . notEqual
    (51) logicExpression -> . greaterOrEqual
    (52) logicExpression -> . lessOrEqual
    (53) logicExpression -> . and
    (54) logicExpression -> . or

  ! shift/reduce conflict for greaterThan resolved as shift
  ! shift/reduce conflict for lessThan resolved as shift
  ! shift/reduce conflict for isEqual resolved as shift
  ! shift/reduce conflict for notEqual resolved as shift
  ! shift/reduce conflict for greaterOrEqual resolved as shift
  ! shift/reduce conflict for lessOrEqual resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    closeParenthesis reduce using rule 44 (statement -> arithmeticExpression .)
    semicolon       reduce using rule 44 (statement -> arithmeticExpression .)
    plus            shift and go to state 35
    minus           shift and go to state 36
    greaterThan     shift and go to state 106
    lessThan        shift and go to state 107
    isEqual         shift and go to state 108
    notEqual        shift and go to state 109
    greaterOrEqual  shift and go to state 110
    lessOrEqual     shift and go to state 111
    and             shift and go to state 112
    or              shift and go to state 113

  ! greaterThan     [ reduce using rule 44 (statement -> arithmeticExpression .) ]
  ! lessThan        [ reduce using rule 44 (statement -> arithmeticExpression .) ]
  ! isEqual         [ reduce using rule 44 (statement -> arithmeticExpression .) ]
  ! notEqual        [ reduce using rule 44 (statement -> arithmeticExpression .) ]
  ! greaterOrEqual  [ reduce using rule 44 (statement -> arithmeticExpression .) ]
  ! lessOrEqual     [ reduce using rule 44 (statement -> arithmeticExpression .) ]
  ! and             [ reduce using rule 44 (statement -> arithmeticExpression .) ]
  ! or              [ reduce using rule 44 (statement -> arithmeticExpression .) ]

    logicExpression                shift and go to state 114

state 96

    (35) subroutine -> while openParenthesis statement . closeParenthesis openBrace subroutine closeBrace subroutine
    (46) statement -> statement . logicExpression statement
    (47) logicExpression -> . greaterThan
    (48) logicExpression -> . lessThan
    (49) logicExpression -> . isEqual
    (50) logicExpression -> . notEqual
    (51) logicExpression -> . greaterOrEqual
    (52) logicExpression -> . lessOrEqual
    (53) logicExpression -> . and
    (54) logicExpression -> . or

    closeParenthesis shift and go to state 115
    greaterThan     shift and go to state 106
    lessThan        shift and go to state 107
    isEqual         shift and go to state 108
    notEqual        shift and go to state 109
    greaterOrEqual  shift and go to state 110
    lessOrEqual     shift and go to state 111
    and             shift and go to state 112
    or              shift and go to state 113

    logicExpression                shift and go to state 105

state 97

    (36) subroutine -> for openParenthesis varSequence . semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine

    semicolon       shift and go to state 116


state 98

    (38) subroutine -> unaryExpression semicolon subroutine .

    closeBrace      reduce using rule 38 (subroutine -> unaryExpression semicolon subroutine .)


state 99

    (39) subroutine -> call id openParenthesis . closeParenthesis semicolon subroutine

    closeParenthesis shift and go to state 117


state 100

    (29) func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace func .

    main            reduce using rule 29 (func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace func .)


state 101

    (32) subroutine -> consoleWrite openParenthesis cout closeParenthesis . semicolon subroutine

    semicolon       shift and go to state 118


state 102

    (33) subroutine -> consoleRead openParenthesis id closeParenthesis . semicolon subroutine

    semicolon       shift and go to state 119


state 103

    (37) subroutine -> id equal arithmeticExpression action_generate_quadruplet . semicolon subroutine

    semicolon       shift and go to state 120


state 104

    (34) subroutine -> if openParenthesis statement closeParenthesis . openBrace subroutine closeBrace elseStatement subroutine

    openBrace       shift and go to state 121


state 105

    (46) statement -> statement logicExpression . statement
    (44) statement -> . arithmeticExpression
    (45) statement -> . arithmeticExpression logicExpression arithmeticExpression
    (46) statement -> . statement logicExpression statement
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (16) arithmeticExpression -> . arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide
    (19) multiplyDivide -> . multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide
    (20) val -> . value
    (21) val -> . openParenthesis arithmeticExpression closeParenthesis
    (26) value -> . intValue action_int_value
    (27) value -> . doubleValue action_double_value
    (28) value -> . id action_var_value

    openParenthesis shift and go to state 26
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 29

    statement                      shift and go to state 122
    arithmeticExpression           shift and go to state 95
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25

state 106

    (47) logicExpression -> greaterThan .

    openParenthesis reduce using rule 47 (logicExpression -> greaterThan .)
    intValue        reduce using rule 47 (logicExpression -> greaterThan .)
    doubleValue     reduce using rule 47 (logicExpression -> greaterThan .)
    id              reduce using rule 47 (logicExpression -> greaterThan .)


state 107

    (48) logicExpression -> lessThan .

    openParenthesis reduce using rule 48 (logicExpression -> lessThan .)
    intValue        reduce using rule 48 (logicExpression -> lessThan .)
    doubleValue     reduce using rule 48 (logicExpression -> lessThan .)
    id              reduce using rule 48 (logicExpression -> lessThan .)


state 108

    (49) logicExpression -> isEqual .

    openParenthesis reduce using rule 49 (logicExpression -> isEqual .)
    intValue        reduce using rule 49 (logicExpression -> isEqual .)
    doubleValue     reduce using rule 49 (logicExpression -> isEqual .)
    id              reduce using rule 49 (logicExpression -> isEqual .)


state 109

    (50) logicExpression -> notEqual .

    openParenthesis reduce using rule 50 (logicExpression -> notEqual .)
    intValue        reduce using rule 50 (logicExpression -> notEqual .)
    doubleValue     reduce using rule 50 (logicExpression -> notEqual .)
    id              reduce using rule 50 (logicExpression -> notEqual .)


state 110

    (51) logicExpression -> greaterOrEqual .

    openParenthesis reduce using rule 51 (logicExpression -> greaterOrEqual .)
    intValue        reduce using rule 51 (logicExpression -> greaterOrEqual .)
    doubleValue     reduce using rule 51 (logicExpression -> greaterOrEqual .)
    id              reduce using rule 51 (logicExpression -> greaterOrEqual .)


state 111

    (52) logicExpression -> lessOrEqual .

    openParenthesis reduce using rule 52 (logicExpression -> lessOrEqual .)
    intValue        reduce using rule 52 (logicExpression -> lessOrEqual .)
    doubleValue     reduce using rule 52 (logicExpression -> lessOrEqual .)
    id              reduce using rule 52 (logicExpression -> lessOrEqual .)


state 112

    (53) logicExpression -> and .

    openParenthesis reduce using rule 53 (logicExpression -> and .)
    intValue        reduce using rule 53 (logicExpression -> and .)
    doubleValue     reduce using rule 53 (logicExpression -> and .)
    id              reduce using rule 53 (logicExpression -> and .)


state 113

    (54) logicExpression -> or .

    openParenthesis reduce using rule 54 (logicExpression -> or .)
    intValue        reduce using rule 54 (logicExpression -> or .)
    doubleValue     reduce using rule 54 (logicExpression -> or .)
    id              reduce using rule 54 (logicExpression -> or .)


state 114

    (45) statement -> arithmeticExpression logicExpression . arithmeticExpression
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (16) arithmeticExpression -> . arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide
    (19) multiplyDivide -> . multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide
    (20) val -> . value
    (21) val -> . openParenthesis arithmeticExpression closeParenthesis
    (26) value -> . intValue action_int_value
    (27) value -> . doubleValue action_double_value
    (28) value -> . id action_var_value

    openParenthesis shift and go to state 26
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 29

    arithmeticExpression           shift and go to state 123
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25

state 115

    (35) subroutine -> while openParenthesis statement closeParenthesis . openBrace subroutine closeBrace subroutine

    openBrace       shift and go to state 124


state 116

    (36) subroutine -> for openParenthesis varSequence semicolon . statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (44) statement -> . arithmeticExpression
    (45) statement -> . arithmeticExpression logicExpression arithmeticExpression
    (46) statement -> . statement logicExpression statement
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (16) arithmeticExpression -> . arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide
    (19) multiplyDivide -> . multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide
    (20) val -> . value
    (21) val -> . openParenthesis arithmeticExpression closeParenthesis
    (26) value -> . intValue action_int_value
    (27) value -> . doubleValue action_double_value
    (28) value -> . id action_var_value

    openParenthesis shift and go to state 26
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 29

    statement                      shift and go to state 125
    arithmeticExpression           shift and go to state 95
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25

state 117

    (39) subroutine -> call id openParenthesis closeParenthesis . semicolon subroutine

    semicolon       shift and go to state 126


state 118

    (32) subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon . subroutine
    (32) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (33) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (34) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (35) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (36) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . id equal arithmeticExpression action_generate_quadruplet semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (22) unaryExpression -> . id plusPlus
    (23) unaryExpression -> . id minusMinus
    (24) unaryExpression -> . plusPlus id
    (25) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 54
    consoleRead     shift and go to state 55
    if              shift and go to state 57
    while           shift and go to state 58
    for             shift and go to state 59
    id              shift and go to state 56
    call            shift and go to state 61
    closeBrace      reduce using rule 40 (subroutine -> .)
    plusPlus        shift and go to state 62
    minusMinus      shift and go to state 63

    subroutine                     shift and go to state 127
    unaryExpression                shift and go to state 60

state 119

    (33) subroutine -> consoleRead openParenthesis id closeParenthesis semicolon . subroutine
    (32) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (33) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (34) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (35) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (36) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . id equal arithmeticExpression action_generate_quadruplet semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (22) unaryExpression -> . id plusPlus
    (23) unaryExpression -> . id minusMinus
    (24) unaryExpression -> . plusPlus id
    (25) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 54
    consoleRead     shift and go to state 55
    if              shift and go to state 57
    while           shift and go to state 58
    for             shift and go to state 59
    id              shift and go to state 56
    call            shift and go to state 61
    closeBrace      reduce using rule 40 (subroutine -> .)
    plusPlus        shift and go to state 62
    minusMinus      shift and go to state 63

    subroutine                     shift and go to state 128
    unaryExpression                shift and go to state 60

state 120

    (37) subroutine -> id equal arithmeticExpression action_generate_quadruplet semicolon . subroutine
    (32) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (33) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (34) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (35) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (36) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . id equal arithmeticExpression action_generate_quadruplet semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (22) unaryExpression -> . id plusPlus
    (23) unaryExpression -> . id minusMinus
    (24) unaryExpression -> . plusPlus id
    (25) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 54
    consoleRead     shift and go to state 55
    if              shift and go to state 57
    while           shift and go to state 58
    for             shift and go to state 59
    id              shift and go to state 56
    call            shift and go to state 61
    closeBrace      reduce using rule 40 (subroutine -> .)
    plusPlus        shift and go to state 62
    minusMinus      shift and go to state 63

    subroutine                     shift and go to state 129
    unaryExpression                shift and go to state 60

state 121

    (34) subroutine -> if openParenthesis statement closeParenthesis openBrace . subroutine closeBrace elseStatement subroutine
    (32) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (33) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (34) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (35) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (36) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . id equal arithmeticExpression action_generate_quadruplet semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (22) unaryExpression -> . id plusPlus
    (23) unaryExpression -> . id minusMinus
    (24) unaryExpression -> . plusPlus id
    (25) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 54
    consoleRead     shift and go to state 55
    if              shift and go to state 57
    while           shift and go to state 58
    for             shift and go to state 59
    id              shift and go to state 56
    call            shift and go to state 61
    closeBrace      reduce using rule 40 (subroutine -> .)
    plusPlus        shift and go to state 62
    minusMinus      shift and go to state 63

    subroutine                     shift and go to state 130
    unaryExpression                shift and go to state 60

state 122

    (46) statement -> statement logicExpression statement .
    (46) statement -> statement . logicExpression statement
    (47) logicExpression -> . greaterThan
    (48) logicExpression -> . lessThan
    (49) logicExpression -> . isEqual
    (50) logicExpression -> . notEqual
    (51) logicExpression -> . greaterOrEqual
    (52) logicExpression -> . lessOrEqual
    (53) logicExpression -> . and
    (54) logicExpression -> . or

  ! shift/reduce conflict for greaterThan resolved as shift
  ! shift/reduce conflict for lessThan resolved as shift
  ! shift/reduce conflict for isEqual resolved as shift
  ! shift/reduce conflict for notEqual resolved as shift
  ! shift/reduce conflict for greaterOrEqual resolved as shift
  ! shift/reduce conflict for lessOrEqual resolved as shift
  ! shift/reduce conflict for and resolved as shift
  ! shift/reduce conflict for or resolved as shift
    closeParenthesis reduce using rule 46 (statement -> statement logicExpression statement .)
    semicolon       reduce using rule 46 (statement -> statement logicExpression statement .)
    greaterThan     shift and go to state 106
    lessThan        shift and go to state 107
    isEqual         shift and go to state 108
    notEqual        shift and go to state 109
    greaterOrEqual  shift and go to state 110
    lessOrEqual     shift and go to state 111
    and             shift and go to state 112
    or              shift and go to state 113

  ! greaterThan     [ reduce using rule 46 (statement -> statement logicExpression statement .) ]
  ! lessThan        [ reduce using rule 46 (statement -> statement logicExpression statement .) ]
  ! isEqual         [ reduce using rule 46 (statement -> statement logicExpression statement .) ]
  ! notEqual        [ reduce using rule 46 (statement -> statement logicExpression statement .) ]
  ! greaterOrEqual  [ reduce using rule 46 (statement -> statement logicExpression statement .) ]
  ! lessOrEqual     [ reduce using rule 46 (statement -> statement logicExpression statement .) ]
  ! and             [ reduce using rule 46 (statement -> statement logicExpression statement .) ]
  ! or              [ reduce using rule 46 (statement -> statement logicExpression statement .) ]

    logicExpression                shift and go to state 105

state 123

    (45) statement -> arithmeticExpression logicExpression arithmeticExpression .
    (15) arithmeticExpression -> arithmeticExpression . plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (16) arithmeticExpression -> arithmeticExpression . minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression

    closeParenthesis reduce using rule 45 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    greaterThan     reduce using rule 45 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    lessThan        reduce using rule 45 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    isEqual         reduce using rule 45 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    notEqual        reduce using rule 45 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    greaterOrEqual  reduce using rule 45 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    lessOrEqual     reduce using rule 45 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    and             reduce using rule 45 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    or              reduce using rule 45 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    semicolon       reduce using rule 45 (statement -> arithmeticExpression logicExpression arithmeticExpression .)
    plus            shift and go to state 35
    minus           shift and go to state 36


state 124

    (35) subroutine -> while openParenthesis statement closeParenthesis openBrace . subroutine closeBrace subroutine
    (32) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (33) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (34) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (35) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (36) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . id equal arithmeticExpression action_generate_quadruplet semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (22) unaryExpression -> . id plusPlus
    (23) unaryExpression -> . id minusMinus
    (24) unaryExpression -> . plusPlus id
    (25) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 54
    consoleRead     shift and go to state 55
    if              shift and go to state 57
    while           shift and go to state 58
    for             shift and go to state 59
    id              shift and go to state 56
    call            shift and go to state 61
    closeBrace      reduce using rule 40 (subroutine -> .)
    plusPlus        shift and go to state 62
    minusMinus      shift and go to state 63

    subroutine                     shift and go to state 131
    unaryExpression                shift and go to state 60

state 125

    (36) subroutine -> for openParenthesis varSequence semicolon statement . semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (46) statement -> statement . logicExpression statement
    (47) logicExpression -> . greaterThan
    (48) logicExpression -> . lessThan
    (49) logicExpression -> . isEqual
    (50) logicExpression -> . notEqual
    (51) logicExpression -> . greaterOrEqual
    (52) logicExpression -> . lessOrEqual
    (53) logicExpression -> . and
    (54) logicExpression -> . or

    semicolon       shift and go to state 132
    greaterThan     shift and go to state 106
    lessThan        shift and go to state 107
    isEqual         shift and go to state 108
    notEqual        shift and go to state 109
    greaterOrEqual  shift and go to state 110
    lessOrEqual     shift and go to state 111
    and             shift and go to state 112
    or              shift and go to state 113

    logicExpression                shift and go to state 105

state 126

    (39) subroutine -> call id openParenthesis closeParenthesis semicolon . subroutine
    (32) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (33) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (34) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (35) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (36) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . id equal arithmeticExpression action_generate_quadruplet semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (22) unaryExpression -> . id plusPlus
    (23) unaryExpression -> . id minusMinus
    (24) unaryExpression -> . plusPlus id
    (25) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 54
    consoleRead     shift and go to state 55
    if              shift and go to state 57
    while           shift and go to state 58
    for             shift and go to state 59
    id              shift and go to state 56
    call            shift and go to state 61
    closeBrace      reduce using rule 40 (subroutine -> .)
    plusPlus        shift and go to state 62
    minusMinus      shift and go to state 63

    subroutine                     shift and go to state 133
    unaryExpression                shift and go to state 60

state 127

    (32) subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon subroutine .

    closeBrace      reduce using rule 32 (subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon subroutine .)


state 128

    (33) subroutine -> consoleRead openParenthesis id closeParenthesis semicolon subroutine .

    closeBrace      reduce using rule 33 (subroutine -> consoleRead openParenthesis id closeParenthesis semicolon subroutine .)


state 129

    (37) subroutine -> id equal arithmeticExpression action_generate_quadruplet semicolon subroutine .

    closeBrace      reduce using rule 37 (subroutine -> id equal arithmeticExpression action_generate_quadruplet semicolon subroutine .)


state 130

    (34) subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine . closeBrace elseStatement subroutine

    closeBrace      shift and go to state 134


state 131

    (35) subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine . closeBrace subroutine

    closeBrace      shift and go to state 135


state 132

    (36) subroutine -> for openParenthesis varSequence semicolon statement semicolon . arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (16) arithmeticExpression -> . arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide
    (19) multiplyDivide -> . multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide
    (20) val -> . value
    (21) val -> . openParenthesis arithmeticExpression closeParenthesis
    (26) value -> . intValue action_int_value
    (27) value -> . doubleValue action_double_value
    (28) value -> . id action_var_value

    openParenthesis shift and go to state 26
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 29

    arithmeticExpression           shift and go to state 136
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25

state 133

    (39) subroutine -> call id openParenthesis closeParenthesis semicolon subroutine .

    closeBrace      reduce using rule 39 (subroutine -> call id openParenthesis closeParenthesis semicolon subroutine .)


state 134

    (34) subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine closeBrace . elseStatement subroutine
    (41) elseStatement -> . elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement
    (42) elseStatement -> . else openBrace subroutine closeBrace
    (43) elseStatement -> .

    elif            shift and go to state 138
    else            shift and go to state 139
    consoleWrite    reduce using rule 43 (elseStatement -> .)
    consoleRead     reduce using rule 43 (elseStatement -> .)
    if              reduce using rule 43 (elseStatement -> .)
    while           reduce using rule 43 (elseStatement -> .)
    for             reduce using rule 43 (elseStatement -> .)
    id              reduce using rule 43 (elseStatement -> .)
    call            reduce using rule 43 (elseStatement -> .)
    plusPlus        reduce using rule 43 (elseStatement -> .)
    minusMinus      reduce using rule 43 (elseStatement -> .)
    closeBrace      reduce using rule 43 (elseStatement -> .)

    elseStatement                  shift and go to state 137

state 135

    (35) subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine closeBrace . subroutine
    (32) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (33) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (34) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (35) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (36) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . id equal arithmeticExpression action_generate_quadruplet semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (22) unaryExpression -> . id plusPlus
    (23) unaryExpression -> . id minusMinus
    (24) unaryExpression -> . plusPlus id
    (25) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 54
    consoleRead     shift and go to state 55
    if              shift and go to state 57
    while           shift and go to state 58
    for             shift and go to state 59
    id              shift and go to state 56
    call            shift and go to state 61
    closeBrace      reduce using rule 40 (subroutine -> .)
    plusPlus        shift and go to state 62
    minusMinus      shift and go to state 63

    subroutine                     shift and go to state 140
    unaryExpression                shift and go to state 60

state 136

    (36) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression . closeParenthesis openBrace subroutine closeBrace subroutine
    (15) arithmeticExpression -> arithmeticExpression . plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (16) arithmeticExpression -> arithmeticExpression . minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression

    closeParenthesis shift and go to state 141
    plus            shift and go to state 35
    minus           shift and go to state 36


state 137

    (34) subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement . subroutine
    (32) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (33) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (34) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (35) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (36) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . id equal arithmeticExpression action_generate_quadruplet semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (22) unaryExpression -> . id plusPlus
    (23) unaryExpression -> . id minusMinus
    (24) unaryExpression -> . plusPlus id
    (25) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 54
    consoleRead     shift and go to state 55
    if              shift and go to state 57
    while           shift and go to state 58
    for             shift and go to state 59
    id              shift and go to state 56
    call            shift and go to state 61
    closeBrace      reduce using rule 40 (subroutine -> .)
    plusPlus        shift and go to state 62
    minusMinus      shift and go to state 63

    subroutine                     shift and go to state 142
    unaryExpression                shift and go to state 60

state 138

    (41) elseStatement -> elif . openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement

    openParenthesis shift and go to state 143


state 139

    (42) elseStatement -> else . openBrace subroutine closeBrace

    openBrace       shift and go to state 144


state 140

    (35) subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine .

    closeBrace      reduce using rule 35 (subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine .)


state 141

    (36) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis . openBrace subroutine closeBrace subroutine

    openBrace       shift and go to state 145


state 142

    (34) subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine .

    closeBrace      reduce using rule 34 (subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine .)


state 143

    (41) elseStatement -> elif openParenthesis . statement closeParenthesis openBrace subroutine closeBrace elseStatement
    (44) statement -> . arithmeticExpression
    (45) statement -> . arithmeticExpression logicExpression arithmeticExpression
    (46) statement -> . statement logicExpression statement
    (14) arithmeticExpression -> . multiplyDivide
    (15) arithmeticExpression -> . arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (16) arithmeticExpression -> . arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression
    (17) multiplyDivide -> . val
    (18) multiplyDivide -> . multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide
    (19) multiplyDivide -> . multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide
    (20) val -> . value
    (21) val -> . openParenthesis arithmeticExpression closeParenthesis
    (26) value -> . intValue action_int_value
    (27) value -> . doubleValue action_double_value
    (28) value -> . id action_var_value

    openParenthesis shift and go to state 26
    intValue        shift and go to state 27
    doubleValue     shift and go to state 28
    id              shift and go to state 29

    statement                      shift and go to state 146
    arithmeticExpression           shift and go to state 95
    multiplyDivide                 shift and go to state 23
    val                            shift and go to state 24
    value                          shift and go to state 25

state 144

    (42) elseStatement -> else openBrace . subroutine closeBrace
    (32) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (33) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (34) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (35) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (36) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . id equal arithmeticExpression action_generate_quadruplet semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (22) unaryExpression -> . id plusPlus
    (23) unaryExpression -> . id minusMinus
    (24) unaryExpression -> . plusPlus id
    (25) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 54
    consoleRead     shift and go to state 55
    if              shift and go to state 57
    while           shift and go to state 58
    for             shift and go to state 59
    id              shift and go to state 56
    call            shift and go to state 61
    closeBrace      reduce using rule 40 (subroutine -> .)
    plusPlus        shift and go to state 62
    minusMinus      shift and go to state 63

    subroutine                     shift and go to state 147
    unaryExpression                shift and go to state 60

state 145

    (36) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace . subroutine closeBrace subroutine
    (32) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (33) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (34) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (35) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (36) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . id equal arithmeticExpression action_generate_quadruplet semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (22) unaryExpression -> . id plusPlus
    (23) unaryExpression -> . id minusMinus
    (24) unaryExpression -> . plusPlus id
    (25) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 54
    consoleRead     shift and go to state 55
    if              shift and go to state 57
    while           shift and go to state 58
    for             shift and go to state 59
    id              shift and go to state 56
    call            shift and go to state 61
    closeBrace      reduce using rule 40 (subroutine -> .)
    plusPlus        shift and go to state 62
    minusMinus      shift and go to state 63

    subroutine                     shift and go to state 148
    unaryExpression                shift and go to state 60

state 146

    (41) elseStatement -> elif openParenthesis statement . closeParenthesis openBrace subroutine closeBrace elseStatement
    (46) statement -> statement . logicExpression statement
    (47) logicExpression -> . greaterThan
    (48) logicExpression -> . lessThan
    (49) logicExpression -> . isEqual
    (50) logicExpression -> . notEqual
    (51) logicExpression -> . greaterOrEqual
    (52) logicExpression -> . lessOrEqual
    (53) logicExpression -> . and
    (54) logicExpression -> . or

    closeParenthesis shift and go to state 149
    greaterThan     shift and go to state 106
    lessThan        shift and go to state 107
    isEqual         shift and go to state 108
    notEqual        shift and go to state 109
    greaterOrEqual  shift and go to state 110
    lessOrEqual     shift and go to state 111
    and             shift and go to state 112
    or              shift and go to state 113

    logicExpression                shift and go to state 105

state 147

    (42) elseStatement -> else openBrace subroutine . closeBrace

    closeBrace      shift and go to state 150


state 148

    (36) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine . closeBrace subroutine

    closeBrace      shift and go to state 151


state 149

    (41) elseStatement -> elif openParenthesis statement closeParenthesis . openBrace subroutine closeBrace elseStatement

    openBrace       shift and go to state 152


state 150

    (42) elseStatement -> else openBrace subroutine closeBrace .

    consoleWrite    reduce using rule 42 (elseStatement -> else openBrace subroutine closeBrace .)
    consoleRead     reduce using rule 42 (elseStatement -> else openBrace subroutine closeBrace .)
    if              reduce using rule 42 (elseStatement -> else openBrace subroutine closeBrace .)
    while           reduce using rule 42 (elseStatement -> else openBrace subroutine closeBrace .)
    for             reduce using rule 42 (elseStatement -> else openBrace subroutine closeBrace .)
    id              reduce using rule 42 (elseStatement -> else openBrace subroutine closeBrace .)
    call            reduce using rule 42 (elseStatement -> else openBrace subroutine closeBrace .)
    plusPlus        reduce using rule 42 (elseStatement -> else openBrace subroutine closeBrace .)
    minusMinus      reduce using rule 42 (elseStatement -> else openBrace subroutine closeBrace .)
    closeBrace      reduce using rule 42 (elseStatement -> else openBrace subroutine closeBrace .)


state 151

    (36) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace . subroutine
    (32) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (33) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (34) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (35) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (36) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . id equal arithmeticExpression action_generate_quadruplet semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (22) unaryExpression -> . id plusPlus
    (23) unaryExpression -> . id minusMinus
    (24) unaryExpression -> . plusPlus id
    (25) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 54
    consoleRead     shift and go to state 55
    if              shift and go to state 57
    while           shift and go to state 58
    for             shift and go to state 59
    id              shift and go to state 56
    call            shift and go to state 61
    closeBrace      reduce using rule 40 (subroutine -> .)
    plusPlus        shift and go to state 62
    minusMinus      shift and go to state 63

    subroutine                     shift and go to state 153
    unaryExpression                shift and go to state 60

state 152

    (41) elseStatement -> elif openParenthesis statement closeParenthesis openBrace . subroutine closeBrace elseStatement
    (32) subroutine -> . consoleWrite openParenthesis cout closeParenthesis semicolon subroutine
    (33) subroutine -> . consoleRead openParenthesis id closeParenthesis semicolon subroutine
    (34) subroutine -> . if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine
    (35) subroutine -> . while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine
    (36) subroutine -> . for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine
    (37) subroutine -> . id equal arithmeticExpression action_generate_quadruplet semicolon subroutine
    (38) subroutine -> . unaryExpression semicolon subroutine
    (39) subroutine -> . call id openParenthesis closeParenthesis semicolon subroutine
    (40) subroutine -> .
    (22) unaryExpression -> . id plusPlus
    (23) unaryExpression -> . id minusMinus
    (24) unaryExpression -> . plusPlus id
    (25) unaryExpression -> . minusMinus id

    consoleWrite    shift and go to state 54
    consoleRead     shift and go to state 55
    if              shift and go to state 57
    while           shift and go to state 58
    for             shift and go to state 59
    id              shift and go to state 56
    call            shift and go to state 61
    closeBrace      reduce using rule 40 (subroutine -> .)
    plusPlus        shift and go to state 62
    minusMinus      shift and go to state 63

    subroutine                     shift and go to state 154
    unaryExpression                shift and go to state 60

state 153

    (36) subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine .

    closeBrace      reduce using rule 36 (subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine .)


state 154

    (41) elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine . closeBrace elseStatement

    closeBrace      shift and go to state 155


state 155

    (41) elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace . elseStatement
    (41) elseStatement -> . elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement
    (42) elseStatement -> . else openBrace subroutine closeBrace
    (43) elseStatement -> .

    elif            shift and go to state 138
    else            shift and go to state 139
    consoleWrite    reduce using rule 43 (elseStatement -> .)
    consoleRead     reduce using rule 43 (elseStatement -> .)
    if              reduce using rule 43 (elseStatement -> .)
    while           reduce using rule 43 (elseStatement -> .)
    for             reduce using rule 43 (elseStatement -> .)
    id              reduce using rule 43 (elseStatement -> .)
    call            reduce using rule 43 (elseStatement -> .)
    plusPlus        reduce using rule 43 (elseStatement -> .)
    minusMinus      reduce using rule 43 (elseStatement -> .)
    closeBrace      reduce using rule 43 (elseStatement -> .)

    elseStatement                  shift and go to state 156

state 156

    (41) elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .

    consoleWrite    reduce using rule 41 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    consoleRead     reduce using rule 41 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    if              reduce using rule 41 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    while           reduce using rule 41 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    for             reduce using rule 41 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    id              reduce using rule 41 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    call            reduce using rule 41 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    plusPlus        reduce using rule 41 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    minusMinus      reduce using rule 41 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)
    closeBrace      reduce using rule 41 (elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for greaterThan in state 95 resolved as shift
WARNING: shift/reduce conflict for lessThan in state 95 resolved as shift
WARNING: shift/reduce conflict for isEqual in state 95 resolved as shift
WARNING: shift/reduce conflict for notEqual in state 95 resolved as shift
WARNING: shift/reduce conflict for greaterOrEqual in state 95 resolved as shift
WARNING: shift/reduce conflict for lessOrEqual in state 95 resolved as shift
WARNING: shift/reduce conflict for and in state 95 resolved as shift
WARNING: shift/reduce conflict for or in state 95 resolved as shift
WARNING: shift/reduce conflict for greaterThan in state 122 resolved as shift
WARNING: shift/reduce conflict for lessThan in state 122 resolved as shift
WARNING: shift/reduce conflict for isEqual in state 122 resolved as shift
WARNING: shift/reduce conflict for notEqual in state 122 resolved as shift
WARNING: shift/reduce conflict for greaterOrEqual in state 122 resolved as shift
WARNING: shift/reduce conflict for lessOrEqual in state 122 resolved as shift
WARNING: shift/reduce conflict for and in state 122 resolved as shift
WARNING: shift/reduce conflict for or in state 122 resolved as shift
