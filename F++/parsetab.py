
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'and and closeBrace closeBracket closeParenthesis comma comment consoleRead consoleRead consoleWrite consoleWrite divide double double doubleValue else else equal for for function function greaterThan id if if int int intValue isEqual lessThan main main minus minusMinus multiply notEqual openBrace openBracket openParenthesis or or plus plusPlus semicolon while while\n\tprogram : var\n    \n    var : type varSequence var\n    |\n    \n    varSequence : id equal arithmeticExpression semicolon\n        | id semicolon\n        | matrix semicolon\n        | id equal arithmeticExpression comma varSequence\n        | id comma varSequence\n        | matrix comma varSequence\n    \n    type : int\n    | double\n    \n    arithmeticExpression : value\n    | value plus arithmeticExpression\n    | value minus arithmeticExpression\n    | value multiply arithmeticExpression\n    | value divide arithmeticExpression\n    | openParenthesis arithmeticExpression closeParenthesis\n    | openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression\n    | openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression\n    | openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression\n    | openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression\n    \n    value : intValue\n    | doubleValue\n    | id\n    \n    matrix : id openBracket value closeBracket\n    | id openBracket value closeBracket openBracket value closeBracket\n    '
    
_lr_action_items = {'closeParenthesis':([17,19,20,22,32,35,36,37,38,39,46,47,48,49,],[-23,-22,-24,-12,39,-16,-13,-15,-14,-17,-20,-18,-21,-19,]),'closeBracket':([17,18,19,20,40,],[-23,25,-22,-24,45,]),'divide':([17,19,20,22,39,],[-23,-22,-24,28,41,]),'semicolon':([6,8,17,19,20,21,22,25,35,36,37,38,39,45,46,47,48,49,],[10,12,-23,-22,-24,26,-12,-25,-16,-13,-15,-14,-17,-26,-20,-18,-21,-19,]),'openBracket':([8,25,],[13,33,]),'int':([0,7,10,12,16,24,26,34,],[1,1,-6,-5,-9,-8,-4,-7,]),'double':([0,7,10,12,16,24,26,34,],[2,2,-6,-5,-9,-8,-4,-7,]),'minus':([17,19,20,22,39,],[-23,-22,-24,31,44,]),'equal':([8,],[14,]),'doubleValue':([13,14,23,28,29,30,31,33,41,42,43,44,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'intValue':([13,14,23,28,29,30,31,33,41,42,43,44,],[19,19,19,19,19,19,19,19,19,19,19,19,]),'comma':([6,8,17,19,20,21,22,25,35,36,37,38,39,45,46,47,48,49,],[9,15,-23,-22,-24,27,-12,-25,-16,-13,-15,-14,-17,-26,-20,-18,-21,-19,]),'multiply':([17,19,20,22,39,],[-23,-22,-24,30,43,]),'plus':([17,19,20,22,39,],[-23,-22,-24,29,42,]),'openParenthesis':([14,23,28,29,30,31,41,42,43,44,],[23,23,23,23,23,23,23,23,23,23,]),'id':([1,2,5,9,13,14,15,23,27,28,29,30,31,33,41,42,43,44,],[-10,-11,8,8,20,20,8,20,8,20,20,20,20,20,20,20,20,20,]),'$end':([0,3,4,7,10,11,12,16,24,26,34,],[-3,0,-1,-3,-6,-2,-5,-9,-8,-4,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'matrix':([5,9,15,27,],[6,6,6,6,]),'value':([13,14,23,28,29,30,31,33,41,42,43,44,],[18,22,22,22,22,22,22,40,22,22,22,22,]),'varSequence':([5,9,15,27,],[7,16,24,34,]),'program':([0,],[3,]),'arithmeticExpression':([14,23,28,29,30,31,41,42,43,44,],[21,32,35,36,37,38,46,47,48,49,]),'var':([0,7,],[4,11,]),'type':([0,7,],[5,5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> var','program',1,'p_program','yacc.py',13),
  ('var -> type varSequence var','var',3,'p_var','yacc.py',19),
  ('var -> <empty>','var',0,'p_var','yacc.py',20),
  ('varSequence -> id equal arithmeticExpression semicolon','varSequence',4,'p_varSequence','yacc.py',26),
  ('varSequence -> id semicolon','varSequence',2,'p_varSequence','yacc.py',27),
  ('varSequence -> matrix semicolon','varSequence',2,'p_varSequence','yacc.py',28),
  ('varSequence -> id equal arithmeticExpression comma varSequence','varSequence',5,'p_varSequence','yacc.py',29),
  ('varSequence -> id comma varSequence','varSequence',3,'p_varSequence','yacc.py',30),
  ('varSequence -> matrix comma varSequence','varSequence',3,'p_varSequence','yacc.py',31),
  ('type -> int','type',1,'p_type','yacc.py',36),
  ('type -> double','type',1,'p_type','yacc.py',37),
  ('arithmeticExpression -> value','arithmeticExpression',1,'p_arithmeticExpression','yacc.py',42),
  ('arithmeticExpression -> value plus arithmeticExpression','arithmeticExpression',3,'p_arithmeticExpression','yacc.py',43),
  ('arithmeticExpression -> value minus arithmeticExpression','arithmeticExpression',3,'p_arithmeticExpression','yacc.py',44),
  ('arithmeticExpression -> value multiply arithmeticExpression','arithmeticExpression',3,'p_arithmeticExpression','yacc.py',45),
  ('arithmeticExpression -> value divide arithmeticExpression','arithmeticExpression',3,'p_arithmeticExpression','yacc.py',46),
  ('arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis','arithmeticExpression',3,'p_arithmeticExpression','yacc.py',47),
  ('arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis plus arithmeticExpression','arithmeticExpression',5,'p_arithmeticExpression','yacc.py',48),
  ('arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis minus arithmeticExpression','arithmeticExpression',5,'p_arithmeticExpression','yacc.py',49),
  ('arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis divide arithmeticExpression','arithmeticExpression',5,'p_arithmeticExpression','yacc.py',50),
  ('arithmeticExpression -> openParenthesis arithmeticExpression closeParenthesis multiply arithmeticExpression','arithmeticExpression',5,'p_arithmeticExpression','yacc.py',51),
  ('value -> intValue','value',1,'p_value','yacc.py',56),
  ('value -> doubleValue','value',1,'p_value','yacc.py',57),
  ('value -> id','value',1,'p_value','yacc.py',58),
  ('matrix -> id openBracket value closeBracket','matrix',4,'p_matrix','yacc.py',63),
  ('matrix -> id openBracket value closeBracket openBracket value closeBracket','matrix',7,'p_matrix','yacc.py',64),
]
