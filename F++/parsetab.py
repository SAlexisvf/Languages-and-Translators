
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'and call closeBrace closeBracket closeParenthesis comma consoleRead consoleWrite divide double doubleValue elif else equal for function greaterOrEqual greaterThan id if int intValue isEqual lessOrEqual lessThan main minus minusMinus multiply not notEqual openBrace openBracket openParenthesis or plus plusPlus semicolon string while\n\tprogram : var func mainProgram\n    \n    var : type varSequence semicolon var\n    |\n    \n    varSequence : variable equal arithmeticExpression\n        | variable\n        | variable equal arithmeticExpression comma varSequence\n        | variable comma varSequence\n    \n    variable : id dimentions\n    \n    dimentions : openBracket value closeBracket\n    | openBracket value closeBracket openBracket value closeBracket\n    |\n    \n    type : int\n    | double\n    \n    arithmeticExpression : multiplyDivide\n    | arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression\n    | arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression\n    \n    multiplyDivide : val\n    | multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide\n    | multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide\n    \n    val : value\n    | openParenthesis arithmeticExpression closeParenthesis\n    \n    unaryExpression : id plusPlus\n    | id minusMinus\n    | plusPlus id\n    | minusMinus id\n    \n    value : intValue action_int_value\n    | doubleValue action_double_value\n    | id action_var_value\n    \n    func : function id openParenthesis closeParenthesis openBrace subroutine closeBrace func\n    |\n    \n    mainProgram : main openParenthesis closeParenthesis openBrace subroutine closeBrace\n    \n    subroutine : consoleWrite openParenthesis cout closeParenthesis semicolon subroutine\n    | consoleRead openParenthesis id closeParenthesis semicolon subroutine\n    | if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine\n    | while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine\n    | for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine\n    | id equal arithmeticExpression action_generate_quadruplet semicolon subroutine\n    | unaryExpression semicolon subroutine\n    | call id openParenthesis closeParenthesis semicolon subroutine\n    |\n    \n    elseStatement : elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement\n    | else openBrace subroutine closeBrace\n    |\n    \n    statement : arithmeticExpression\n    | arithmeticExpression logicExpression arithmeticExpression\n    | statement logicExpression statement\n    \n    logicExpression : greaterThan\n    | lessThan\n    | isEqual\n    | notEqual\n    | greaterOrEqual\n    | lessOrEqual\n    | and\n    | or\n    \n    cout : arithmeticExpression\n    | string\n    action_var_value :action_int_value :action_double_value :action_add_operator :action_generate_quadruplet :action_quadruplet_arithmetic_expression :action_quadruplet_multiply_divide :'
    
_lr_action_items = {'function':([0,2,14,21,83,],[-3,7,-3,-2,7,]),'main':([0,2,6,14,21,83,100,],[-3,-30,12,-3,-2,-30,-29,]),'int':([0,14,],[4,4,]),'double':([0,14,],[5,5,]),'$end':([1,11,70,],[0,-1,-31,]),'id':([3,4,5,7,15,16,18,26,34,35,36,37,38,44,45,47,48,49,50,52,61,62,63,71,72,73,76,77,78,79,105,106,107,108,109,110,111,112,113,114,116,118,119,120,121,124,126,132,134,135,137,143,144,145,150,151,152,155,156,],[10,-12,-13,13,29,10,29,29,10,-60,-60,-60,-60,56,56,29,29,29,29,29,80,81,82,29,92,29,29,29,10,56,29,-47,-48,-49,-50,-51,-52,-53,-54,29,29,56,56,56,56,56,56,29,-43,56,56,29,56,56,-42,56,56,-43,-41,]),'semicolon':([8,9,10,17,22,23,24,25,27,28,29,30,40,41,42,43,46,51,60,65,66,67,68,74,75,81,82,84,85,86,87,88,93,95,97,101,102,103,117,122,123,125,],[14,-5,-11,-8,-4,-14,-17,-20,-58,-59,-57,-7,-26,-27,-28,-9,-6,-21,79,-62,-62,-63,-63,-22,-23,-24,-25,-15,-16,-18,-19,-10,-61,-44,116,118,119,120,126,-46,-45,132,]),'equal':([9,10,17,43,56,88,],[15,-11,-8,-9,73,-10,]),'comma':([9,10,17,22,23,24,25,27,28,29,40,41,42,43,51,65,66,67,68,84,85,86,87,88,],[16,-11,-8,34,-14,-17,-20,-58,-59,-57,-26,-27,-28,-9,-21,-62,-62,-63,-63,-15,-16,-18,-19,-10,]),'openBracket':([10,43,],[18,52,]),'openParenthesis':([12,13,15,26,35,36,37,38,47,48,49,50,54,55,57,58,59,71,73,76,77,80,105,106,107,108,109,110,111,112,113,114,116,132,138,143,],[19,20,26,26,-60,-60,-60,-60,26,26,26,26,71,72,76,77,78,26,26,26,26,99,26,-47,-48,-49,-50,-51,-52,-53,-54,26,26,26,143,26,]),'intValue':([15,18,26,35,36,37,38,47,48,49,50,52,71,73,76,77,105,106,107,108,109,110,111,112,113,114,116,132,143,],[27,27,27,-60,-60,-60,-60,27,27,27,27,27,27,27,27,27,27,-47,-48,-49,-50,-51,-52,-53,-54,27,27,27,27,]),'doubleValue':([15,18,26,35,36,37,38,47,48,49,50,52,71,73,76,77,105,106,107,108,109,110,111,112,113,114,116,132,143,],[28,28,28,-60,-60,-60,-60,28,28,28,28,28,28,28,28,28,28,-47,-48,-49,-50,-51,-52,-53,-54,28,28,28,28,]),'closeParenthesis':([19,20,23,24,25,27,28,29,39,40,41,42,51,65,66,67,68,84,85,86,87,89,90,91,92,94,95,96,99,122,123,136,146,],[32,33,-14,-17,-20,-58,-59,-57,51,-26,-27,-28,-21,-62,-62,-63,-63,-15,-16,-18,-19,101,-55,-56,102,104,-44,115,117,-46,-45,141,149,]),'plus':([22,23,24,25,27,28,29,39,40,41,42,51,65,66,67,68,84,85,86,87,90,93,95,123,136,],[35,-14,-17,-20,-58,-59,-57,35,-26,-27,-28,-21,-62,-62,-63,-63,-15,-16,-18,-19,35,35,35,35,35,]),'minus':([22,23,24,25,27,28,29,39,40,41,42,51,65,66,67,68,84,85,86,87,90,93,95,123,136,],[36,-14,-17,-20,-58,-59,-57,36,-26,-27,-28,-21,-62,-62,-63,-63,-15,-16,-18,-19,36,36,36,36,36,]),'greaterThan':([23,24,25,27,28,29,40,41,42,51,65,66,67,68,84,85,86,87,94,95,96,122,123,125,146,],[-14,-17,-20,-58,-59,-57,-26,-27,-28,-21,-62,-62,-63,-63,-15,-16,-18,-19,106,106,106,106,-45,106,106,]),'lessThan':([23,24,25,27,28,29,40,41,42,51,65,66,67,68,84,85,86,87,94,95,96,122,123,125,146,],[-14,-17,-20,-58,-59,-57,-26,-27,-28,-21,-62,-62,-63,-63,-15,-16,-18,-19,107,107,107,107,-45,107,107,]),'isEqual':([23,24,25,27,28,29,40,41,42,51,65,66,67,68,84,85,86,87,94,95,96,122,123,125,146,],[-14,-17,-20,-58,-59,-57,-26,-27,-28,-21,-62,-62,-63,-63,-15,-16,-18,-19,108,108,108,108,-45,108,108,]),'notEqual':([23,24,25,27,28,29,40,41,42,51,65,66,67,68,84,85,86,87,94,95,96,122,123,125,146,],[-14,-17,-20,-58,-59,-57,-26,-27,-28,-21,-62,-62,-63,-63,-15,-16,-18,-19,109,109,109,109,-45,109,109,]),'greaterOrEqual':([23,24,25,27,28,29,40,41,42,51,65,66,67,68,84,85,86,87,94,95,96,122,123,125,146,],[-14,-17,-20,-58,-59,-57,-26,-27,-28,-21,-62,-62,-63,-63,-15,-16,-18,-19,110,110,110,110,-45,110,110,]),'lessOrEqual':([23,24,25,27,28,29,40,41,42,51,65,66,67,68,84,85,86,87,94,95,96,122,123,125,146,],[-14,-17,-20,-58,-59,-57,-26,-27,-28,-21,-62,-62,-63,-63,-15,-16,-18,-19,111,111,111,111,-45,111,111,]),'and':([23,24,25,27,28,29,40,41,42,51,65,66,67,68,84,85,86,87,94,95,96,122,123,125,146,],[-14,-17,-20,-58,-59,-57,-26,-27,-28,-21,-62,-62,-63,-63,-15,-16,-18,-19,112,112,112,112,-45,112,112,]),'or':([23,24,25,27,28,29,40,41,42,51,65,66,67,68,84,85,86,87,94,95,96,122,123,125,146,],[-14,-17,-20,-58,-59,-57,-26,-27,-28,-21,-62,-62,-63,-63,-15,-16,-18,-19,113,113,113,113,-45,113,113,]),'multiply':([23,24,25,27,28,29,40,41,42,51,65,66,67,68,86,87,],[37,-17,-20,-58,-59,-57,-26,-27,-28,-21,37,37,-63,-63,-18,-19,]),'divide':([23,24,25,27,28,29,40,41,42,51,65,66,67,68,86,87,],[38,-17,-20,-58,-59,-57,-26,-27,-28,-21,38,38,-63,-63,-18,-19,]),'closeBracket':([27,28,29,31,40,41,42,69,],[-58,-59,-57,43,-26,-27,-28,88,]),'openBrace':([32,33,104,115,139,141,149,],[44,45,121,124,144,145,152,]),'consoleWrite':([44,45,79,118,119,120,121,124,126,134,135,137,144,145,150,151,152,155,156,],[54,54,54,54,54,54,54,54,54,-43,54,54,54,54,-42,54,54,-43,-41,]),'consoleRead':([44,45,79,118,119,120,121,124,126,134,135,137,144,145,150,151,152,155,156,],[55,55,55,55,55,55,55,55,55,-43,55,55,55,55,-42,55,55,-43,-41,]),'if':([44,45,79,118,119,120,121,124,126,134,135,137,144,145,150,151,152,155,156,],[57,57,57,57,57,57,57,57,57,-43,57,57,57,57,-42,57,57,-43,-41,]),'while':([44,45,79,118,119,120,121,124,126,134,135,137,144,145,150,151,152,155,156,],[58,58,58,58,58,58,58,58,58,-43,58,58,58,58,-42,58,58,-43,-41,]),'for':([44,45,79,118,119,120,121,124,126,134,135,137,144,145,150,151,152,155,156,],[59,59,59,59,59,59,59,59,59,-43,59,59,59,59,-42,59,59,-43,-41,]),'call':([44,45,79,118,119,120,121,124,126,134,135,137,144,145,150,151,152,155,156,],[61,61,61,61,61,61,61,61,61,-43,61,61,61,61,-42,61,61,-43,-41,]),'closeBrace':([44,45,53,64,79,98,118,119,120,121,124,126,127,128,129,130,131,133,134,135,137,140,142,144,145,147,148,150,151,152,153,154,155,156,],[-40,-40,70,83,-40,-38,-40,-40,-40,-40,-40,-40,-32,-33,-37,134,135,-39,-43,-40,-40,-35,-34,-40,-40,150,151,-42,-40,-40,-36,155,-43,-41,]),'plusPlus':([44,45,56,79,118,119,120,121,124,126,134,135,137,144,145,150,151,152,155,156,],[62,62,74,62,62,62,62,62,62,62,-43,62,62,62,62,-42,62,62,-43,-41,]),'minusMinus':([44,45,56,79,118,119,120,121,124,126,134,135,137,144,145,150,151,152,155,156,],[63,63,75,63,63,63,63,63,63,63,-43,63,63,63,63,-42,63,63,-43,-41,]),'string':([71,],[91,]),'elif':([134,155,],[138,138,]),'else':([134,155,],[139,139,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'var':([0,14,],[2,21,]),'type':([0,14,],[3,3,]),'func':([2,83,],[6,100,]),'varSequence':([3,16,34,78,],[8,30,46,97,]),'variable':([3,16,34,78,],[9,9,9,9,]),'mainProgram':([6,],[11,]),'dimentions':([10,],[17,]),'arithmeticExpression':([15,26,71,73,76,77,105,114,116,132,143,],[22,39,90,93,95,95,95,123,95,136,95,]),'multiplyDivide':([15,26,47,48,71,73,76,77,105,114,116,132,143,],[23,23,65,66,23,23,23,23,23,23,23,23,23,]),'val':([15,26,47,48,49,50,71,73,76,77,105,114,116,132,143,],[24,24,24,24,67,68,24,24,24,24,24,24,24,24,24,]),'value':([15,18,26,47,48,49,50,52,71,73,76,77,105,114,116,132,143,],[25,31,25,25,25,25,25,69,25,25,25,25,25,25,25,25,25,]),'action_int_value':([27,],[40,]),'action_double_value':([28,],[41,]),'action_var_value':([29,],[42,]),'action_add_operator':([35,36,37,38,],[47,48,49,50,]),'subroutine':([44,45,79,118,119,120,121,124,126,135,137,144,145,151,152,],[53,64,98,127,128,129,130,131,133,140,142,147,148,153,154,]),'unaryExpression':([44,45,79,118,119,120,121,124,126,135,137,144,145,151,152,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'action_quadruplet_arithmetic_expression':([65,66,],[84,85,]),'action_quadruplet_multiply_divide':([67,68,],[86,87,]),'cout':([71,],[89,]),'statement':([76,77,105,116,143,],[94,96,122,125,146,]),'action_generate_quadruplet':([93,],[103,]),'logicExpression':([94,95,96,122,125,146,],[105,114,105,105,105,105,]),'elseStatement':([134,155,],[137,156,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> var func mainProgram','program',3,'p_program','yacc.py',29),
  ('var -> type varSequence semicolon var','var',4,'p_var','yacc.py',39),
  ('var -> <empty>','var',0,'p_var','yacc.py',40),
  ('varSequence -> variable equal arithmeticExpression','varSequence',3,'p_varSequence','yacc.py',48),
  ('varSequence -> variable','varSequence',1,'p_varSequence','yacc.py',49),
  ('varSequence -> variable equal arithmeticExpression comma varSequence','varSequence',5,'p_varSequence','yacc.py',50),
  ('varSequence -> variable comma varSequence','varSequence',3,'p_varSequence','yacc.py',51),
  ('variable -> id dimentions','variable',2,'p_variable','yacc.py',60),
  ('dimentions -> openBracket value closeBracket','dimentions',3,'p_dimentions','yacc.py',66),
  ('dimentions -> openBracket value closeBracket openBracket value closeBracket','dimentions',6,'p_dimentions','yacc.py',67),
  ('dimentions -> <empty>','dimentions',0,'p_dimentions','yacc.py',68),
  ('type -> int','type',1,'p_type','yacc.py',73),
  ('type -> double','type',1,'p_type','yacc.py',74),
  ('arithmeticExpression -> multiplyDivide','arithmeticExpression',1,'p_arithmeticExpression','yacc.py',95),
  ('arithmeticExpression -> arithmeticExpression plus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression','arithmeticExpression',5,'p_arithmeticExpression','yacc.py',96),
  ('arithmeticExpression -> arithmeticExpression minus action_add_operator multiplyDivide action_quadruplet_arithmetic_expression','arithmeticExpression',5,'p_arithmeticExpression','yacc.py',97),
  ('multiplyDivide -> val','multiplyDivide',1,'p_multiplyDivide','yacc.py',102),
  ('multiplyDivide -> multiplyDivide multiply action_add_operator val action_quadruplet_multiply_divide','multiplyDivide',5,'p_multiplyDivide','yacc.py',103),
  ('multiplyDivide -> multiplyDivide divide action_add_operator val action_quadruplet_multiply_divide','multiplyDivide',5,'p_multiplyDivide','yacc.py',104),
  ('val -> value','val',1,'p_val','yacc.py',109),
  ('val -> openParenthesis arithmeticExpression closeParenthesis','val',3,'p_val','yacc.py',110),
  ('unaryExpression -> id plusPlus','unaryExpression',2,'p_unaryExpression','yacc.py',115),
  ('unaryExpression -> id minusMinus','unaryExpression',2,'p_unaryExpression','yacc.py',116),
  ('unaryExpression -> plusPlus id','unaryExpression',2,'p_unaryExpression','yacc.py',117),
  ('unaryExpression -> minusMinus id','unaryExpression',2,'p_unaryExpression','yacc.py',118),
  ('value -> intValue action_int_value','value',2,'p_value','yacc.py',123),
  ('value -> doubleValue action_double_value','value',2,'p_value','yacc.py',124),
  ('value -> id action_var_value','value',2,'p_value','yacc.py',125),
  ('func -> function id openParenthesis closeParenthesis openBrace subroutine closeBrace func','func',8,'p_func','yacc.py',130),
  ('func -> <empty>','func',0,'p_func','yacc.py',131),
  ('mainProgram -> main openParenthesis closeParenthesis openBrace subroutine closeBrace','mainProgram',6,'p_mainProgram','yacc.py',136),
  ('subroutine -> consoleWrite openParenthesis cout closeParenthesis semicolon subroutine','subroutine',6,'p_subroutine','yacc.py',141),
  ('subroutine -> consoleRead openParenthesis id closeParenthesis semicolon subroutine','subroutine',6,'p_subroutine','yacc.py',142),
  ('subroutine -> if openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement subroutine','subroutine',9,'p_subroutine','yacc.py',143),
  ('subroutine -> while openParenthesis statement closeParenthesis openBrace subroutine closeBrace subroutine','subroutine',8,'p_subroutine','yacc.py',144),
  ('subroutine -> for openParenthesis varSequence semicolon statement semicolon arithmeticExpression closeParenthesis openBrace subroutine closeBrace subroutine','subroutine',12,'p_subroutine','yacc.py',145),
  ('subroutine -> id equal arithmeticExpression action_generate_quadruplet semicolon subroutine','subroutine',6,'p_subroutine','yacc.py',146),
  ('subroutine -> unaryExpression semicolon subroutine','subroutine',3,'p_subroutine','yacc.py',147),
  ('subroutine -> call id openParenthesis closeParenthesis semicolon subroutine','subroutine',6,'p_subroutine','yacc.py',148),
  ('subroutine -> <empty>','subroutine',0,'p_subroutine','yacc.py',149),
  ('elseStatement -> elif openParenthesis statement closeParenthesis openBrace subroutine closeBrace elseStatement','elseStatement',8,'p_elseStatement','yacc.py',153),
  ('elseStatement -> else openBrace subroutine closeBrace','elseStatement',4,'p_elseStatement','yacc.py',154),
  ('elseStatement -> <empty>','elseStatement',0,'p_elseStatement','yacc.py',155),
  ('statement -> arithmeticExpression','statement',1,'p_statement','yacc.py',160),
  ('statement -> arithmeticExpression logicExpression arithmeticExpression','statement',3,'p_statement','yacc.py',161),
  ('statement -> statement logicExpression statement','statement',3,'p_statement','yacc.py',162),
  ('logicExpression -> greaterThan','logicExpression',1,'p_logicExpression','yacc.py',167),
  ('logicExpression -> lessThan','logicExpression',1,'p_logicExpression','yacc.py',168),
  ('logicExpression -> isEqual','logicExpression',1,'p_logicExpression','yacc.py',169),
  ('logicExpression -> notEqual','logicExpression',1,'p_logicExpression','yacc.py',170),
  ('logicExpression -> greaterOrEqual','logicExpression',1,'p_logicExpression','yacc.py',171),
  ('logicExpression -> lessOrEqual','logicExpression',1,'p_logicExpression','yacc.py',172),
  ('logicExpression -> and','logicExpression',1,'p_logicExpression','yacc.py',173),
  ('logicExpression -> or','logicExpression',1,'p_logicExpression','yacc.py',174),
  ('cout -> arithmeticExpression','cout',1,'p_cout','yacc.py',179),
  ('cout -> string','cout',1,'p_cout','yacc.py',180),
  ('action_var_value -> <empty>','action_var_value',0,'p_action_var_value','yacc.py',193),
  ('action_int_value -> <empty>','action_int_value',0,'p_action_int_value','yacc.py',198),
  ('action_double_value -> <empty>','action_double_value',0,'p_action_double_value','yacc.py',203),
  ('action_add_operator -> <empty>','action_add_operator',0,'p_action_add_operator','yacc.py',208),
  ('action_generate_quadruplet -> <empty>','action_generate_quadruplet',0,'p_action_generate_quadruplet','yacc.py',212),
  ('action_quadruplet_arithmetic_expression -> <empty>','action_quadruplet_arithmetic_expression',0,'p_action_quadruplet_arithmetic_expression','yacc.py',234),
  ('action_quadruplet_multiply_divide -> <empty>','action_quadruplet_multiply_divide',0,'p_action_quadruplet_multiply_divide','yacc.py',240),
]
